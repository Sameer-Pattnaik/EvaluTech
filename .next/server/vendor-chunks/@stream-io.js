"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stream-io";
exports.ids = ["vendor-chunks/@stream-io"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@stream-io/node-sdk/dist/index.es.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@stream-io/node-sdk/dist/index.es.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChannelOwnCapability: () => (/* binding */ ChannelOwnCapability),\n/* harmony export */   FeedOwnCapability: () => (/* binding */ FeedOwnCapability),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamChannel: () => (/* binding */ StreamChannel),\n/* harmony export */   StreamChatClient: () => (/* binding */ StreamChatClient),\n/* harmony export */   StreamClient: () => (/* binding */ StreamClient),\n/* harmony export */   StreamFeed: () => (/* binding */ StreamFeed),\n/* harmony export */   StreamFeedsClient: () => (/* binding */ StreamFeedsClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(action-browser)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(action-browser)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\nfunction JWTUserToken(apiSecret, payload) {\n    // make sure we return a clear error when jwt is shimmed (ie. browser build)\n    if (jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ == null || jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__.sign == null) {\n        throw Error(`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`);\n    }\n    const opts = Object.assign({\n        algorithm: 'HS256',\n        noTimestamp: true,\n    });\n    if (payload.iat) {\n        opts.noTimestamp = false;\n    }\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__.sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret, jwtOptions = {}) {\n    const payload = {\n        server: true,\n    };\n    const opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__.sign(payload, apiSecret, opts);\n}\n\nconst decoders = {};\nconst decodeDatetimeType = (input) => typeof input === 'number'\n    ? new Date(Math.floor(input / 1000000))\n    : new Date(input);\ndecoders.DatetimeType = decodeDatetimeType;\nconst decode = (typeMappings, input) => {\n    if (!input || Object.keys(typeMappings).length === 0)\n        return input;\n    Object.keys(typeMappings).forEach((key) => {\n        if (input[key] != null) {\n            if (typeMappings[key]) {\n                const decoder = decoders[typeMappings[key].type];\n                if (decoder) {\n                    if (typeMappings[key].isSingle) {\n                        input[key] = decoder(input[key]);\n                    }\n                    else {\n                        Object.keys(input[key]).forEach((k) => {\n                            input[key][k] = decoder(input[key][k]);\n                        });\n                    }\n                }\n            }\n        }\n    });\n    return input;\n};\ndecoders.AcceptFeedMemberInviteResponse = (input) => {\n    const typeMappings = {\n        member: { type: 'FeedMemberResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AcceptFollowResponse = (input) => {\n    const typeMappings = {\n        follow: { type: 'FollowResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActionLogResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        review_queue_item: { type: 'ReviewQueueItemResponse', isSingle: true },\n        target_user: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityMarkEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityMarkedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityPinResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityPinnedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        pinned_activity: { type: 'PinActivityResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityReactionAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityReactionDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityReactionUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityRemovedFromFeedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        comments: { type: 'CommentResponse', isSingle: false },\n        latest_reactions: { type: 'FeedsReactionResponse', isSingle: false },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_bookmarks: { type: 'BookmarkResponse', isSingle: false },\n        own_reactions: { type: 'FeedsReactionResponse', isSingle: false },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        edited_at: { type: 'DatetimeType', isSingle: true },\n        expires_at: { type: 'DatetimeType', isSingle: true },\n        current_feed: { type: 'FeedResponse', isSingle: true },\n        parent: { type: 'ActivityResponse', isSingle: true },\n        poll: { type: 'PollResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivitySelectorConfig = (input) => {\n    const typeMappings = {\n        cutoff_time: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityUnpinnedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        pinned_activity: { type: 'PinActivityResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ActivityUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AddActivityResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AddBookmarkResponse = (input) => {\n    const typeMappings = {\n        bookmark: { type: 'BookmarkResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AddCommentReactionResponse = (input) => {\n    const typeMappings = {\n        comment: { type: 'CommentResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AddCommentResponse = (input) => {\n    const typeMappings = {\n        comment: { type: 'CommentResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AddCommentsBatchResponse = (input) => {\n    const typeMappings = {\n        comments: { type: 'CommentResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AddReactionResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AggregatedActivityResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        activities: { type: 'ActivityResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AnyEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AppResponseFields = (input) => {\n    const typeMappings = {\n        event_hooks: { type: 'EventHook', isSingle: false },\n        call_types: { type: 'CallType', isSingle: false },\n        channel_configs: { type: 'ChannelConfig', isSingle: false },\n        push_notifications: { type: 'PushNotificationFields', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AsyncBulkImageModerationEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        finished_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AsyncExportChannelsEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        finished_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AsyncExportErrorEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        finished_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AsyncExportModerationLogsEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        finished_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AsyncExportUsersEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        finished_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.AutomodDetails = (input) => {\n    const typeMappings = {\n        result: { type: 'MessageModerationResult', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Ban = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'Channel', isSingle: true },\n        created_by: { type: 'User', isSingle: true },\n        target: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BanResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        banned_by: { type: 'UserResponse', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockListResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockUsersResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockedUserEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        blocked_by_user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BlockedUserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        blocked_user: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        bookmark: { type: 'BookmarkResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        bookmark: { type: 'BookmarkResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkFolderDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        bookmark_folder: { type: 'BookmarkFolderResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkFolderResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkFolderUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        bookmark_folder: { type: 'BookmarkFolderResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        folder: { type: 'BookmarkFolderResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.BookmarkUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        bookmark: { type: 'BookmarkResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallAcceptedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallClosedCaptionsFailedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallClosedCaptionsStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallClosedCaptionsStoppedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallCreatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallEndedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallFrameRecordingFailedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallFrameRecordingFrameReadyEvent = (input) => {\n    const typeMappings = {\n        captured_at: { type: 'DatetimeType', isSingle: true },\n        created_at: { type: 'DatetimeType', isSingle: true },\n        users: { type: 'UserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallFrameRecordingStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallFrameRecordingStoppedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallHLSBroadcastingFailedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallHLSBroadcastingStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallHLSBroadcastingStoppedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallLiveStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallMemberAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallMemberRemovedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallMemberUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallMemberUpdatedPermissionEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallMissedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallModerationBlurEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallModerationWarningEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallNotificationEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallParticipantResponse = (input) => {\n    const typeMappings = {\n        joined_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallReactionEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        reaction: { type: 'ReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRecording = (input) => {\n    const typeMappings = {\n        end_time: { type: 'DatetimeType', isSingle: true },\n        start_time: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRecordingFailedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRecordingReadyEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call_recording: { type: 'CallRecording', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRecordingStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRecordingStoppedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRejectedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallReportResponse = (input) => {\n    const typeMappings = {\n        ended_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        ended_at: { type: 'DatetimeType', isSingle: true },\n        starts_at: { type: 'DatetimeType', isSingle: true },\n        session: { type: 'CallSessionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRingEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRtmpBroadcastFailedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRtmpBroadcastStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallRtmpBroadcastStoppedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionEndedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionParticipantCountsUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionParticipantJoinedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        participant: { type: 'CallParticipantResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionParticipantLeftEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        participant: { type: 'CallParticipantResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionResponse = (input) => {\n    const typeMappings = {\n        participants: { type: 'CallParticipantResponse', isSingle: false },\n        accepted_by: { type: 'DatetimeType', isSingle: false },\n        missed_by: { type: 'DatetimeType', isSingle: false },\n        rejected_by: { type: 'DatetimeType', isSingle: false },\n        ended_at: { type: 'DatetimeType', isSingle: true },\n        live_ended_at: { type: 'DatetimeType', isSingle: true },\n        live_started_at: { type: 'DatetimeType', isSingle: true },\n        started_at: { type: 'DatetimeType', isSingle: true },\n        timer_ends_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallSessionStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallStateResponseFields = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallStatsReportReadyEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallStatsReportSummaryResponse = (input) => {\n    const typeMappings = {\n        first_stats_time: { type: 'DatetimeType', isSingle: true },\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTranscription = (input) => {\n    const typeMappings = {\n        end_time: { type: 'DatetimeType', isSingle: true },\n        start_time: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTranscriptionFailedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTranscriptionReadyEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call_transcription: { type: 'CallTranscription', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTranscriptionStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTranscriptionStoppedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallType = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallUserFeedbackSubmittedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CallUserMutedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CampaignCompletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        campaign: { type: 'CampaignResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CampaignResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        segments: { type: 'Segment', isSingle: false },\n        users: { type: 'UserResponse', isSingle: false },\n        stats: { type: 'CampaignStatsResponse', isSingle: true },\n        scheduled_for: { type: 'DatetimeType', isSingle: true },\n        stop_at: { type: 'DatetimeType', isSingle: true },\n        sender: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CampaignStartedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        campaign: { type: 'CampaignResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CampaignStatsResponse = (input) => {\n    const typeMappings = {\n        stats_completed_at: { type: 'DatetimeType', isSingle: true },\n        stats_started_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Channel = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        message_count_updated_at: { type: 'DatetimeType', isSingle: true },\n        active_live_locations: { type: 'SharedLocation', isSingle: false },\n        invites: { type: 'ChannelMember', isSingle: false },\n        members: { type: 'ChannelMember', isSingle: false },\n        config: { type: 'ChannelConfig', isSingle: true },\n        created_by: { type: 'User', isSingle: true },\n        truncated_by: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelConfig = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelConfigWithInfo = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelCreatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelFrozenEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelHiddenEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMember = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        archived_at: { type: 'DatetimeType', isSingle: true },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        invite_accepted_at: { type: 'DatetimeType', isSingle: true },\n        invite_rejected_at: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMemberResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        archived_at: { type: 'DatetimeType', isSingle: true },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        invite_accepted_at: { type: 'DatetimeType', isSingle: true },\n        invite_rejected_at: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMute = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelMutedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelPushPreferences = (input) => {\n    const typeMappings = {\n        disabled_until: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        hide_messages_before: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        mute_expires_at: { type: 'DatetimeType', isSingle: true },\n        truncated_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'ChannelMember', isSingle: false },\n        config: { type: 'ChannelConfigWithInfo', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        truncated_by: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelStateResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n        messages: { type: 'MessageResponse', isSingle: false },\n        pinned_messages: { type: 'MessageResponse', isSingle: false },\n        threads: { type: 'ThreadStateResponse', isSingle: false },\n        hide_messages_before: { type: 'DatetimeType', isSingle: true },\n        active_live_locations: {\n            type: 'SharedLocationResponseData',\n            isSingle: false,\n        },\n        pending_messages: { type: 'PendingMessageResponse', isSingle: false },\n        read: { type: 'ReadStateResponse', isSingle: false },\n        watchers: { type: 'UserResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        draft: { type: 'DraftResponse', isSingle: true },\n        membership: { type: 'ChannelMember', isSingle: true },\n        push_preferences: { type: 'ChannelPushPreferences', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelStateResponseFields = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n        messages: { type: 'MessageResponse', isSingle: false },\n        pinned_messages: { type: 'MessageResponse', isSingle: false },\n        threads: { type: 'ThreadStateResponse', isSingle: false },\n        hide_messages_before: { type: 'DatetimeType', isSingle: true },\n        active_live_locations: {\n            type: 'SharedLocationResponseData',\n            isSingle: false,\n        },\n        pending_messages: { type: 'PendingMessageResponse', isSingle: false },\n        read: { type: 'ReadStateResponse', isSingle: false },\n        watchers: { type: 'UserResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        draft: { type: 'DraftResponse', isSingle: true },\n        membership: { type: 'ChannelMember', isSingle: true },\n        push_preferences: { type: 'ChannelPushPreferences', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelTruncatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelTypeConfig = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelUnFrozenEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelUnmutedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChannelVisibleEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ChatActivityStatsResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'MessageStatsResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CheckResponse = (input) => {\n    const typeMappings = {\n        item: { type: 'ReviewQueueItemResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ClosedCaptionEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Command = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        comment: { type: 'CommentResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        comment: { type: 'CommentResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentReactionAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        comment: { type: 'CommentResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentReactionDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        comment: { type: 'CommentResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentReactionUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        comment: { type: 'CommentResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'FeedsReactionResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'FeedsReactionResponse', isSingle: false },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CommentUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        comment: { type: 'CommentResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ConfigResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CountByMinuteResponse = (input) => {\n    const typeMappings = {\n        start_ts: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateBlockListResponse = (input) => {\n    const typeMappings = {\n        blocklist: { type: 'BlockListResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateCallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateChannelTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateCommandResponse = (input) => {\n    const typeMappings = {\n        command: { type: 'Command', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateFeedGroupResponse = (input) => {\n    const typeMappings = {\n        feed_group: { type: 'FeedGroupResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateFeedViewResponse = (input) => {\n    const typeMappings = {\n        feed_view: { type: 'FeedViewResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateFeedsBatchResponse = (input) => {\n    const typeMappings = {\n        feeds: { type: 'FeedResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateGuestResponse = (input) => {\n    const typeMappings = {\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateImportResponse = (input) => {\n    const typeMappings = {\n        import_task: { type: 'ImportTask', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateMembershipLevelResponse = (input) => {\n    const typeMappings = {\n        membership_level: { type: 'MembershipLevelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CreateRoleResponse = (input) => {\n    const typeMappings = {\n        role: { type: 'Role', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CustomCheckResponse = (input) => {\n    const typeMappings = {\n        item: { type: 'ReviewQueueItemResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.CustomVideoEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeactivateUserResponse = (input) => {\n    const typeMappings = {\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteActivityReactionResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteBookmarkResponse = (input) => {\n    const typeMappings = {\n        bookmark: { type: 'BookmarkResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteCallResponse = (input) => {\n    const typeMappings = {\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteChannelResponse = (input) => {\n    const typeMappings = {\n        channel: { type: 'ChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteCommentReactionResponse = (input) => {\n    const typeMappings = {\n        comment: { type: 'CommentResponse', isSingle: true },\n        reaction: { type: 'FeedsReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeleteReactionResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n        reaction: { type: 'ReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Device = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DeviceResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DraftPayloadResponse = (input) => {\n    const typeMappings = {\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.DraftResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        message: { type: 'DraftPayloadResponse', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        parent_message: { type: 'MessageResponse', isSingle: true },\n        quoted_message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.EgressRTMPResponse = (input) => {\n    const typeMappings = {\n        started_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.EntityCreatorResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        devices: { type: 'DeviceResponse', isSingle: false },\n        push_notifications: {\n            type: 'PushNotificationSettingsResponse',\n            isSingle: true,\n        },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.EventHook = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.EventResponse = (input) => {\n    const typeMappings = {\n        event: { type: 'WSEvent', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ExportUserResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'MessageResponse', isSingle: false },\n        reactions: { type: 'ReactionResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedCreatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        members: { type: 'FeedMemberResponse', isSingle: false },\n        feed: { type: 'FeedResponse', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedGroupChangedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedGroupDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedGroupResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        activity_selectors: { type: 'ActivitySelectorConfig', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedMemberAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        member: { type: 'FeedMemberResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedMemberRemovedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedMemberResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        invite_accepted_at: { type: 'DatetimeType', isSingle: true },\n        invite_rejected_at: { type: 'DatetimeType', isSingle: true },\n        membership_level: { type: 'MembershipLevelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedMemberUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        member: { type: 'FeedMemberResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        own_follows: { type: 'FollowResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        feed: { type: 'FeedResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedViewResponse = (input) => {\n    const typeMappings = {\n        last_used_at: { type: 'DatetimeType', isSingle: true },\n        activity_selectors: { type: 'ActivitySelectorConfig', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FeedsReactionResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FlagDetails = (input) => {\n    const typeMappings = {\n        automod: { type: 'AutomodDetails', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FlagFeedback = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FlagUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FollowBatchResponse = (input) => {\n    const typeMappings = {\n        follows: { type: 'FollowResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FollowCreatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        follow: { type: 'FollowResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FollowDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        follow: { type: 'FollowResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FollowResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        source_feed: { type: 'FeedResponse', isSingle: true },\n        target_feed: { type: 'FeedResponse', isSingle: true },\n        request_accepted_at: { type: 'DatetimeType', isSingle: true },\n        request_rejected_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FollowUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        follow: { type: 'FollowResponse', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.FullUserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        devices: { type: 'DeviceResponse', isSingle: false },\n        mutes: { type: 'UserMuteResponse', isSingle: false },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetActiveCallsStatusResponse = (input) => {\n    const typeMappings = {\n        end_time: { type: 'DatetimeType', isSingle: true },\n        start_time: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetActivityResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetApplicationResponse = (input) => {\n    const typeMappings = {\n        app: { type: 'AppResponseFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetBlockListResponse = (input) => {\n    const typeMappings = {\n        blocklist: { type: 'BlockListResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetBlockedUsersResponse = (input) => {\n    const typeMappings = {\n        blocks: { type: 'BlockedUserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCallReportResponse = (input) => {\n    const typeMappings = {\n        video_reactions: { type: 'VideoReactionsResponse', isSingle: false },\n        chat_activity: { type: 'ChatActivityStatsResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCallResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetChannelTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCommandResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCommentRepliesResponse = (input) => {\n    const typeMappings = {\n        comments: { type: 'ThreadedCommentResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCommentResponse = (input) => {\n    const typeMappings = {\n        comment: { type: 'CommentResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetCommentsResponse = (input) => {\n    const typeMappings = {\n        comments: { type: 'ThreadedCommentResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetConfigResponse = (input) => {\n    const typeMappings = {\n        config: { type: 'ConfigResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetDraftResponse = (input) => {\n    const typeMappings = {\n        draft: { type: 'DraftResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetFeedGroupResponse = (input) => {\n    const typeMappings = {\n        feed_group: { type: 'FeedGroupResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetFeedViewResponse = (input) => {\n    const typeMappings = {\n        feed_view: { type: 'FeedViewResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetFollowSuggestionsResponse = (input) => {\n    const typeMappings = {\n        suggestions: { type: 'FeedResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetImportResponse = (input) => {\n    const typeMappings = {\n        import_task: { type: 'ImportTask', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetManyMessagesResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'MessageResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageWithChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetOrCreateCallResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetOrCreateFeedGroupResponse = (input) => {\n    const typeMappings = {\n        feed_group: { type: 'FeedGroupResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetOrCreateFeedResponse = (input) => {\n    const typeMappings = {\n        activities: { type: 'ActivityResponse', isSingle: false },\n        aggregated_activities: {\n            type: 'AggregatedActivityResponse',\n            isSingle: false,\n        },\n        followers: { type: 'FollowResponse', isSingle: false },\n        following: { type: 'FollowResponse', isSingle: false },\n        members: { type: 'FeedMemberResponse', isSingle: false },\n        pinned_activities: { type: 'ActivityPinResponse', isSingle: false },\n        feed: { type: 'FeedResponse', isSingle: true },\n        own_follows: { type: 'FollowResponse', isSingle: false },\n        notification_status: { type: 'NotificationStatusResponse', isSingle: true },\n        own_membership: { type: 'FeedMemberResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetOrCreateFeedViewResponse = (input) => {\n    const typeMappings = {\n        feed_view: { type: 'FeedViewResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetPushTemplatesResponse = (input) => {\n    const typeMappings = {\n        templates: { type: 'PushTemplate', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetReactionsResponse = (input) => {\n    const typeMappings = {\n        reactions: { type: 'Reaction', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetRepliesResponse = (input) => {\n    const typeMappings = {\n        messages: { type: 'MessageResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetReviewQueueItemResponse = (input) => {\n    const typeMappings = {\n        item: { type: 'ReviewQueueItemResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetSegmentResponse = (input) => {\n    const typeMappings = {\n        segment: { type: 'SegmentResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetTaskResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GetThreadResponse = (input) => {\n    const typeMappings = {\n        thread: { type: 'ThreadStateResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.GoLiveResponse = (input) => {\n    const typeMappings = {\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ImportTask = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        history: { type: 'ImportTaskHistory', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ImportTaskHistory = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.KickedUserEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        kicked_by_user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListBlockListResponse = (input) => {\n    const typeMappings = {\n        blocklists: { type: 'BlockListResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListCallTypeResponse = (input) => {\n    const typeMappings = {\n        call_types: { type: 'CallTypeResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListChannelTypesResponse = (input) => {\n    const typeMappings = {\n        channel_types: { type: 'ChannelTypeConfig', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListCommandsResponse = (input) => {\n    const typeMappings = {\n        commands: { type: 'Command', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListDevicesResponse = (input) => {\n    const typeMappings = {\n        devices: { type: 'DeviceResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListFeedGroupsResponse = (input) => {\n    const typeMappings = {\n        groups: { type: 'FeedGroupResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListFeedViewsResponse = (input) => {\n    const typeMappings = {\n        views: { type: 'FeedViewResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListImportsResponse = (input) => {\n    const typeMappings = {\n        import_tasks: { type: 'ImportTask', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListPushProvidersResponse = (input) => {\n    const typeMappings = {\n        push_providers: { type: 'PushProviderResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListRecordingsResponse = (input) => {\n    const typeMappings = {\n        recordings: { type: 'CallRecording', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListRolesResponse = (input) => {\n    const typeMappings = {\n        roles: { type: 'Role', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ListTranscriptionsResponse = (input) => {\n    const typeMappings = {\n        transcriptions: { type: 'CallTranscription', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MarkReadResponse = (input) => {\n    const typeMappings = {\n        event: { type: 'MessageReadEvent', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MemberAddedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        member: { type: 'ChannelMember', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MemberRemovedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        member: { type: 'ChannelMember', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MemberResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MemberUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        member: { type: 'ChannelMember', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MembershipLevelResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Message = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'Reaction', isSingle: false },\n        mentioned_users: { type: 'User', isSingle: false },\n        own_reactions: { type: 'Reaction', isSingle: false },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        pinned_by: { type: 'User', isSingle: true },\n        poll: { type: 'Poll', isSingle: true },\n        quoted_message: { type: 'Message', isSingle: true },\n        reminder: { type: 'MessageReminder', isSingle: true },\n        shared_location: { type: 'SharedLocation', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageFlagResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        approved_at: { type: 'DatetimeType', isSingle: true },\n        rejected_at: { type: 'DatetimeType', isSingle: true },\n        reviewed_at: { type: 'DatetimeType', isSingle: true },\n        details: { type: 'FlagDetails', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        moderation_feedback: { type: 'FlagFeedback', isSingle: true },\n        moderation_result: { type: 'MessageModerationResult', isSingle: true },\n        reviewed_by: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageFlaggedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageHistoryEntryResponse = (input) => {\n    const typeMappings = {\n        message_updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageModerationResult = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageNewEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageReadEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel_last_message_at: { type: 'DatetimeType', isSingle: true },\n        thread: { type: 'ThreadResponse', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageReminder = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        remind_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'Channel', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'ReactionResponse', isSingle: false },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'ReactionResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserResponse', isSingle: false },\n        draft: { type: 'DraftResponse', isSingle: true },\n        pinned_by: { type: 'UserResponse', isSingle: true },\n        poll: { type: 'PollResponseData', isSingle: true },\n        quoted_message: { type: 'MessageResponse', isSingle: true },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n        shared_location: { type: 'SharedLocationResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageStatsResponse = (input) => {\n    const typeMappings = {\n        count_over_time: { type: 'CountByMinuteResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageUnblockedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageUndeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MessageWithChannelResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'ReactionResponse', isSingle: false },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'ReactionResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserResponse', isSingle: false },\n        draft: { type: 'DraftResponse', isSingle: true },\n        pinned_by: { type: 'UserResponse', isSingle: true },\n        poll: { type: 'PollResponseData', isSingle: true },\n        quoted_message: { type: 'MessageResponse', isSingle: true },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n        shared_location: { type: 'SharedLocationResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ModerationCheckCompletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ModerationCustomActionEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ModerationFlagResponse = (input) => {\n    const typeMappings = {\n        review_queue_item: { type: 'ReviewQueueItemResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ModerationFlaggedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ModerationMarkReviewedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MuteChannelResponse = (input) => {\n    const typeMappings = {\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        channel_mute: { type: 'ChannelMute', isSingle: true },\n        own_user: { type: 'OwnUser', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.MuteResponse = (input) => {\n    const typeMappings = {\n        mutes: { type: 'UserMute', isSingle: false },\n        own_user: { type: 'OwnUser', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.NotificationFeedUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        aggregated_activities: {\n            type: 'AggregatedActivityResponse',\n            isSingle: false,\n        },\n        notification_status: { type: 'NotificationStatusResponse', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.NotificationMarkUnreadEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        last_read_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.NotificationStatusResponse = (input) => {\n    const typeMappings = {\n        last_read_at: { type: 'DatetimeType', isSingle: true },\n        last_seen_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.OwnUser = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        devices: { type: 'Device', isSingle: false },\n        mutes: { type: 'UserMute', isSingle: false },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        last_engaged_at: { type: 'DatetimeType', isSingle: true },\n        push_preferences: { type: 'PushPreferences', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.OwnUserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        channel_mutes: { type: 'ChannelMute', isSingle: false },\n        devices: { type: 'DeviceResponse', isSingle: false },\n        mutes: { type: 'UserMuteResponse', isSingle: false },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        push_preferences: { type: 'PushPreferences', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ParticipantCountByMinuteResponse = (input) => {\n    const typeMappings = {\n        start_ts: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ParticipantCountOverTimeResponse = (input) => {\n    const typeMappings = {\n        by_minute: { type: 'ParticipantCountByMinuteResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PendingMessageEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'Channel', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PendingMessageResponse = (input) => {\n    const typeMappings = {\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PermissionRequestEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PinActivityResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        activity: { type: 'ActivityResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Poll = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_answers: { type: 'PollVote', isSingle: false },\n        own_votes: { type: 'PollVote', isSingle: false },\n        created_by: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollResponse = (input) => {\n    const typeMappings = {\n        poll: { type: 'PollResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollResponseData = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_answers: { type: 'PollVoteResponseData', isSingle: false },\n        own_votes: { type: 'PollVoteResponseData', isSingle: false },\n        created_by: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVote = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVoteResponse = (input) => {\n    const typeMappings = {\n        vote: { type: 'PollVoteResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVoteResponseData = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PollVotesResponse = (input) => {\n    const typeMappings = {\n        votes: { type: 'PollVoteResponseData', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushNotificationFields = (input) => {\n    const typeMappings = {\n        providers: { type: 'PushProvider', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushNotificationSettingsResponse = (input) => {\n    const typeMappings = {\n        disabled_until: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushPreferences = (input) => {\n    const typeMappings = {\n        disabled_until: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushProvider = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        disabled_at: { type: 'DatetimeType', isSingle: true },\n        push_templates: { type: 'PushTemplate', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushProviderResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        disabled_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.PushTemplate = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryActivitiesResponse = (input) => {\n    const typeMappings = {\n        activities: { type: 'ActivityResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryActivityReactionsResponse = (input) => {\n    const typeMappings = {\n        reactions: { type: 'FeedsReactionResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryBannedUsersResponse = (input) => {\n    const typeMappings = {\n        bans: { type: 'BanResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryBookmarkFoldersResponse = (input) => {\n    const typeMappings = {\n        bookmark_folders: { type: 'BookmarkFolderResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryBookmarksResponse = (input) => {\n    const typeMappings = {\n        bookmarks: { type: 'BookmarkResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallMembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallParticipantsResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        participants: { type: 'CallParticipantResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallStatsResponse = (input) => {\n    const typeMappings = {\n        reports: { type: 'CallStatsReportSummaryResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCallsResponse = (input) => {\n    const typeMappings = {\n        calls: { type: 'CallStateResponseFields', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCampaignsResponse = (input) => {\n    const typeMappings = {\n        campaigns: { type: 'CampaignResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryChannelsResponse = (input) => {\n    const typeMappings = {\n        channels: { type: 'ChannelStateResponseFields', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCommentReactionsResponse = (input) => {\n    const typeMappings = {\n        reactions: { type: 'FeedsReactionResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryCommentsResponse = (input) => {\n    const typeMappings = {\n        comments: { type: 'CommentResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryDraftsResponse = (input) => {\n    const typeMappings = {\n        drafts: { type: 'DraftResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFeedMembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'FeedMemberResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFeedModerationTemplate = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFeedModerationTemplatesResponse = (input) => {\n    const typeMappings = {\n        templates: { type: 'QueryFeedModerationTemplate', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFeedsResponse = (input) => {\n    const typeMappings = {\n        feeds: { type: 'FeedResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryFollowsResponse = (input) => {\n    const typeMappings = {\n        follows: { type: 'FollowResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryMembershipLevelsResponse = (input) => {\n    const typeMappings = {\n        membership_levels: { type: 'MembershipLevelResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryMessageFlagsResponse = (input) => {\n    const typeMappings = {\n        flags: { type: 'MessageFlagResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryMessageHistoryResponse = (input) => {\n    const typeMappings = {\n        message_history: { type: 'MessageHistoryEntryResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryModerationConfigsResponse = (input) => {\n    const typeMappings = {\n        configs: { type: 'ConfigResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryModerationFlagsResponse = (input) => {\n    const typeMappings = {\n        flags: { type: 'ModerationFlagResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryModerationLogsResponse = (input) => {\n    const typeMappings = {\n        logs: { type: 'ActionLogResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryPollsResponse = (input) => {\n    const typeMappings = {\n        polls: { type: 'PollResponseData', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryReactionsResponse = (input) => {\n    const typeMappings = {\n        reactions: { type: 'ReactionResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryRemindersResponse = (input) => {\n    const typeMappings = {\n        reminders: { type: 'ReminderResponseData', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryReviewQueueResponse = (input) => {\n    const typeMappings = {\n        items: { type: 'ReviewQueueItemResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QuerySegmentTargetsResponse = (input) => {\n    const typeMappings = {\n        targets: { type: 'SegmentTargetResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QuerySegmentsResponse = (input) => {\n    const typeMappings = {\n        segments: { type: 'SegmentResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryThreadsResponse = (input) => {\n    const typeMappings = {\n        threads: { type: 'ThreadStateResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.QueryUsersResponse = (input) => {\n    const typeMappings = {\n        users: { type: 'FullUserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Reaction = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        reaction: { type: 'Reaction', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionGroupResponse = (input) => {\n    const typeMappings = {\n        first_reaction_at: { type: 'DatetimeType', isSingle: true },\n        last_reaction_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionNewEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'User', isSingle: false },\n        message: { type: 'Message', isSingle: true },\n        reaction: { type: 'Reaction', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactionUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        reaction: { type: 'Reaction', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReactivateUserResponse = (input) => {\n    const typeMappings = {\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReadStateResponse = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.RejectFeedMemberInviteResponse = (input) => {\n    const typeMappings = {\n        member: { type: 'FeedMemberResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.RejectFollowResponse = (input) => {\n    const typeMappings = {\n        follow: { type: 'FollowResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReminderCreatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReminderDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReminderNotificationEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReminderResponseData = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        remind_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReminderUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReviewQueueItemNewEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        flags: { type: 'ModerationFlagResponse', isSingle: false },\n        action: { type: 'ActionLogResponse', isSingle: true },\n        review_queue_item: { type: 'ReviewQueueItemResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReviewQueueItemResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        actions: { type: 'ActionLogResponse', isSingle: false },\n        bans: { type: 'Ban', isSingle: false },\n        flags: { type: 'ModerationFlagResponse', isSingle: false },\n        completed_at: { type: 'DatetimeType', isSingle: true },\n        reviewed_at: { type: 'DatetimeType', isSingle: true },\n        assigned_to: { type: 'UserResponse', isSingle: true },\n        call: { type: 'CallResponse', isSingle: true },\n        entity_creator: { type: 'EntityCreatorResponse', isSingle: true },\n        feeds_v2_reaction: { type: 'Reaction', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n        reaction: { type: 'Reaction', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ReviewQueueItemUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n        flags: { type: 'ModerationFlagResponse', isSingle: false },\n        action: { type: 'ActionLogResponse', isSingle: true },\n        review_queue_item: { type: 'ReviewQueueItemResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Role = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SearchResult = (input) => {\n    const typeMappings = {\n        message: { type: 'SearchResultMessage', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SearchResultMessage = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'ReactionResponse', isSingle: false },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'ReactionResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        message_text_updated_at: { type: 'DatetimeType', isSingle: true },\n        pin_expires: { type: 'DatetimeType', isSingle: true },\n        pinned_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'UserResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        draft: { type: 'DraftResponse', isSingle: true },\n        pinned_by: { type: 'UserResponse', isSingle: true },\n        poll: { type: 'PollResponseData', isSingle: true },\n        quoted_message: { type: 'MessageResponse', isSingle: true },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n        shared_location: { type: 'SharedLocationResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.Segment = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SegmentResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SegmentTargetResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SendMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SendReactionResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n        reaction: { type: 'ReactionResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SharedLocation = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        end_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'Channel', isSingle: true },\n        message: { type: 'Message', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SharedLocationResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        end_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SharedLocationResponseData = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        end_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SharedLocationsResponse = (input) => {\n    const typeMappings = {\n        active_live_locations: {\n            type: 'SharedLocationResponseData',\n            isSingle: false,\n        },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SingleFollowResponse = (input) => {\n    const typeMappings = {\n        follow: { type: 'FollowResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.StopLiveResponse = (input) => {\n    const typeMappings = {\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.SubmitActionResponse = (input) => {\n    const typeMappings = {\n        item: { type: 'ReviewQueueItemResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadParticipant = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        last_read_at: { type: 'DatetimeType', isSingle: true },\n        last_thread_message_at: { type: 'DatetimeType', isSingle: true },\n        left_thread_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        thread_participants: { type: 'ThreadParticipant', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        parent_message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadStateResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        latest_replies: { type: 'MessageResponse', isSingle: false },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_message_at: { type: 'DatetimeType', isSingle: true },\n        read: { type: 'ReadStateResponse', isSingle: false },\n        thread_participants: { type: 'ThreadParticipant', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        draft: { type: 'DraftResponse', isSingle: true },\n        parent_message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        thread: { type: 'ThreadResponse', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.ThreadedCommentResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        mentioned_users: { type: 'UserResponse', isSingle: false },\n        own_reactions: { type: 'FeedsReactionResponse', isSingle: false },\n        user: { type: 'UserResponse', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        latest_reactions: { type: 'FeedsReactionResponse', isSingle: false },\n        replies: { type: 'ThreadedCommentResponse', isSingle: false },\n        reaction_groups: { type: 'ReactionGroupResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.TruncateChannelResponse = (input) => {\n    const typeMappings = {\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnblockedUserEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnfollowBatchResponse = (input) => {\n    const typeMappings = {\n        follows: { type: 'FollowResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnfollowResponse = (input) => {\n    const typeMappings = {\n        follow: { type: 'FollowResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnpinActivityResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsBatchResponse = (input) => {\n    const typeMappings = {\n        counts_by_user: { type: 'UnreadCountsResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsChannel = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsResponse = (input) => {\n    const typeMappings = {\n        channels: { type: 'UnreadCountsChannel', isSingle: false },\n        threads: { type: 'UnreadCountsThread', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UnreadCountsThread = (input) => {\n    const typeMappings = {\n        last_read: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateActivityPartialResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateActivityResponse = (input) => {\n    const typeMappings = {\n        activity: { type: 'ActivityResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateBlockListResponse = (input) => {\n    const typeMappings = {\n        blocklist: { type: 'BlockListResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateBookmarkFolderResponse = (input) => {\n    const typeMappings = {\n        bookmark_folder: { type: 'BookmarkFolderResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateBookmarkResponse = (input) => {\n    const typeMappings = {\n        bookmark: { type: 'BookmarkResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCallMembersResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCallResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'MemberResponse', isSingle: false },\n        call: { type: 'CallResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCallTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateChannelPartialResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMemberResponse', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateChannelResponse = (input) => {\n    const typeMappings = {\n        members: { type: 'ChannelMember', isSingle: false },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateChannelTypeResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCommandResponse = (input) => {\n    const typeMappings = {\n        command: { type: 'Command', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateCommentResponse = (input) => {\n    const typeMappings = {\n        comment: { type: 'CommentResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateFeedGroupResponse = (input) => {\n    const typeMappings = {\n        feed_group: { type: 'FeedGroupResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateFeedMembersResponse = (input) => {\n    const typeMappings = {\n        added: { type: 'FeedMemberResponse', isSingle: false },\n        updated: { type: 'FeedMemberResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateFeedResponse = (input) => {\n    const typeMappings = {\n        feed: { type: 'FeedResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateFeedViewResponse = (input) => {\n    const typeMappings = {\n        feed_view: { type: 'FeedViewResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateFollowResponse = (input) => {\n    const typeMappings = {\n        follow: { type: 'FollowResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMemberPartialResponse = (input) => {\n    const typeMappings = {\n        channel_member: { type: 'ChannelMemberResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMembershipLevelResponse = (input) => {\n    const typeMappings = {\n        membership_level: { type: 'MembershipLevelResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMessagePartialResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateMessageResponse = (input) => {\n    const typeMappings = {\n        message: { type: 'MessageResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateReminderResponse = (input) => {\n    const typeMappings = {\n        reminder: { type: 'ReminderResponseData', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateThreadPartialResponse = (input) => {\n    const typeMappings = {\n        thread: { type: 'ThreadResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdateUsersResponse = (input) => {\n    const typeMappings = {\n        users: { type: 'FullUserResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpdatedCallPermissionsEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertActivitiesResponse = (input) => {\n    const typeMappings = {\n        activities: { type: 'ActivityResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertConfigResponse = (input) => {\n    const typeMappings = {\n        config: { type: 'ConfigResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertModerationTemplateResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertPushPreferencesResponse = (input) => {\n    const typeMappings = {\n        user_preferences: { type: 'PushPreferences', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertPushProviderResponse = (input) => {\n    const typeMappings = {\n        push_provider: { type: 'PushProviderResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UpsertPushTemplateResponse = (input) => {\n    const typeMappings = {\n        template: { type: 'PushTemplate', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.User = (input) => {\n    const typeMappings = {\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        created_at: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        last_engaged_at: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserBannedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        created_by: { type: 'User', isSingle: true },\n        expiration: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserDeactivatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        created_by: { type: 'User', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserFlaggedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserMessagesDeletedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'UserResponseCommonFields', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserMute = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        target: { type: 'User', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserMuteResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        expires: { type: 'DatetimeType', isSingle: true },\n        target: { type: 'UserResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserMutedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserReactivatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserResponse = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        ban_expires: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n        devices: { type: 'DeviceResponse', isSingle: false },\n        push_notifications: {\n            type: 'PushNotificationSettingsResponse',\n            isSingle: true,\n        },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserResponseCommonFields = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        updated_at: { type: 'DatetimeType', isSingle: true },\n        deactivated_at: { type: 'DatetimeType', isSingle: true },\n        deleted_at: { type: 'DatetimeType', isSingle: true },\n        last_active: { type: 'DatetimeType', isSingle: true },\n        revoke_tokens_issued_before: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserUnbannedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserUnmutedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserUnreadReminderEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        user: { type: 'User', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.UserUpdatedEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        received_at: { type: 'DatetimeType', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.VideoReactionOverTimeResponse = (input) => {\n    const typeMappings = {\n        by_minute: { type: 'CountByMinuteResponse', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.VideoReactionsResponse = (input) => {\n    const typeMappings = {\n        count_over_time: { type: 'VideoReactionOverTimeResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.WSEvent = (input) => {\n    const typeMappings = {\n        created_at: { type: 'DatetimeType', isSingle: true },\n        channel_last_message_at: { type: 'DatetimeType', isSingle: true },\n        channel: { type: 'ChannelResponse', isSingle: true },\n        created_by: { type: 'UserResponse', isSingle: true },\n        me: { type: 'OwnUserResponse', isSingle: true },\n        member: { type: 'ChannelMember', isSingle: true },\n        message: { type: 'MessageResponse', isSingle: true },\n        poll: { type: 'PollResponseData', isSingle: true },\n        poll_vote: { type: 'PollVoteResponseData', isSingle: true },\n        reaction: { type: 'ReactionResponse', isSingle: true },\n        thread: { type: 'ThreadResponse', isSingle: true },\n        user: { type: 'UserResponse', isSingle: true },\n    };\n    return decode(typeMappings, input);\n};\ndecoders.WrappedUnreadCountsResponse = (input) => {\n    const typeMappings = {\n        channels: { type: 'UnreadCountsChannel', isSingle: false },\n        threads: { type: 'UnreadCountsThread', isSingle: false },\n    };\n    return decode(typeMappings, input);\n};\n\nclass CommonApi {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    async getApp() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/app', undefined, undefined);\n        decoders.GetApplicationResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateApp(request) {\n        const body = {\n            async_url_enrich_enabled: request?.async_url_enrich_enabled,\n            auto_translation_enabled: request?.auto_translation_enabled,\n            before_message_send_hook_url: request?.before_message_send_hook_url,\n            cdn_expiration_seconds: request?.cdn_expiration_seconds,\n            channel_hide_members_only: request?.channel_hide_members_only,\n            custom_action_handler_url: request?.custom_action_handler_url,\n            disable_auth_checks: request?.disable_auth_checks,\n            disable_permissions_checks: request?.disable_permissions_checks,\n            enforce_unique_usernames: request?.enforce_unique_usernames,\n            feeds_moderation_enabled: request?.feeds_moderation_enabled,\n            feeds_v2_region: request?.feeds_v2_region,\n            guest_user_creation_disabled: request?.guest_user_creation_disabled,\n            image_moderation_enabled: request?.image_moderation_enabled,\n            max_aggregated_activities_length: request?.max_aggregated_activities_length,\n            migrate_permissions_to_v2: request?.migrate_permissions_to_v2,\n            moderation_enabled: request?.moderation_enabled,\n            moderation_webhook_url: request?.moderation_webhook_url,\n            multi_tenant_enabled: request?.multi_tenant_enabled,\n            permission_version: request?.permission_version,\n            reminders_interval: request?.reminders_interval,\n            reminders_max_members: request?.reminders_max_members,\n            revoke_tokens_issued_before: request?.revoke_tokens_issued_before,\n            sns_key: request?.sns_key,\n            sns_secret: request?.sns_secret,\n            sns_topic_arn: request?.sns_topic_arn,\n            sqs_key: request?.sqs_key,\n            sqs_secret: request?.sqs_secret,\n            sqs_url: request?.sqs_url,\n            user_response_time_enabled: request?.user_response_time_enabled,\n            webhook_url: request?.webhook_url,\n            allowed_flag_reasons: request?.allowed_flag_reasons,\n            event_hooks: request?.event_hooks,\n            image_moderation_block_labels: request?.image_moderation_block_labels,\n            image_moderation_labels: request?.image_moderation_labels,\n            user_search_disallowed_roles: request?.user_search_disallowed_roles,\n            webhook_events: request?.webhook_events,\n            apn_config: request?.apn_config,\n            async_moderation_config: request?.async_moderation_config,\n            datadog_info: request?.datadog_info,\n            file_upload_config: request?.file_upload_config,\n            firebase_config: request?.firebase_config,\n            grants: request?.grants,\n            huawei_config: request?.huawei_config,\n            image_upload_config: request?.image_upload_config,\n            moderation_dashboard_preferences: request?.moderation_dashboard_preferences,\n            push_config: request?.push_config,\n            xiaomi_config: request?.xiaomi_config,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/app', undefined, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listBlockLists(request) {\n        const queryParams = {\n            team: request?.team,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/blocklists', undefined, queryParams);\n        decoders.ListBlockListResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createBlockList(request) {\n        const body = {\n            name: request?.name,\n            words: request?.words,\n            team: request?.team,\n            type: request?.type,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/blocklists', undefined, undefined, body, 'application/json');\n        decoders.CreateBlockListResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteBlockList(request) {\n        const queryParams = {\n            team: request?.team,\n        };\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/blocklists/{name}', pathParams, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getBlockList(request) {\n        const queryParams = {\n            team: request?.team,\n        };\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/blocklists/{name}', pathParams, queryParams);\n        decoders.GetBlockListResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateBlockList(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const body = {\n            team: request?.team,\n            words: request?.words,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/blocklists/{name}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateBlockListResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async checkPush(request) {\n        const body = {\n            apn_template: request?.apn_template,\n            event_type: request?.event_type,\n            firebase_data_template: request?.firebase_data_template,\n            firebase_template: request?.firebase_template,\n            message_id: request?.message_id,\n            push_provider_name: request?.push_provider_name,\n            push_provider_type: request?.push_provider_type,\n            skip_devices: request?.skip_devices,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/check_push', undefined, undefined, body, 'application/json');\n        decoders.CheckPushResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async checkSNS(request) {\n        const body = {\n            sns_key: request?.sns_key,\n            sns_secret: request?.sns_secret,\n            sns_topic_arn: request?.sns_topic_arn,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/check_sns', undefined, undefined, body, 'application/json');\n        decoders.CheckSNSResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async checkSQS(request) {\n        const body = {\n            sqs_key: request?.sqs_key,\n            sqs_secret: request?.sqs_secret,\n            sqs_url: request?.sqs_url,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/check_sqs', undefined, undefined, body, 'application/json');\n        decoders.CheckSQSResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteDevice(request) {\n        const queryParams = {\n            id: request?.id,\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/devices', undefined, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listDevices(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/devices', undefined, queryParams);\n        decoders.ListDevicesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createDevice(request) {\n        const body = {\n            id: request?.id,\n            push_provider: request?.push_provider,\n            push_provider_name: request?.push_provider_name,\n            user_id: request?.user_id,\n            voip_token: request?.voip_token,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/devices', undefined, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async exportUsers(request) {\n        const body = {\n            user_ids: request?.user_ids,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/export/users', undefined, undefined, body, 'application/json');\n        decoders.ExportUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listExternalStorage() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/external_storage', undefined, undefined);\n        decoders.ListExternalStorageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createExternalStorage(request) {\n        const body = {\n            bucket: request?.bucket,\n            name: request?.name,\n            storage_type: request?.storage_type,\n            gcs_credentials: request?.gcs_credentials,\n            path: request?.path,\n            aws_s3: request?.aws_s3,\n            azure_blob: request?.azure_blob,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/external_storage', undefined, undefined, body, 'application/json');\n        decoders.CreateExternalStorageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteExternalStorage(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/external_storage/{name}', pathParams, undefined);\n        decoders.DeleteExternalStorageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateExternalStorage(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const body = {\n            bucket: request?.bucket,\n            storage_type: request?.storage_type,\n            gcs_credentials: request?.gcs_credentials,\n            path: request?.path,\n            aws_s3: request?.aws_s3,\n            azure_blob: request?.azure_blob,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/external_storage/{name}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateExternalStorageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async checkExternalStorage(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/external_storage/{name}/check', pathParams, undefined);\n        decoders.CheckExternalStorageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createGuest(request) {\n        const body = {\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/guest', undefined, undefined, body, 'application/json');\n        decoders.CreateGuestResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createImportURL(request) {\n        const body = {\n            filename: request?.filename,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/import_urls', undefined, undefined, body, 'application/json');\n        decoders.CreateImportURLResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listImports() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/imports', undefined, undefined);\n        decoders.ListImportsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createImport(request) {\n        const body = {\n            mode: request?.mode,\n            path: request?.path,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/imports', undefined, undefined, body, 'application/json');\n        decoders.CreateImportResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getImport(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/imports/{id}', pathParams, undefined);\n        decoders.GetImportResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOG(request) {\n        const queryParams = {\n            url: request?.url,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/og', undefined, queryParams);\n        decoders.GetOGResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listPermissions() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/permissions', undefined, undefined);\n        decoders.ListPermissionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getPermission(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/permissions/{id}', pathParams, undefined);\n        decoders.GetCustomPermissionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createPoll(request) {\n        const body = {\n            name: request?.name,\n            allow_answers: request?.allow_answers,\n            allow_user_suggested_options: request?.allow_user_suggested_options,\n            description: request?.description,\n            enforce_unique_vote: request?.enforce_unique_vote,\n            id: request?.id,\n            is_closed: request?.is_closed,\n            max_votes_allowed: request?.max_votes_allowed,\n            user_id: request?.user_id,\n            voting_visibility: request?.voting_visibility,\n            options: request?.options,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/polls', undefined, undefined, body, 'application/json');\n        decoders.PollResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updatePoll(request) {\n        const body = {\n            id: request?.id,\n            name: request?.name,\n            allow_answers: request?.allow_answers,\n            allow_user_suggested_options: request?.allow_user_suggested_options,\n            description: request?.description,\n            enforce_unique_vote: request?.enforce_unique_vote,\n            is_closed: request?.is_closed,\n            max_votes_allowed: request?.max_votes_allowed,\n            user_id: request?.user_id,\n            voting_visibility: request?.voting_visibility,\n            options: request?.options,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/polls', undefined, undefined, body, 'application/json');\n        decoders.PollResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryPolls(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/polls/query', undefined, queryParams, body, 'application/json');\n        decoders.QueryPollsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deletePoll(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            poll_id: request?.poll_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/polls/{poll_id}', pathParams, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getPoll(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            poll_id: request?.poll_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/polls/{poll_id}', pathParams, queryParams);\n        decoders.PollResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updatePollPartial(request) {\n        const pathParams = {\n            poll_id: request?.poll_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            unset: request?.unset,\n            set: request?.set,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/polls/{poll_id}', pathParams, undefined, body, 'application/json');\n        decoders.PollResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createPollOption(request) {\n        const pathParams = {\n            poll_id: request?.poll_id,\n        };\n        const body = {\n            text: request?.text,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/polls/{poll_id}/options', pathParams, undefined, body, 'application/json');\n        decoders.PollOptionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updatePollOption(request) {\n        const pathParams = {\n            poll_id: request?.poll_id,\n        };\n        const body = {\n            id: request?.id,\n            text: request?.text,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/polls/{poll_id}/options', pathParams, undefined, body, 'application/json');\n        decoders.PollOptionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deletePollOption(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            poll_id: request?.poll_id,\n            option_id: request?.option_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/polls/{poll_id}/options/{option_id}', pathParams, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getPollOption(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            poll_id: request?.poll_id,\n            option_id: request?.option_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/polls/{poll_id}/options/{option_id}', pathParams, queryParams);\n        decoders.PollOptionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryPollVotes(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            poll_id: request?.poll_id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/polls/{poll_id}/votes', pathParams, queryParams, body, 'application/json');\n        decoders.PollVotesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listPushProviders() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/push_providers', undefined, undefined);\n        decoders.ListPushProvidersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async upsertPushProvider(request) {\n        const body = {\n            push_provider: request?.push_provider,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/push_providers', undefined, undefined, body, 'application/json');\n        decoders.UpsertPushProviderResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deletePushProvider(request) {\n        const pathParams = {\n            type: request?.type,\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/push_providers/{type}/{name}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getRateLimits(request) {\n        const queryParams = {\n            server_side: request?.server_side,\n            android: request?.android,\n            ios: request?.ios,\n            web: request?.web,\n            endpoints: request?.endpoints,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/rate_limits', undefined, queryParams);\n        decoders.GetRateLimitsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listRoles() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/roles', undefined, undefined);\n        decoders.ListRolesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createRole(request) {\n        const body = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/roles', undefined, undefined, body, 'application/json');\n        decoders.CreateRoleResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteRole(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/roles/{name}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getTask(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/tasks/{id}', pathParams, undefined);\n        decoders.GetTaskResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteFile(request) {\n        const queryParams = {\n            url: request?.url,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/uploads/file', undefined, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async uploadFile(request) {\n        const body = {\n            file: request?.file,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/uploads/file', undefined, undefined, body, 'multipart/form-data');\n        decoders.FileUploadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteImage(request) {\n        const queryParams = {\n            url: request?.url,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/uploads/image', undefined, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async uploadImage(request) {\n        const body = {\n            file: request?.file,\n            upload_sizes: request?.upload_sizes,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/uploads/image', undefined, undefined, body, 'multipart/form-data');\n        decoders.ImageUploadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryUsers(request) {\n        const queryParams = {\n            payload: request?.payload,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/users', undefined, queryParams);\n        decoders.QueryUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateUsersPartial(request) {\n        const body = {\n            users: request?.users,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/users', undefined, undefined, body, 'application/json');\n        decoders.UpdateUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateUsers(request) {\n        const body = {\n            users: request?.users,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users', undefined, undefined, body, 'application/json');\n        decoders.UpdateUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getBlockedUsers(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/users/block', undefined, queryParams);\n        decoders.GetBlockedUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async blockUsers(request) {\n        const body = {\n            blocked_user_id: request?.blocked_user_id,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/block', undefined, undefined, body, 'application/json');\n        decoders.BlockUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deactivateUsers(request) {\n        const body = {\n            user_ids: request?.user_ids,\n            created_by_id: request?.created_by_id,\n            mark_channels_deleted: request?.mark_channels_deleted,\n            mark_messages_deleted: request?.mark_messages_deleted,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/deactivate', undefined, undefined, body, 'application/json');\n        decoders.DeactivateUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteUsers(request) {\n        const body = {\n            user_ids: request?.user_ids,\n            calls: request?.calls,\n            conversations: request?.conversations,\n            files: request?.files,\n            messages: request?.messages,\n            new_call_owner_id: request?.new_call_owner_id,\n            new_channel_owner_id: request?.new_channel_owner_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/delete', undefined, undefined, body, 'application/json');\n        decoders.DeleteUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getUserLiveLocations(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/users/live_locations', undefined, queryParams);\n        decoders.SharedLocationsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateLiveLocation(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const body = {\n            message_id: request?.message_id,\n            end_at: request?.end_at,\n            latitude: request?.latitude,\n            longitude: request?.longitude,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/users/live_locations', undefined, queryParams, body, 'application/json');\n        decoders.SharedLocationResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async reactivateUsers(request) {\n        const body = {\n            user_ids: request?.user_ids,\n            created_by_id: request?.created_by_id,\n            restore_channels: request?.restore_channels,\n            restore_messages: request?.restore_messages,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/reactivate', undefined, undefined, body, 'application/json');\n        decoders.ReactivateUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async restoreUsers(request) {\n        const body = {\n            user_ids: request?.user_ids,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/restore', undefined, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unblockUsers(request) {\n        const body = {\n            blocked_user_id: request?.blocked_user_id,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/unblock', undefined, undefined, body, 'application/json');\n        decoders.UnblockUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deactivateUser(request) {\n        const pathParams = {\n            user_id: request?.user_id,\n        };\n        const body = {\n            created_by_id: request?.created_by_id,\n            mark_messages_deleted: request?.mark_messages_deleted,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/{user_id}/deactivate', pathParams, undefined, body, 'application/json');\n        decoders.DeactivateUserResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async exportUser(request) {\n        const pathParams = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/users/{user_id}/export', pathParams, undefined);\n        decoders.ExportUserResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async reactivateUser(request) {\n        const pathParams = {\n            user_id: request?.user_id,\n        };\n        const body = {\n            created_by_id: request?.created_by_id,\n            name: request?.name,\n            restore_messages: request?.restore_messages,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/users/{user_id}/reactivate', pathParams, undefined, body, 'application/json');\n        decoders.ReactivateUserResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n}\n\nclass VideoApi {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    async getActiveCallsStatus() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/active_calls_status', undefined, undefined);\n        decoders.GetActiveCallsStatusResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryUserFeedback(request) {\n        const queryParams = {\n            full: request?.full,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter_conditions: request?.filter_conditions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/feedback', undefined, queryParams, body, 'application/json');\n        decoders.QueryUserFeedbackResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryCallMembers(request) {\n        const body = {\n            id: request?.id,\n            type: request?.type,\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter_conditions: request?.filter_conditions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/members', undefined, undefined, body, 'application/json');\n        decoders.QueryCallMembersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryCallStats(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter_conditions: request?.filter_conditions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/stats', undefined, undefined, body, 'application/json');\n        decoders.QueryCallStatsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getCall(request) {\n        const queryParams = {\n            members_limit: request?.members_limit,\n            ring: request?.ring,\n            notify: request?.notify,\n            video: request?.video,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/call/{type}/{id}', pathParams, queryParams);\n        decoders.GetCallResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateCall(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            starts_at: request?.starts_at,\n            custom: request?.custom,\n            settings_override: request?.settings_override,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/video/call/{type}/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateCallResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOrCreateCall(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            members_limit: request?.members_limit,\n            notify: request?.notify,\n            ring: request?.ring,\n            video: request?.video,\n            data: request?.data,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}', pathParams, undefined, body, 'application/json');\n        decoders.GetOrCreateCallResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async blockUser(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/block', pathParams, undefined, body, 'application/json');\n        decoders.BlockUserResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteCall(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            hard: request?.hard,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/delete', pathParams, undefined, body, 'application/json');\n        decoders.DeleteCallResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async sendCallEvent(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/event', pathParams, undefined, body, 'application/json');\n        decoders.SendCallEventResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async collectUserFeedback(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            rating: request?.rating,\n            sdk: request?.sdk,\n            sdk_version: request?.sdk_version,\n            reason: request?.reason,\n            user_session_id: request?.user_session_id,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/feedback', pathParams, undefined, body, 'application/json');\n        decoders.CollectUserFeedbackResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async goLive(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            recording_storage_name: request?.recording_storage_name,\n            start_closed_caption: request?.start_closed_caption,\n            start_hls: request?.start_hls,\n            start_recording: request?.start_recording,\n            start_transcription: request?.start_transcription,\n            transcription_storage_name: request?.transcription_storage_name,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/go_live', pathParams, undefined, body, 'application/json');\n        decoders.GoLiveResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async kickUser(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            block: request?.block,\n            kicked_by_id: request?.kicked_by_id,\n            kicked_by: request?.kicked_by,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/kick', pathParams, undefined, body, 'application/json');\n        decoders.KickUserResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async endCall(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/mark_ended', pathParams, undefined);\n        decoders.EndCallResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateCallMembers(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            remove_members: request?.remove_members,\n            update_members: request?.update_members,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/members', pathParams, undefined, body, 'application/json');\n        decoders.UpdateCallMembersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async muteUsers(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            audio: request?.audio,\n            mute_all_users: request?.mute_all_users,\n            muted_by_id: request?.muted_by_id,\n            screenshare: request?.screenshare,\n            screenshare_audio: request?.screenshare_audio,\n            video: request?.video,\n            user_ids: request?.user_ids,\n            muted_by: request?.muted_by,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/mute_users', pathParams, undefined, body, 'application/json');\n        decoders.MuteUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryCallParticipants(request) {\n        const queryParams = {\n            limit: request?.limit,\n        };\n        const pathParams = {\n            id: request?.id,\n            type: request?.type,\n        };\n        const body = {\n            filter_conditions: request?.filter_conditions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/participants', pathParams, queryParams, body, 'application/json');\n        decoders.QueryCallParticipantsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async videoPin(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            session_id: request?.session_id,\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/pin', pathParams, undefined, body, 'application/json');\n        decoders.PinResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listRecordings(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/call/{type}/{id}/recordings', pathParams, undefined);\n        decoders.ListRecordingsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getCallReport(request) {\n        const queryParams = {\n            session_id: request?.session_id,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/call/{type}/{id}/report', pathParams, queryParams);\n        decoders.GetCallReportResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startRTMPBroadcasts(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            broadcasts: request?.broadcasts,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts', pathParams, undefined, body, 'application/json');\n        decoders.StartRTMPBroadcastsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopAllRTMPBroadcasts(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts/stop', pathParams, undefined);\n        decoders.StopAllRTMPBroadcastsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopRTMPBroadcast(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n            name: request?.name,\n        };\n        const body = {};\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/rtmp_broadcasts/{name}/stop', pathParams, undefined, body, 'application/json');\n        decoders.StopRTMPBroadcastsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startHLSBroadcasting(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_broadcasting', pathParams, undefined);\n        decoders.StartHLSBroadcastingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startClosedCaptions(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            enable_transcription: request?.enable_transcription,\n            external_storage: request?.external_storage,\n            language: request?.language,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_closed_captions', pathParams, undefined, body, 'application/json');\n        decoders.StartClosedCaptionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startFrameRecording(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            recording_external_storage: request?.recording_external_storage,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_frame_recording', pathParams, undefined, body, 'application/json');\n        decoders.StartFrameRecordingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startRecording(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            recording_external_storage: request?.recording_external_storage,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_recording', pathParams, undefined, body, 'application/json');\n        decoders.StartRecordingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startTranscription(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            enable_closed_captions: request?.enable_closed_captions,\n            language: request?.language,\n            transcription_external_storage: request?.transcription_external_storage,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/start_transcription', pathParams, undefined, body, 'application/json');\n        decoders.StartTranscriptionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopHLSBroadcasting(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_broadcasting', pathParams, undefined);\n        decoders.StopHLSBroadcastingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopClosedCaptions(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            stop_transcription: request?.stop_transcription,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_closed_captions', pathParams, undefined, body, 'application/json');\n        decoders.StopClosedCaptionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopFrameRecording(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_frame_recording', pathParams, undefined);\n        decoders.StopFrameRecordingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopLive(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            continue_closed_caption: request?.continue_closed_caption,\n            continue_hls: request?.continue_hls,\n            continue_recording: request?.continue_recording,\n            continue_rtmp_broadcasts: request?.continue_rtmp_broadcasts,\n            continue_transcription: request?.continue_transcription,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_live', pathParams, undefined, body, 'application/json');\n        decoders.StopLiveResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopRecording(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_recording', pathParams, undefined);\n        decoders.StopRecordingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async stopTranscription(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            stop_closed_captions: request?.stop_closed_captions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/stop_transcription', pathParams, undefined, body, 'application/json');\n        decoders.StopTranscriptionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listTranscriptions(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/call/{type}/{id}/transcriptions', pathParams, undefined);\n        decoders.ListTranscriptionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unblockUser(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/unblock', pathParams, undefined, body, 'application/json');\n        decoders.UnblockUserResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async videoUnpin(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            session_id: request?.session_id,\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/unpin', pathParams, undefined, body, 'application/json');\n        decoders.UnpinResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateUserPermissions(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            grant_permissions: request?.grant_permissions,\n            revoke_permissions: request?.revoke_permissions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/call/{type}/{id}/user_permissions', pathParams, undefined, body, 'application/json');\n        decoders.UpdateUserPermissionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteRecording(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n            session: request?.session,\n            filename: request?.filename,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/video/call/{type}/{id}/{session}/recordings/{filename}', pathParams, undefined);\n        decoders.DeleteRecordingResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteTranscription(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n            session: request?.session,\n            filename: request?.filename,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/video/call/{type}/{id}/{session}/transcriptions/{filename}', pathParams, undefined);\n        decoders.DeleteTranscriptionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryCalls(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter_conditions: request?.filter_conditions,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/calls', undefined, undefined, body, 'application/json');\n        decoders.QueryCallsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listCallTypes() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/calltypes', undefined, undefined);\n        decoders.ListCallTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createCallType(request) {\n        const body = {\n            name: request?.name,\n            external_storage: request?.external_storage,\n            grants: request?.grants,\n            notification_settings: request?.notification_settings,\n            settings: request?.settings,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/calltypes', undefined, undefined, body, 'application/json');\n        decoders.CreateCallTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteCallType(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/video/calltypes/{name}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getCallType(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/calltypes/{name}', pathParams, undefined);\n        decoders.GetCallTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateCallType(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const body = {\n            external_storage: request?.external_storage,\n            grants: request?.grants,\n            notification_settings: request?.notification_settings,\n            settings: request?.settings,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/video/calltypes/{name}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateCallTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getEdges() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/video/edges', undefined, undefined);\n        decoders.GetEdgesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryAggregateCallStats(request) {\n        const body = {\n            from: request?.from,\n            to: request?.to,\n            report_types: request?.report_types,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/video/stats', undefined, undefined, body, 'application/json');\n        decoders.QueryAggregateCallStatsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n}\n\nclass CallApi {\n    constructor(videoApi, type, id) {\n        this.videoApi = videoApi;\n        this.type = type;\n        this.id = id;\n    }\n    get(request) {\n        return this.videoApi.getCall({ id: this.id, type: this.type, ...request });\n    }\n    update(request) {\n        return this.videoApi.updateCall({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    getOrCreate(request) {\n        return this.videoApi.getOrCreateCall({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    blockUser(request) {\n        return this.videoApi.blockUser({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    delete(request) {\n        return this.videoApi.deleteCall({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    sendCallEvent(request) {\n        return this.videoApi.sendCallEvent({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    collectUserFeedback(request) {\n        return this.videoApi.collectUserFeedback({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    goLive(request) {\n        return this.videoApi.goLive({ id: this.id, type: this.type, ...request });\n    }\n    kickUser(request) {\n        return this.videoApi.kickUser({ id: this.id, type: this.type, ...request });\n    }\n    end() {\n        return this.videoApi.endCall({ id: this.id, type: this.type });\n    }\n    updateCallMembers(request) {\n        return this.videoApi.updateCallMembers({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    muteUsers(request) {\n        return this.videoApi.muteUsers({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    queryCallParticipants(request) {\n        return this.videoApi.queryCallParticipants({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    videoPin(request) {\n        return this.videoApi.videoPin({ id: this.id, type: this.type, ...request });\n    }\n    listRecordings() {\n        return this.videoApi.listRecordings({ id: this.id, type: this.type });\n    }\n    getCallReport(request) {\n        return this.videoApi.getCallReport({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    startRTMPBroadcasts(request) {\n        return this.videoApi.startRTMPBroadcasts({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    stopAllRTMPBroadcasts() {\n        return this.videoApi.stopAllRTMPBroadcasts({\n            id: this.id,\n            type: this.type,\n        });\n    }\n    stopRTMPBroadcast(request) {\n        return this.videoApi.stopRTMPBroadcast({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    startHLSBroadcasting() {\n        return this.videoApi.startHLSBroadcasting({ id: this.id, type: this.type });\n    }\n    startClosedCaptions(request) {\n        return this.videoApi.startClosedCaptions({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    startFrameRecording(request) {\n        return this.videoApi.startFrameRecording({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    startRecording(request) {\n        return this.videoApi.startRecording({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    startTranscription(request) {\n        return this.videoApi.startTranscription({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    stopHLSBroadcasting() {\n        return this.videoApi.stopHLSBroadcasting({ id: this.id, type: this.type });\n    }\n    stopClosedCaptions(request) {\n        return this.videoApi.stopClosedCaptions({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    stopFrameRecording() {\n        return this.videoApi.stopFrameRecording({ id: this.id, type: this.type });\n    }\n    stopLive(request) {\n        return this.videoApi.stopLive({ id: this.id, type: this.type, ...request });\n    }\n    stopRecording() {\n        return this.videoApi.stopRecording({ id: this.id, type: this.type });\n    }\n    stopTranscription(request) {\n        return this.videoApi.stopTranscription({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    listTranscriptions() {\n        return this.videoApi.listTranscriptions({ id: this.id, type: this.type });\n    }\n    unblockUser(request) {\n        return this.videoApi.unblockUser({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    videoUnpin(request) {\n        return this.videoApi.videoUnpin({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    updateUserPermissions(request) {\n        return this.videoApi.updateUserPermissions({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    deleteRecording(request) {\n        return this.videoApi.deleteRecording({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    deleteTranscription(request) {\n        return this.videoApi.deleteTranscription({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n}\n\nclass StreamCall extends CallApi {\n    constructor() {\n        super(...arguments);\n        this.create = (request) => this.getOrCreate(request);\n        this.queryMembers = (request) => {\n            return this.videoApi.queryCallMembers({\n                id: this.id,\n                type: this.type,\n                ...(request ?? {}),\n            });\n        };\n    }\n    get cid() {\n        return `${this.type}:${this.id}`;\n    }\n}\n\nclass StreamVideoClient extends VideoApi {\n    constructor({ streamClient, apiClient, }) {\n        super(apiClient);\n        this.call = (type, id) => {\n            return new StreamCall(this, type, id);\n        };\n        this.connectOpenAi = async (options) => {\n            let doCreateRealtimeClient;\n            try {\n                doCreateRealtimeClient = (await __webpack_require__.e(/*! import() */ \"_9055\").then(__webpack_require__.t.bind(__webpack_require__, /*! @stream-io/openai-realtime-api */ \"?9055\", 19)))\n                    .createRealtimeClient;\n            }\n            catch {\n                throw new Error('Cannot create Realtime API client. Is @stream-io/openai-realtime-api installed?');\n            }\n            if (!options.agentUserId) {\n                throw new Error('\"agentUserId\" must by specified in options');\n            }\n            const token = this.streamClient.generateCallToken({\n                user_id: options.agentUserId,\n                call_cids: [options.call.cid],\n                validity_in_seconds: options.validityInSeconds,\n            });\n            const realtimeClient = doCreateRealtimeClient({\n                baseUrl: this.streamClient.apiClient.apiConfig.baseUrl,\n                call: options.call,\n                streamApiKey: this.streamClient.apiClient.apiConfig.apiKey,\n                streamUserToken: token,\n                openAiApiKey: options.openAiApiKey,\n                model: options.model,\n            });\n            await realtimeClient.connect();\n            return realtimeClient;\n        };\n        this.streamClient = streamClient;\n    }\n}\n\nclass ChatApi {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    async queryCampaigns(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_limit: request?.user_limit,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/campaigns/query', undefined, undefined, body, 'application/json');\n        decoders.QueryCampaignsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getCampaign(request) {\n        const queryParams = {\n            prev: request?.prev,\n            next: request?.next,\n            limit: request?.limit,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/campaigns/{id}', pathParams, queryParams);\n        decoders.GetCampaignResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async startCampaign(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            scheduled_for: request?.scheduled_for,\n            stop_at: request?.stop_at,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/campaigns/{id}/start', pathParams, undefined, body, 'application/json');\n        decoders.StartCampaignResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async scheduleCampaign(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {};\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/campaigns/{id}/stop', pathParams, undefined, body, 'application/json');\n        decoders.CampaignResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryChannels(request) {\n        const body = {\n            limit: request?.limit,\n            member_limit: request?.member_limit,\n            message_limit: request?.message_limit,\n            offset: request?.offset,\n            state: request?.state,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter_conditions: request?.filter_conditions,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels', undefined, undefined, body, 'application/json');\n        decoders.QueryChannelsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteChannels(request) {\n        const body = {\n            cids: request?.cids,\n            hard_delete: request?.hard_delete,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/delete', undefined, undefined, body, 'application/json');\n        decoders.DeleteChannelsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async markChannelsRead(request) {\n        const body = {\n            user_id: request?.user_id,\n            read_by_channel: request?.read_by_channel,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/read', undefined, undefined, body, 'application/json');\n        decoders.MarkReadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOrCreateDistinctChannel(request) {\n        const pathParams = {\n            type: request?.type,\n        };\n        const body = {\n            hide_for_creator: request?.hide_for_creator,\n            state: request?.state,\n            thread_unread_counts: request?.thread_unread_counts,\n            data: request?.data,\n            members: request?.members,\n            messages: request?.messages,\n            watchers: request?.watchers,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/query', pathParams, undefined, body, 'application/json');\n        decoders.ChannelStateResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteChannel(request) {\n        const queryParams = {\n            hard_delete: request?.hard_delete,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}', pathParams, queryParams);\n        decoders.DeleteChannelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateChannelPartial(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            unset: request?.unset,\n            set: request?.set,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/chat/channels/{type}/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateChannelPartialResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateChannel(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            accept_invite: request?.accept_invite,\n            cooldown: request?.cooldown,\n            hide_history: request?.hide_history,\n            reject_invite: request?.reject_invite,\n            skip_push: request?.skip_push,\n            user_id: request?.user_id,\n            add_members: request?.add_members,\n            add_moderators: request?.add_moderators,\n            assign_roles: request?.assign_roles,\n            demote_moderators: request?.demote_moderators,\n            invites: request?.invites,\n            remove_members: request?.remove_members,\n            data: request?.data,\n            message: request?.message,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateChannelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteDraft(request) {\n        const queryParams = {\n            parent_id: request?.parent_id,\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/draft', pathParams, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getDraft(request) {\n        const queryParams = {\n            parent_id: request?.parent_id,\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/channels/{type}/{id}/draft', pathParams, queryParams);\n        decoders.GetDraftResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async sendEvent(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            event: request?.event,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/event', pathParams, undefined, body, 'application/json');\n        decoders.EventResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteFile(request) {\n        const queryParams = {\n            url: request?.url,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/file', pathParams, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async uploadFile(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            file: request?.file,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/file', pathParams, undefined, body, 'multipart/form-data');\n        decoders.FileUploadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async hideChannel(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            clear_history: request?.clear_history,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/hide', pathParams, undefined, body, 'application/json');\n        decoders.HideChannelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteImage(request) {\n        const queryParams = {\n            url: request?.url,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/channels/{type}/{id}/image', pathParams, queryParams);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async uploadImage(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            file: request?.file,\n            upload_sizes: request?.upload_sizes,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/image', pathParams, undefined, body, 'multipart/form-data');\n        decoders.ImageUploadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateMemberPartial(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            unset: request?.unset,\n            set: request?.set,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/chat/channels/{type}/{id}/member', pathParams, queryParams, body, 'application/json');\n        decoders.UpdateMemberPartialResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async sendMessage(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            message: request?.message,\n            force_moderation: request?.force_moderation,\n            keep_channel_hidden: request?.keep_channel_hidden,\n            pending: request?.pending,\n            skip_enrich_url: request?.skip_enrich_url,\n            skip_push: request?.skip_push,\n            pending_message_metadata: request?.pending_message_metadata,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/message', pathParams, undefined, body, 'application/json');\n        decoders.SendMessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getManyMessages(request) {\n        const queryParams = {\n            ids: request?.ids,\n        };\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/channels/{type}/{id}/messages', pathParams, queryParams);\n        decoders.GetManyMessagesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOrCreateChannel(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            hide_for_creator: request?.hide_for_creator,\n            state: request?.state,\n            thread_unread_counts: request?.thread_unread_counts,\n            data: request?.data,\n            members: request?.members,\n            messages: request?.messages,\n            watchers: request?.watchers,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/query', pathParams, undefined, body, 'application/json');\n        decoders.ChannelStateResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async markRead(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            message_id: request?.message_id,\n            thread_id: request?.thread_id,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/read', pathParams, undefined, body, 'application/json');\n        decoders.MarkReadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async showChannel(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/show', pathParams, undefined, body, 'application/json');\n        decoders.ShowChannelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async truncateChannel(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            hard_delete: request?.hard_delete,\n            skip_push: request?.skip_push,\n            truncated_at: request?.truncated_at,\n            user_id: request?.user_id,\n            member_ids: request?.member_ids,\n            message: request?.message,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/truncate', pathParams, undefined, body, 'application/json');\n        decoders.TruncateChannelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async markUnread(request) {\n        const pathParams = {\n            type: request?.type,\n            id: request?.id,\n        };\n        const body = {\n            message_id: request?.message_id,\n            thread_id: request?.thread_id,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channels/{type}/{id}/unread', pathParams, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listChannelTypes() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/channeltypes', undefined, undefined);\n        decoders.ListChannelTypesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createChannelType(request) {\n        const body = {\n            automod: request?.automod,\n            automod_behavior: request?.automod_behavior,\n            max_message_length: request?.max_message_length,\n            name: request?.name,\n            blocklist: request?.blocklist,\n            blocklist_behavior: request?.blocklist_behavior,\n            connect_events: request?.connect_events,\n            custom_events: request?.custom_events,\n            mark_messages_pending: request?.mark_messages_pending,\n            message_retention: request?.message_retention,\n            mutes: request?.mutes,\n            partition_size: request?.partition_size,\n            partition_ttl: request?.partition_ttl,\n            polls: request?.polls,\n            push_notifications: request?.push_notifications,\n            reactions: request?.reactions,\n            read_events: request?.read_events,\n            replies: request?.replies,\n            search: request?.search,\n            shared_locations: request?.shared_locations,\n            skip_last_msg_update_for_system_msgs: request?.skip_last_msg_update_for_system_msgs,\n            typing_events: request?.typing_events,\n            uploads: request?.uploads,\n            url_enrichment: request?.url_enrichment,\n            user_message_reminders: request?.user_message_reminders,\n            blocklists: request?.blocklists,\n            commands: request?.commands,\n            permissions: request?.permissions,\n            grants: request?.grants,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/channeltypes', undefined, undefined, body, 'application/json');\n        decoders.CreateChannelTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteChannelType(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/channeltypes/{name}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getChannelType(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/channeltypes/{name}', pathParams, undefined);\n        decoders.GetChannelTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateChannelType(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const body = {\n            automod: request?.automod,\n            automod_behavior: request?.automod_behavior,\n            max_message_length: request?.max_message_length,\n            blocklist: request?.blocklist,\n            blocklist_behavior: request?.blocklist_behavior,\n            connect_events: request?.connect_events,\n            count_messages: request?.count_messages,\n            custom_events: request?.custom_events,\n            mark_messages_pending: request?.mark_messages_pending,\n            mutes: request?.mutes,\n            partition_size: request?.partition_size,\n            partition_ttl: request?.partition_ttl,\n            polls: request?.polls,\n            push_notifications: request?.push_notifications,\n            quotes: request?.quotes,\n            reactions: request?.reactions,\n            read_events: request?.read_events,\n            reminders: request?.reminders,\n            replies: request?.replies,\n            search: request?.search,\n            shared_locations: request?.shared_locations,\n            skip_last_msg_update_for_system_msgs: request?.skip_last_msg_update_for_system_msgs,\n            typing_events: request?.typing_events,\n            uploads: request?.uploads,\n            url_enrichment: request?.url_enrichment,\n            user_message_reminders: request?.user_message_reminders,\n            allowed_flag_reasons: request?.allowed_flag_reasons,\n            blocklists: request?.blocklists,\n            commands: request?.commands,\n            permissions: request?.permissions,\n            automod_thresholds: request?.automod_thresholds,\n            grants: request?.grants,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/chat/channeltypes/{name}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateChannelTypeResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listCommands() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/commands', undefined, undefined);\n        decoders.ListCommandsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createCommand(request) {\n        const body = {\n            description: request?.description,\n            name: request?.name,\n            args: request?.args,\n            set: request?.set,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/commands', undefined, undefined, body, 'application/json');\n        decoders.CreateCommandResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteCommand(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/commands/{name}', pathParams, undefined);\n        decoders.DeleteCommandResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getCommand(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/commands/{name}', pathParams, undefined);\n        decoders.GetCommandResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateCommand(request) {\n        const pathParams = {\n            name: request?.name,\n        };\n        const body = {\n            description: request?.description,\n            args: request?.args,\n            set: request?.set,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/chat/commands/{name}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateCommandResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryDrafts(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/drafts/query', undefined, undefined, body, 'application/json');\n        decoders.QueryDraftsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async exportChannels(request) {\n        const body = {\n            channels: request?.channels,\n            clear_deleted_message_text: request?.clear_deleted_message_text,\n            export_users: request?.export_users,\n            include_soft_deleted_channels: request?.include_soft_deleted_channels,\n            include_truncated_messages: request?.include_truncated_messages,\n            version: request?.version,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/export_channels', undefined, undefined, body, 'application/json');\n        decoders.ExportChannelsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryMembers(request) {\n        const queryParams = {\n            payload: request?.payload,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/members', undefined, queryParams);\n        decoders.MembersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryMessageHistory(request) {\n        const body = {\n            filter: request?.filter,\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/history', undefined, undefined, body, 'application/json');\n        decoders.QueryMessageHistoryResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteMessage(request) {\n        const queryParams = {\n            hard: request?.hard,\n            deleted_by: request?.deleted_by,\n            delete_for_me: request?.delete_for_me,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/messages/{id}', pathParams, queryParams);\n        decoders.DeleteMessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getMessage(request) {\n        const queryParams = {\n            show_deleted_message: request?.show_deleted_message,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/messages/{id}', pathParams, queryParams);\n        decoders.GetMessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateMessage(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            message: request?.message,\n            skip_enrich_url: request?.skip_enrich_url,\n            skip_push: request?.skip_push,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateMessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateMessagePartial(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            skip_enrich_url: request?.skip_enrich_url,\n            user_id: request?.user_id,\n            unset: request?.unset,\n            set: request?.set,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/chat/messages/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateMessagePartialResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async runMessageAction(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            form_data: request?.form_data,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}/action', pathParams, undefined, body, 'application/json');\n        decoders.MessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async commitMessage(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {};\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}/commit', pathParams, undefined, body, 'application/json');\n        decoders.MessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async sendReaction(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            reaction: request?.reaction,\n            enforce_unique: request?.enforce_unique,\n            skip_push: request?.skip_push,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}/reaction', pathParams, undefined, body, 'application/json');\n        decoders.SendReactionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteReaction(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            id: request?.id,\n            type: request?.type,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/messages/{id}/reaction/{type}', pathParams, queryParams);\n        decoders.DeleteReactionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getReactions(request) {\n        const queryParams = {\n            limit: request?.limit,\n            offset: request?.offset,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/messages/{id}/reactions', pathParams, queryParams);\n        decoders.GetReactionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryReactions(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}/reactions', pathParams, undefined, body, 'application/json');\n        decoders.QueryReactionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async translateMessage(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            language: request?.language,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}/translate', pathParams, undefined, body, 'application/json');\n        decoders.MessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async undeleteMessage(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            message: request?.message,\n            skip_enrich_url: request?.skip_enrich_url,\n            skip_push: request?.skip_push,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{id}/undelete', pathParams, undefined, body, 'application/json');\n        decoders.UpdateMessageResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async castPollVote(request) {\n        const pathParams = {\n            message_id: request?.message_id,\n            poll_id: request?.poll_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            user: request?.user,\n            vote: request?.vote,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{message_id}/polls/{poll_id}/vote', pathParams, undefined, body, 'application/json');\n        decoders.PollVoteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deletePollVote(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            message_id: request?.message_id,\n            poll_id: request?.poll_id,\n            vote_id: request?.vote_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/messages/{message_id}/polls/{poll_id}/vote/{vote_id}', pathParams, queryParams);\n        decoders.PollVoteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteReminder(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            message_id: request?.message_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/messages/{message_id}/reminders', pathParams, queryParams);\n        decoders.DeleteReminderResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateReminder(request) {\n        const pathParams = {\n            message_id: request?.message_id,\n        };\n        const body = {\n            remind_at: request?.remind_at,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/chat/messages/{message_id}/reminders', pathParams, undefined, body, 'application/json');\n        decoders.UpdateReminderResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createReminder(request) {\n        const pathParams = {\n            message_id: request?.message_id,\n        };\n        const body = {\n            remind_at: request?.remind_at,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/messages/{message_id}/reminders', pathParams, undefined, body, 'application/json');\n        decoders.ReminderResponseData?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getReplies(request) {\n        const queryParams = {\n            limit: request?.limit,\n            offset: request?.offset,\n            id_gte: request?.id_gte,\n            id_gt: request?.id_gt,\n            id_lte: request?.id_lte,\n            id_lt: request?.id_lt,\n            created_at_after_or_equal: request?.created_at_after_or_equal,\n            created_at_after: request?.created_at_after,\n            created_at_before_or_equal: request?.created_at_before_or_equal,\n            created_at_before: request?.created_at_before,\n            id_around: request?.id_around,\n            created_at_around: request?.created_at_around,\n            sort: request?.sort,\n        };\n        const pathParams = {\n            parent_id: request?.parent_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/messages/{parent_id}/replies', pathParams, queryParams);\n        decoders.GetRepliesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryMessageFlags(request) {\n        const queryParams = {\n            payload: request?.payload,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/moderation/flags/message', undefined, queryParams);\n        decoders.QueryMessageFlagsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async muteChannel(request) {\n        const body = {\n            expiration: request?.expiration,\n            user_id: request?.user_id,\n            channel_cids: request?.channel_cids,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/moderation/mute/channel', undefined, undefined, body, 'application/json');\n        decoders.MuteChannelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unmuteChannel(request) {\n        const body = {\n            expiration: request?.expiration,\n            user_id: request?.user_id,\n            channel_cids: request?.channel_cids,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/moderation/unmute/channel', undefined, undefined, body, 'application/json');\n        decoders.UnmuteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updatePushNotificationPreferences(request) {\n        const body = {\n            preferences: request?.preferences,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/push_preferences', undefined, undefined, body, 'application/json');\n        decoders.UpsertPushPreferencesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getPushTemplates(request) {\n        const queryParams = {\n            push_provider_type: request?.push_provider_type,\n            push_provider_name: request?.push_provider_name,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/push_templates', undefined, queryParams);\n        decoders.GetPushTemplatesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async upsertPushTemplate(request) {\n        const body = {\n            event_type: request?.event_type,\n            push_provider_type: request?.push_provider_type,\n            enable_push: request?.enable_push,\n            push_provider_name: request?.push_provider_name,\n            template: request?.template,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/push_templates', undefined, undefined, body, 'application/json');\n        decoders.UpsertPushTemplateResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryBannedUsers(request) {\n        const queryParams = {\n            payload: request?.payload,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/query_banned_users', undefined, queryParams);\n        decoders.QueryBannedUsersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryReminders(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/reminders/query', undefined, undefined, body, 'application/json');\n        decoders.QueryRemindersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async search(request) {\n        const queryParams = {\n            payload: request?.payload,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/search', undefined, queryParams);\n        decoders.SearchResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async querySegments(request) {\n        const body = {\n            filter: request?.filter,\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/segments/query', undefined, undefined, body, 'application/json');\n        decoders.QuerySegmentsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteSegment(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/chat/segments/{id}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getSegment(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/segments/{id}', pathParams, undefined);\n        decoders.GetSegmentResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteSegmentTargets(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            target_ids: request?.target_ids,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/segments/{id}/deletetargets', pathParams, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async segmentTargetExists(request) {\n        const pathParams = {\n            id: request?.id,\n            target_id: request?.target_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/segments/{id}/target/{target_id}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async querySegmentTargets(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/segments/{id}/targets/query', pathParams, undefined, body, 'application/json');\n        decoders.QuerySegmentTargetsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryThreads(request) {\n        const body = {\n            limit: request?.limit,\n            member_limit: request?.member_limit,\n            next: request?.next,\n            participant_limit: request?.participant_limit,\n            prev: request?.prev,\n            reply_limit: request?.reply_limit,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/threads', undefined, undefined, body, 'application/json');\n        decoders.QueryThreadsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getThread(request) {\n        const queryParams = {\n            reply_limit: request?.reply_limit,\n            participant_limit: request?.participant_limit,\n            member_limit: request?.member_limit,\n        };\n        const pathParams = {\n            message_id: request?.message_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/threads/{message_id}', pathParams, queryParams);\n        decoders.GetThreadResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateThreadPartial(request) {\n        const pathParams = {\n            message_id: request?.message_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            unset: request?.unset,\n            set: request?.set,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/chat/threads/{message_id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateThreadPartialResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unreadCounts() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/chat/unread', undefined, undefined);\n        decoders.WrappedUnreadCountsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unreadCountsBatch(request) {\n        const body = {\n            user_ids: request?.user_ids,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/unread_batch', undefined, undefined, body, 'application/json');\n        decoders.UnreadCountsBatchResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async sendUserCustomEvent(request) {\n        const pathParams = {\n            user_id: request?.user_id,\n        };\n        const body = {\n            event: request?.event,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/chat/users/{user_id}/event', pathParams, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n}\n\nclass ChannelApi {\n    constructor(chatApi, type, id) {\n        this.chatApi = chatApi;\n        this.type = type;\n        this.id = id;\n    }\n    delete(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.deleteChannel({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    updateChannelPartial(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.updateChannelPartial({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    update(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.updateChannel({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    deleteDraft(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.deleteDraft({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    getDraft(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.getDraft({ id: this.id, type: this.type, ...request });\n    }\n    sendEvent(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.sendEvent({ id: this.id, type: this.type, ...request });\n    }\n    deleteFile(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.deleteFile({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    uploadFile(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.uploadFile({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    hide(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.hideChannel({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    deleteImage(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.deleteImage({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    uploadImage(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.uploadImage({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    updateMemberPartial(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.updateMemberPartial({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    sendMessage(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.sendMessage({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    getManyMessages(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.getManyMessages({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    getOrCreate(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.getOrCreateChannel({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    markRead(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.markRead({ id: this.id, type: this.type, ...request });\n    }\n    show(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.showChannel({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    truncate(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.truncateChannel({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n    markUnread(request) {\n        if (!this.id) {\n            throw new Error(`Channel isn't yet created, call getOrCreateDistinctChannel() before this operation`);\n        }\n        return this.chatApi.markUnread({\n            id: this.id,\n            type: this.type,\n            ...request,\n        });\n    }\n}\n\nclass StreamChannel extends ChannelApi {\n    constructor() {\n        super(...arguments);\n        this.getOrCreate = (channel_get_or_create_request) => {\n            if (!this.id) {\n                return this.chatApi\n                    .getOrCreateDistinctChannel({\n                    type: this.type,\n                    ...channel_get_or_create_request,\n                })\n                    .then((response) => {\n                    this.id = response.channel?.id;\n                    return response;\n                });\n            }\n            else {\n                return this.chatApi.getOrCreateChannel({\n                    id: this.id,\n                    type: this.type,\n                    ...channel_get_or_create_request,\n                });\n            }\n        };\n    }\n    get cid() {\n        return `${this.type}:${this.id}`;\n    }\n    queryMembers(request) {\n        return this.chatApi.queryMembers({\n            payload: {\n                id: this.id,\n                type: this.type,\n                ...(request?.payload ?? { filter_conditions: {} }),\n            },\n        });\n    }\n}\n\nclass StreamChatClient extends ChatApi {\n    constructor() {\n        super(...arguments);\n        this.channel = (type, id) => {\n            return new StreamChannel(this, type, id);\n        };\n    }\n}\n\nclass ModerationApi {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    async ban(request) {\n        const body = {\n            target_user_id: request?.target_user_id,\n            banned_by_id: request?.banned_by_id,\n            channel_cid: request?.channel_cid,\n            delete_messages: request?.delete_messages,\n            ip_ban: request?.ip_ban,\n            reason: request?.reason,\n            shadow: request?.shadow,\n            timeout: request?.timeout,\n            banned_by: request?.banned_by,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/ban', undefined, undefined, body, 'application/json');\n        decoders.BanResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async bulkImageModeration(request) {\n        const body = {\n            csv_file: request?.csv_file,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/bulk_image_moderation', undefined, undefined, body, 'application/json');\n        decoders.BulkImageModerationResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async check(request) {\n        const body = {\n            config_key: request?.config_key,\n            entity_creator_id: request?.entity_creator_id,\n            entity_id: request?.entity_id,\n            entity_type: request?.entity_type,\n            config_team: request?.config_team,\n            test_mode: request?.test_mode,\n            user_id: request?.user_id,\n            moderation_payload: request?.moderation_payload,\n            options: request?.options,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/check', undefined, undefined, body, 'application/json');\n        decoders.CheckResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async upsertConfig(request) {\n        const body = {\n            key: request?.key,\n            async: request?.async,\n            team: request?.team,\n            user_id: request?.user_id,\n            ai_image_config: request?.ai_image_config,\n            ai_text_config: request?.ai_text_config,\n            ai_video_config: request?.ai_video_config,\n            automod_platform_circumvention_config: request?.automod_platform_circumvention_config,\n            automod_semantic_filters_config: request?.automod_semantic_filters_config,\n            automod_toxicity_config: request?.automod_toxicity_config,\n            aws_rekognition_config: request?.aws_rekognition_config,\n            block_list_config: request?.block_list_config,\n            bodyguard_config: request?.bodyguard_config,\n            google_vision_config: request?.google_vision_config,\n            llm_config: request?.llm_config,\n            rule_builder_config: request?.rule_builder_config,\n            user: request?.user,\n            velocity_filter_config: request?.velocity_filter_config,\n            video_call_rule_config: request?.video_call_rule_config,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/config', undefined, undefined, body, 'application/json');\n        decoders.UpsertConfigResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteConfig(request) {\n        const queryParams = {\n            team: request?.team,\n        };\n        const pathParams = {\n            key: request?.key,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/moderation/config/{key}', pathParams, queryParams);\n        decoders.DeleteModerationConfigResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getConfig(request) {\n        const queryParams = {\n            team: request?.team,\n        };\n        const pathParams = {\n            key: request?.key,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/moderation/config/{key}', pathParams, queryParams);\n        decoders.GetConfigResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryModerationConfigs(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/configs', undefined, undefined, body, 'application/json');\n        decoders.QueryModerationConfigsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async customCheck(request) {\n        const body = {\n            entity_id: request?.entity_id,\n            entity_type: request?.entity_type,\n            flags: request?.flags,\n            entity_creator_id: request?.entity_creator_id,\n            user_id: request?.user_id,\n            moderation_payload: request?.moderation_payload,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/custom_check', undefined, undefined, body, 'application/json');\n        decoders.CustomCheckResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async v2DeleteTemplate() {\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/moderation/feeds_moderation_template', undefined, undefined);\n        decoders.DeleteModerationTemplateResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async v2QueryTemplates() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/moderation/feeds_moderation_template', undefined, undefined);\n        decoders.QueryFeedModerationTemplatesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async v2UpsertTemplate(request) {\n        const body = {\n            name: request?.name,\n            config: request?.config,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/feeds_moderation_template', undefined, undefined, body, 'application/json');\n        decoders.UpsertModerationTemplateResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async flag(request) {\n        const body = {\n            entity_id: request?.entity_id,\n            entity_type: request?.entity_type,\n            entity_creator_id: request?.entity_creator_id,\n            reason: request?.reason,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            moderation_payload: request?.moderation_payload,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/flag', undefined, undefined, body, 'application/json');\n        decoders.FlagResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryModerationFlags(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/flags', undefined, undefined, body, 'application/json');\n        decoders.QueryModerationFlagsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryModerationLogs(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/logs', undefined, undefined, body, 'application/json');\n        decoders.QueryModerationLogsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async mute(request) {\n        const body = {\n            target_ids: request?.target_ids,\n            timeout: request?.timeout,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/mute', undefined, undefined, body, 'application/json');\n        decoders.MuteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryReviewQueue(request) {\n        const body = {\n            limit: request?.limit,\n            lock_count: request?.lock_count,\n            lock_duration: request?.lock_duration,\n            lock_items: request?.lock_items,\n            next: request?.next,\n            prev: request?.prev,\n            stats_only: request?.stats_only,\n            user_id: request?.user_id,\n            sort: request?.sort,\n            filter: request?.filter,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/review_queue', undefined, undefined, body, 'application/json');\n        decoders.QueryReviewQueueResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getReviewQueueItem(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/moderation/review_queue/{id}', pathParams, undefined);\n        decoders.GetReviewQueueItemResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async submitAction(request) {\n        const body = {\n            action_type: request?.action_type,\n            item_id: request?.item_id,\n            user_id: request?.user_id,\n            ban: request?.ban,\n            custom: request?.custom,\n            delete_activity: request?.delete_activity,\n            delete_message: request?.delete_message,\n            delete_reaction: request?.delete_reaction,\n            delete_user: request?.delete_user,\n            mark_reviewed: request?.mark_reviewed,\n            unban: request?.unban,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/submit_action', undefined, undefined, body, 'application/json');\n        decoders.SubmitActionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unban(request) {\n        const queryParams = {\n            target_user_id: request?.target_user_id,\n            channel_cid: request?.channel_cid,\n            created_by: request?.created_by,\n        };\n        const body = {\n            unbanned_by_id: request?.unbanned_by_id,\n            unbanned_by: request?.unbanned_by,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/unban', undefined, queryParams, body, 'application/json');\n        decoders.UnbanResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unmute(request) {\n        const body = {\n            target_ids: request?.target_ids,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/moderation/unmute', undefined, undefined, body, 'application/json');\n        decoders.UnmuteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n}\n\nclass StreamModerationClient extends ModerationApi {\n}\n\nclass StreamError extends Error {\n    constructor(message, metadata, code, errorOptions) {\n        super(message, errorOptions);\n        this.metadata = metadata;\n        this.code = code;\n    }\n}\n\nconst getRateLimitFromResponseHeader = (responseHeaders) => {\n    const rateLimit = responseHeaders.has('x-ratelimit-limit')\n        ? +responseHeaders.get('x-ratelimit-limit')\n        : undefined;\n    const rateLimitRemaining = responseHeaders.has('x-ratelimit-remaining')\n        ? +responseHeaders.get('x-ratelimit-remaining')\n        : undefined;\n    const rateLimitReset = responseHeaders.has('x-ratelimit-reset')\n        ? new Date(+responseHeaders.get('x-ratelimit-reset') * 1000)\n        : undefined;\n    const result = {\n        rateLimit,\n        rateLimitRemaining,\n        rateLimitReset,\n    };\n    return result;\n};\n\nclass ApiClient {\n    constructor(apiConfig) {\n        this.apiConfig = apiConfig;\n        /**\n         *\n         * @internal\n         */\n        this.sendRequest = async (method, url, pathParams, queryParams, body, requestContentType) => {\n            queryParams = queryParams ?? {};\n            queryParams.api_key = this.apiConfig.apiKey;\n            const encodedParams = this.queryParamsStringify(queryParams);\n            if (pathParams) {\n                Object.keys(pathParams).forEach((paramName) => {\n                    url = url.replace(`{${paramName}}`, pathParams[paramName]);\n                });\n            }\n            url += `?${encodedParams}`;\n            const clientRequestId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const headers = {\n                Authorization: this.apiConfig.token,\n                'stream-auth-type': 'jwt',\n                'X-Stream-Client': 'stream-node-' + \"0.6.2\",\n                'Accept-Encoding': 'gzip',\n                'x-client-request-id': clientRequestId,\n            };\n            // https://stackoverflow.com/questions/39280438/fetch-missing-boundary-in-multipart-form-data-post\n            if (requestContentType !== 'multipart/form-data') {\n                headers['Content-Type'] = requestContentType ?? 'application/json';\n            }\n            const signal = AbortSignal.timeout(this.apiConfig.timeout);\n            const encodedBody = requestContentType === 'multipart/form-data'\n                ? new FormData()\n                : JSON.stringify(body);\n            if (requestContentType === 'multipart/form-data') {\n                Object.keys(body).forEach((key) => {\n                    encodedBody.append(key, body[key]);\n                });\n            }\n            try {\n                const response = await fetch(`${this.apiConfig.baseUrl}${url}`, {\n                    signal: requestContentType === 'multipart/form-data' ? undefined : signal,\n                    method,\n                    body: encodedBody,\n                    headers,\n                    dispatcher: this.dispatcher,\n                });\n                const responseHeaders = response.headers;\n                const metadata = {\n                    clientRequestId,\n                    responseHeaders,\n                    responseCode: response.status,\n                    rateLimit: getRateLimitFromResponseHeader(responseHeaders),\n                };\n                if (response.status < 200 || response.status >= 300) {\n                    let error;\n                    try {\n                        error = (await response.json());\n                    }\n                    catch (_) {\n                        throw new StreamError(`Stream error: ${response.status} - ${response.statusText}`, metadata, response.status);\n                    }\n                    throw new StreamError(`Stream error code ${error.code}: ${error.message}`, metadata, error.code, undefined);\n                }\n                const responseBody = (await response.json());\n                return { body: responseBody, metadata };\n            }\n            catch (error) {\n                if (error instanceof StreamError) {\n                    throw error;\n                }\n                const metadata = {\n                    clientRequestId,\n                    responseCode: error.status,\n                };\n                if (error.name === 'AbortError' || error.name === 'TimeoutError') {\n                    throw new StreamError(`The request was aborted due to to the ${this.apiConfig.timeout}ms timeout, you can set the timeout in the StreamClient constructor`, metadata, undefined, error);\n                }\n                else {\n                    throw new StreamError(`The request failed due to an unexpected error`, metadata, error);\n                }\n            }\n        };\n        this.queryParamsStringify = (params) => {\n            const newParams = [];\n            for (const k in params) {\n                const param = params[k];\n                if (Array.isArray(param)) {\n                    newParams.push(`${k}=${encodeURIComponent(param.join(','))}`);\n                }\n                else if (param instanceof Date) {\n                    newParams.push(param.toISOString());\n                }\n                else if (typeof param === 'object') {\n                    newParams.push(`${k}=${encodeURIComponent(JSON.stringify(param))}`);\n                }\n                else {\n                    if (typeof param === 'string' ||\n                        typeof param === 'number' ||\n                        typeof param === 'boolean') {\n                        newParams.push(`${k}=${encodeURIComponent(param)}`);\n                    }\n                }\n            }\n            return newParams.join('&');\n        };\n        this.dispatcher = this.apiConfig.agent;\n    }\n}\n\nclass FeedsApi {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    async addActivity(request) {\n        const body = {\n            type: request?.type,\n            feeds: request?.feeds,\n            expires_at: request?.expires_at,\n            id: request?.id,\n            parent_id: request?.parent_id,\n            poll_id: request?.poll_id,\n            text: request?.text,\n            user_id: request?.user_id,\n            visibility: request?.visibility,\n            visibility_tag: request?.visibility_tag,\n            attachments: request?.attachments,\n            filter_tags: request?.filter_tags,\n            interest_tags: request?.interest_tags,\n            mentioned_user_ids: request?.mentioned_user_ids,\n            custom: request?.custom,\n            location: request?.location,\n            search_data: request?.search_data,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities', undefined, undefined, body, 'application/json');\n        decoders.AddActivityResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async upsertActivities(request) {\n        const body = {\n            activities: request?.activities,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/batch', undefined, undefined, body, 'application/json');\n        decoders.UpsertActivitiesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteActivities(request) {\n        const body = {\n            ids: request?.ids,\n            hard_delete: request?.hard_delete,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/delete', undefined, undefined, body, 'application/json');\n        decoders.DeleteActivitiesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryActivities(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/query', undefined, undefined, body, 'application/json');\n        decoders.QueryActivitiesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteBookmark(request) {\n        const queryParams = {\n            folder_id: request?.folder_id,\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            activity_id: request?.activity_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/activities/{activity_id}/bookmarks', pathParams, queryParams);\n        decoders.DeleteBookmarkResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateBookmark(request) {\n        const pathParams = {\n            activity_id: request?.activity_id,\n        };\n        const body = {\n            folder_id: request?.folder_id,\n            new_folder_id: request?.new_folder_id,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            new_folder: request?.new_folder,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/activities/{activity_id}/bookmarks', pathParams, undefined, body, 'application/json');\n        decoders.UpdateBookmarkResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async addBookmark(request) {\n        const pathParams = {\n            activity_id: request?.activity_id,\n        };\n        const body = {\n            folder_id: request?.folder_id,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            new_folder: request?.new_folder,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/{activity_id}/bookmarks', pathParams, undefined, body, 'application/json');\n        decoders.AddBookmarkResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async activityFeedback(request) {\n        const pathParams = {\n            activity_id: request?.activity_id,\n        };\n        const body = {\n            hide: request?.hide,\n            mute_user: request?.mute_user,\n            reason: request?.reason,\n            report: request?.report,\n            show_less: request?.show_less,\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/{activity_id}/feedback', pathParams, undefined, body, 'application/json');\n        decoders.ActivityFeedbackResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async castPollVote(request) {\n        const pathParams = {\n            activity_id: request?.activity_id,\n            poll_id: request?.poll_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            user: request?.user,\n            vote: request?.vote,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote', pathParams, undefined, body, 'application/json');\n        decoders.PollVoteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deletePollVote(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            activity_id: request?.activity_id,\n            poll_id: request?.poll_id,\n            vote_id: request?.vote_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/activities/{activity_id}/polls/{poll_id}/vote/{vote_id}', pathParams, queryParams);\n        decoders.PollVoteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async addReaction(request) {\n        const pathParams = {\n            activity_id: request?.activity_id,\n        };\n        const body = {\n            type: request?.type,\n            create_notification_activity: request?.create_notification_activity,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/{activity_id}/reactions', pathParams, undefined, body, 'application/json');\n        decoders.AddReactionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryActivityReactions(request) {\n        const pathParams = {\n            activity_id: request?.activity_id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/activities/{activity_id}/reactions/query', pathParams, undefined, body, 'application/json');\n        decoders.QueryActivityReactionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteActivityReaction(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            activity_id: request?.activity_id,\n            type: request?.type,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/activities/{activity_id}/reactions/{type}', pathParams, queryParams);\n        decoders.DeleteActivityReactionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteActivity(request) {\n        const queryParams = {\n            hard_delete: request?.hard_delete,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/activities/{id}', pathParams, queryParams);\n        decoders.DeleteActivityResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getActivity(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/activities/{id}', pathParams, undefined);\n        decoders.GetActivityResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateActivityPartial(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            unset: request?.unset,\n            set: request?.set,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/activities/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateActivityPartialResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateActivity(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            expires_at: request?.expires_at,\n            poll_id: request?.poll_id,\n            text: request?.text,\n            user_id: request?.user_id,\n            visibility: request?.visibility,\n            attachments: request?.attachments,\n            filter_tags: request?.filter_tags,\n            interest_tags: request?.interest_tags,\n            custom: request?.custom,\n            location: request?.location,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/feeds/activities/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateActivityResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryBookmarkFolders(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/bookmark_folders/query', undefined, undefined, body, 'application/json');\n        decoders.QueryBookmarkFoldersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteBookmarkFolder(request) {\n        const pathParams = {\n            folder_id: request?.folder_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/bookmark_folders/{folder_id}', pathParams, undefined);\n        decoders.DeleteBookmarkFolderResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateBookmarkFolder(request) {\n        const pathParams = {\n            folder_id: request?.folder_id,\n        };\n        const body = {\n            name: request?.name,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/bookmark_folders/{folder_id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateBookmarkFolderResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryBookmarks(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/bookmarks/query', undefined, undefined, body, 'application/json');\n        decoders.QueryBookmarksResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getComments(request) {\n        const queryParams = {\n            object_id: request?.object_id,\n            object_type: request?.object_type,\n            depth: request?.depth,\n            sort: request?.sort,\n            replies_limit: request?.replies_limit,\n            limit: request?.limit,\n            prev: request?.prev,\n            next: request?.next,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/comments', undefined, queryParams);\n        decoders.GetCommentsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async addComment(request) {\n        const body = {\n            comment: request?.comment,\n            object_id: request?.object_id,\n            object_type: request?.object_type,\n            create_notification_activity: request?.create_notification_activity,\n            parent_id: request?.parent_id,\n            user_id: request?.user_id,\n            attachments: request?.attachments,\n            mentioned_user_ids: request?.mentioned_user_ids,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/comments', undefined, undefined, body, 'application/json');\n        decoders.AddCommentResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async addCommentsBatch(request) {\n        const body = {\n            comments: request?.comments,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/comments/batch', undefined, undefined, body, 'application/json');\n        decoders.AddCommentsBatchResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryComments(request) {\n        const body = {\n            filter: request?.filter,\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/comments/query', undefined, undefined, body, 'application/json');\n        decoders.QueryCommentsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteComment(request) {\n        const queryParams = {\n            hard_delete: request?.hard_delete,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/comments/{id}', pathParams, queryParams);\n        decoders.DeleteCommentResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getComment(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/comments/{id}', pathParams, undefined);\n        decoders.GetCommentResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateComment(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            comment: request?.comment,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/comments/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateCommentResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async addCommentReaction(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            type: request?.type,\n            create_notification_activity: request?.create_notification_activity,\n            user_id: request?.user_id,\n            custom: request?.custom,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/comments/{id}/reactions', pathParams, undefined, body, 'application/json');\n        decoders.AddCommentReactionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryCommentReactions(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/comments/{id}/reactions/query', pathParams, undefined, body, 'application/json');\n        decoders.QueryCommentReactionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteCommentReaction(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            id: request?.id,\n            type: request?.type,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/comments/{id}/reactions/{type}', pathParams, queryParams);\n        decoders.DeleteCommentReactionResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getCommentReplies(request) {\n        const queryParams = {\n            depth: request?.depth,\n            sort: request?.sort,\n            replies_limit: request?.replies_limit,\n            limit: request?.limit,\n            prev: request?.prev,\n            next: request?.next,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/comments/{id}/replies', pathParams, queryParams);\n        decoders.GetCommentRepliesResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listFeedGroups() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/feed_groups', undefined, undefined);\n        decoders.ListFeedGroupsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createFeedGroup(request) {\n        const body = {\n            id: request?.id,\n            default_visibility: request?.default_visibility,\n            activity_processors: request?.activity_processors,\n            activity_selectors: request?.activity_selectors,\n            aggregation: request?.aggregation,\n            custom: request?.custom,\n            notification: request?.notification,\n            ranking: request?.ranking,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups', undefined, undefined, body, 'application/json');\n        decoders.CreateFeedGroupResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteFeed(request) {\n        const queryParams = {\n            hard_delete: request?.hard_delete,\n        };\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}', pathParams, queryParams);\n        decoders.DeleteFeedResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOrCreateFeed(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            user_id: request?.user_id,\n            view: request?.view,\n            watch: request?.watch,\n            activity_selector_options: request?.activity_selector_options,\n            data: request?.data,\n            external_ranking: request?.external_ranking,\n            filter: request?.filter,\n            followers_pagination: request?.followers_pagination,\n            following_pagination: request?.following_pagination,\n            interest_weights: request?.interest_weights,\n            member_pagination: request?.member_pagination,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}', pathParams, undefined, body, 'application/json');\n        decoders.GetOrCreateFeedResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateFeed(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const body = {\n            created_by_id: request?.created_by_id,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateFeedResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async markActivity(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const body = {\n            mark_all_read: request?.mark_all_read,\n            mark_all_seen: request?.mark_all_seen,\n            user_id: request?.user_id,\n            mark_read: request?.mark_read,\n            mark_seen: request?.mark_seen,\n            mark_watched: request?.mark_watched,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/mark/batch', pathParams, undefined, body, 'application/json');\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unpinActivity(request) {\n        const queryParams = {\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n            activity_id: request?.activity_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin', pathParams, queryParams);\n        decoders.UnpinActivityResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async pinActivity(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n            activity_id: request?.activity_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/activities/{activity_id}/pin', pathParams, undefined, body, 'application/json');\n        decoders.PinActivityResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateFeedMembers(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const body = {\n            operation: request?.operation,\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            members: request?.members,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members', pathParams, undefined, body, 'application/json');\n        decoders.UpdateFeedMembersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async acceptFeedMemberInvite(request) {\n        const pathParams = {\n            feed_id: request?.feed_id,\n            feed_group_id: request?.feed_group_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/accept', pathParams, undefined, body, 'application/json');\n        decoders.AcceptFeedMemberInviteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryFeedMembers(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/query', pathParams, undefined, body, 'application/json');\n        decoders.QueryFeedMembersResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async rejectFeedMemberInvite(request) {\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n            feed_id: request?.feed_id,\n        };\n        const body = {\n            user_id: request?.user_id,\n            user: request?.user,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{feed_group_id}/feeds/{feed_id}/members/reject', pathParams, undefined, body, 'application/json');\n        decoders.RejectFeedMemberInviteResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getFollowSuggestions(request) {\n        const queryParams = {\n            limit: request?.limit,\n            user_id: request?.user_id,\n        };\n        const pathParams = {\n            feed_group_id: request?.feed_group_id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/feed_groups/{feed_group_id}/follow_suggestions', pathParams, queryParams);\n        decoders.GetFollowSuggestionsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteFeedGroup(request) {\n        const queryParams = {\n            hard_delete: request?.hard_delete,\n        };\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/feed_groups/{id}', pathParams, queryParams);\n        decoders.DeleteFeedGroupResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getFeedGroup(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/feed_groups/{id}', pathParams, undefined);\n        decoders.GetFeedGroupResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOrCreateFeedGroup(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            default_visibility: request?.default_visibility,\n            activity_processors: request?.activity_processors,\n            activity_selectors: request?.activity_selectors,\n            aggregation: request?.aggregation,\n            custom: request?.custom,\n            notification: request?.notification,\n            ranking: request?.ranking,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_groups/{id}', pathParams, undefined, body, 'application/json');\n        decoders.GetOrCreateFeedGroupResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateFeedGroup(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            activity_processors: request?.activity_processors,\n            activity_selectors: request?.activity_selectors,\n            aggregation: request?.aggregation,\n            custom: request?.custom,\n            notification: request?.notification,\n            ranking: request?.ranking,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/feeds/feed_groups/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateFeedGroupResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async listFeedViews() {\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/feed_views', undefined, undefined);\n        decoders.ListFeedViewsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createFeedView(request) {\n        const body = {\n            id: request?.id,\n            activity_processors: request?.activity_processors,\n            activity_selectors: request?.activity_selectors,\n            aggregation: request?.aggregation,\n            ranking: request?.ranking,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_views', undefined, undefined, body, 'application/json');\n        decoders.CreateFeedViewResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteFeedView(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/feed_views/{id}', pathParams, undefined);\n        decoders.DeleteFeedViewResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getFeedView(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('GET', '/api/v2/feeds/feed_views/{id}', pathParams, undefined);\n        decoders.GetFeedViewResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async getOrCreateFeedView(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            activity_processors: request?.activity_processors,\n            activity_selectors: request?.activity_selectors,\n            aggregation: request?.aggregation,\n            ranking: request?.ranking,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feed_views/{id}', pathParams, undefined, body, 'application/json');\n        decoders.GetOrCreateFeedViewResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateFeedView(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            activity_processors: request?.activity_processors,\n            activity_selectors: request?.activity_selectors,\n            aggregation: request?.aggregation,\n            ranking: request?.ranking,\n        };\n        const response = await this.apiClient.sendRequest('PUT', '/api/v2/feeds/feed_views/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateFeedViewResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createFeedsBatch(request) {\n        const body = {\n            feeds: request?.feeds,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feeds/batch', undefined, undefined, body, 'application/json');\n        decoders.CreateFeedsBatchResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async _queryFeeds(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            watch: request?.watch,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/feeds/query', undefined, undefined, body, 'application/json');\n        decoders.QueryFeedsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateFollow(request) {\n        const body = {\n            source: request?.source,\n            target: request?.target,\n            create_notification_activity: request?.create_notification_activity,\n            follower_role: request?.follower_role,\n            push_preference: request?.push_preference,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/follows', undefined, undefined, body, 'application/json');\n        decoders.UpdateFollowResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async follow(request) {\n        const body = {\n            source: request?.source,\n            target: request?.target,\n            create_notification_activity: request?.create_notification_activity,\n            push_preference: request?.push_preference,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/follows', undefined, undefined, body, 'application/json');\n        decoders.SingleFollowResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async acceptFollow(request) {\n        const body = {\n            source: request?.source,\n            target: request?.target,\n            follower_role: request?.follower_role,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/follows/accept', undefined, undefined, body, 'application/json');\n        decoders.AcceptFollowResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async followBatch(request) {\n        const body = {\n            follows: request?.follows,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/follows/batch', undefined, undefined, body, 'application/json');\n        decoders.FollowBatchResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryFollows(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/follows/query', undefined, undefined, body, 'application/json');\n        decoders.QueryFollowsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async rejectFollow(request) {\n        const body = {\n            source: request?.source,\n            target: request?.target,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/follows/reject', undefined, undefined, body, 'application/json');\n        decoders.RejectFollowResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unfollow(request) {\n        const pathParams = {\n            source: request?.source,\n            target: request?.target,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/follows/{source}/{target}', pathParams, undefined);\n        decoders.UnfollowResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async createMembershipLevel(request) {\n        const body = {\n            id: request?.id,\n            name: request?.name,\n            description: request?.description,\n            priority: request?.priority,\n            tags: request?.tags,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/membership_levels', undefined, undefined, body, 'application/json');\n        decoders.CreateMembershipLevelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async queryMembershipLevels(request) {\n        const body = {\n            limit: request?.limit,\n            next: request?.next,\n            prev: request?.prev,\n            sort: request?.sort,\n            filter: request?.filter,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/membership_levels/query', undefined, undefined, body, 'application/json');\n        decoders.QueryMembershipLevelsResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteMembershipLevel(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/membership_levels/{id}', pathParams, undefined);\n        decoders.Response?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async updateMembershipLevel(request) {\n        const pathParams = {\n            id: request?.id,\n        };\n        const body = {\n            description: request?.description,\n            name: request?.name,\n            priority: request?.priority,\n            tags: request?.tags,\n            custom: request?.custom,\n        };\n        const response = await this.apiClient.sendRequest('PATCH', '/api/v2/feeds/membership_levels/{id}', pathParams, undefined, body, 'application/json');\n        decoders.UpdateMembershipLevelResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async unfollowBatch(request) {\n        const body = {\n            follows: request?.follows,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/unfollow/batch', undefined, undefined, body, 'application/json');\n        decoders.UnfollowBatchResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async deleteFeedUserData(request) {\n        const pathParams = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('DELETE', '/api/v2/feeds/users/{user_id}/delete', pathParams, undefined);\n        decoders.DeleteFeedUserDataResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n    async exportFeedUserData(request) {\n        const pathParams = {\n            user_id: request?.user_id,\n        };\n        const response = await this.apiClient.sendRequest('POST', '/api/v2/feeds/users/{user_id}/export', pathParams, undefined);\n        decoders.ExportFeedUserDataResponse?.(response.body);\n        return { ...response.body, metadata: response.metadata };\n    }\n}\n\nclass FeedApi {\n    constructor(feedsApi, group, id) {\n        this.feedsApi = feedsApi;\n        this.group = group;\n        this.id = id;\n    }\n    delete(request) {\n        return this.feedsApi.deleteFeed({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    getOrCreate(request) {\n        return this.feedsApi.getOrCreateFeed({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    update(request) {\n        return this.feedsApi.updateFeed({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    markActivity(request) {\n        return this.feedsApi.markActivity({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    unpinActivity(request) {\n        return this.feedsApi.unpinActivity({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    pinActivity(request) {\n        return this.feedsApi.pinActivity({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    updateFeedMembers(request) {\n        return this.feedsApi.updateFeedMembers({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    acceptFeedMemberInvite(request) {\n        return this.feedsApi.acceptFeedMemberInvite({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    queryFeedMembers(request) {\n        return this.feedsApi.queryFeedMembers({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n    rejectFeedMemberInvite(request) {\n        return this.feedsApi.rejectFeedMemberInvite({\n            feed_id: this.id,\n            feed_group_id: this.group,\n            ...request,\n        });\n    }\n}\n\nclass StreamFeed extends FeedApi {\n    get feed() {\n        return `${this.group}:${this.id}`;\n    }\n}\n\nclass StreamFeedsClient extends FeedsApi {\n    constructor() {\n        super(...arguments);\n        this.feed = (group, id) => {\n            return new StreamFeed(this, group, id);\n        };\n        this.queryFeeds = (request) => {\n            return super._queryFeeds(request);\n        };\n    }\n}\n\nclass StreamClient extends CommonApi {\n    /**\n     *\n     * @param apiKey\n     * @param secret\n     * @param config config object\n     */\n    constructor(apiKey, secret, config) {\n        const token = JWTServerToken(secret);\n        const timeout = config?.timeout ?? StreamClient.DEFAULT_TIMEOUT;\n        const chatBaseUrl = config?.basePath ?? 'https://chat.stream-io-api.com';\n        const videoBaseUrl = config?.basePath ?? 'https://video.stream-io-api.com';\n        const feedsBaseUrl = config?.basePath ?? 'https://feeds.stream-io-api.com';\n        const chatApiClient = new ApiClient({\n            apiKey,\n            token,\n            baseUrl: chatBaseUrl,\n            timeout,\n            agent: config?.agent,\n        });\n        const videoApiClient = new ApiClient({\n            apiKey,\n            token,\n            baseUrl: videoBaseUrl,\n            timeout,\n            agent: config?.agent,\n        });\n        const feedsApiClient = new ApiClient({\n            apiKey,\n            token,\n            baseUrl: feedsBaseUrl,\n            timeout,\n            agent: config?.agent,\n        });\n        super(chatApiClient);\n        this.apiKey = apiKey;\n        this.secret = secret;\n        this.config = config;\n        this.options = {};\n        this.upsertUsers = (users) => {\n            const payload = {};\n            users.forEach((u) => {\n                payload[u.id] = u;\n            });\n            return this.updateUsers({ users: payload });\n        };\n        this.queryBannedUsers = (request) => {\n            return this.chat.queryBannedUsers(request);\n        };\n        // @ts-expect-error API spec says file should be a string\n        this.uploadFile = (request) => {\n            return super.uploadFile({\n                // @ts-expect-error API spec says file should be a string\n                file: request.file,\n                // @ts-expect-error form data will only work if this is a string\n                user: JSON.stringify(request.user),\n            });\n        };\n        // @ts-expect-error API spec says file should be a string\n        this.uploadImage = (request) => {\n            return super.uploadImage({\n                // @ts-expect-error API spec says file should be a string\n                file: request.file,\n                // @ts-expect-error form data will only work if this is a string\n                user: JSON.stringify(request.user),\n                // @ts-expect-error form data will only work if this is a string\n                upload_sizes: JSON.stringify(request.upload_sizes),\n            });\n        };\n        /**\n         *\n         * @param payload\n         * - user_id - the id of the user the token is for\n         * - validity_in_seconds - how many seconds is the token valid for (starting from issued at), by default it's 1 hour, dicarded if exp is provided\n         * - exp - when the token expires, unix timestamp in seconds\n         * - iat - issued at date of the token, unix timestamp in seconds, by default it's now\n         */\n        this.generateUserToken = (payload) => {\n            const defaultIat = Math.floor((Date.now() - 1000) / 1000);\n            payload.iat = payload.iat ?? defaultIat;\n            const validityInSeconds = payload.validity_in_seconds ?? 60 * 60;\n            payload.exp = payload.exp ?? payload.iat + validityInSeconds;\n            return JWTUserToken(this.secret, payload);\n        };\n        /**\n         *\n         * @param payload\n         * - user_id - the id of the user the token is for\n         * - validity_in_seconds - how many seconds is the token valid for (starting from issued at), by default it's 1 hour, dicarded if exp is provided\n         * - exp - when the token expires, unix timestamp in seconds\n         * - iat - issued at date of the token, unix timestamp in seconds, by default it's now\n         */\n        this.generateCallToken = (payload) => {\n            return this.generateUserToken(payload);\n        };\n        /**\n         *\n         * @param userID\n         * @param exp\n         * @param iat deprecated, the default date will be set internally\n         * @returns\n         *\n         * @deprecated use generateUserToken instead\n         */\n        this.createToken = (userID, exp = Math.round(Date.now() / 1000) + 60 * 60, iat = Math.floor((Date.now() - 1000) / 1000)) => {\n            const payload = {\n                user_id: userID,\n                exp,\n                iat,\n            };\n            return JWTUserToken(this.secret, payload);\n        };\n        /**\n         *\n         * @param userID\n         * @param call_cids\n         * @param exp\n         * @param iat this is deprecated, the current date will be set internally\n         * @returns\n         *\n         * @deprecated use generateCallToken instead\n         */\n        this.createCallToken = (userIdOrObject, call_cids, exp = Math.round(Date.now() / 1000) + 60 * 60, iat = Math.floor((Date.now() - 1000) / 1000)) => {\n            const payload = {\n                exp,\n                iat,\n                call_cids,\n                user_id: typeof userIdOrObject === 'string'\n                    ? userIdOrObject\n                    : userIdOrObject.user_id,\n            };\n            if (typeof userIdOrObject === 'object' && userIdOrObject.role) {\n                payload.role = userIdOrObject.role;\n            }\n            return JWTUserToken(this.secret, payload);\n        };\n        this.verifyWebhook = (requestBody, xSignature) => {\n            const key = Buffer.from(this.secret, 'utf8');\n            const hash = crypto__WEBPACK_IMPORTED_MODULE_1__.createHmac('sha256', key)\n                .update(requestBody)\n                .digest('hex');\n            try {\n                return crypto__WEBPACK_IMPORTED_MODULE_1__.timingSafeEqual(Buffer.from(hash), Buffer.from(xSignature));\n            }\n            catch (err) {\n                return false;\n            }\n        };\n        this.video = new StreamVideoClient({\n            streamClient: this,\n            apiClient: videoApiClient,\n        });\n        this.chat = new StreamChatClient(this.apiClient);\n        this.moderation = new StreamModerationClient(chatApiClient);\n        this.feeds = new StreamFeedsClient(feedsApiClient);\n    }\n}\nStreamClient.DEFAULT_TIMEOUT = 3000;\n\nconst ChannelOwnCapability = {\n    BAN_CHANNEL_MEMBERS: 'ban-channel-members',\n    CAST_POLL_VOTE: 'cast-poll-vote',\n    CONNECT_EVENTS: 'connect-events',\n    CREATE_ATTACHMENT: 'create-attachment',\n    DELETE_ANY_MESSAGE: 'delete-any-message',\n    DELETE_CHANNEL: 'delete-channel',\n    DELETE_OWN_MESSAGE: 'delete-own-message',\n    FLAG_MESSAGE: 'flag-message',\n    FREEZE_CHANNEL: 'freeze-channel',\n    JOIN_CHANNEL: 'join-channel',\n    LEAVE_CHANNEL: 'leave-channel',\n    MUTE_CHANNEL: 'mute-channel',\n    PIN_MESSAGE: 'pin-message',\n    QUERY_POLL_VOTES: 'query-poll-votes',\n    QUOTE_MESSAGE: 'quote-message',\n    READ_EVENTS: 'read-events',\n    SEARCH_MESSAGES: 'search-messages',\n    SEND_CUSTOM_EVENTS: 'send-custom-events',\n    SEND_LINKS: 'send-links',\n    SEND_MESSAGE: 'send-message',\n    SEND_POLL: 'send-poll',\n    SEND_REACTION: 'send-reaction',\n    SEND_REPLY: 'send-reply',\n    SEND_RESTRICTED_VISIBILITY_MESSAGE: 'send-restricted-visibility-message',\n    SEND_TYPING_EVENTS: 'send-typing-events',\n    SET_CHANNEL_COOLDOWN: 'set-channel-cooldown',\n    SHARE_LOCATION: 'share-location',\n    SKIP_SLOW_MODE: 'skip-slow-mode',\n    SLOW_MODE: 'slow-mode',\n    TYPING_EVENTS: 'typing-events',\n    UPDATE_ANY_MESSAGE: 'update-any-message',\n    UPDATE_CHANNEL: 'update-channel',\n    UPDATE_CHANNEL_MEMBERS: 'update-channel-members',\n    UPDATE_OWN_MESSAGE: 'update-own-message',\n    UPDATE_THREAD: 'update-thread',\n    UPLOAD_FILE: 'upload-file',\n};\nconst FeedOwnCapability = {\n    ADD_ACTIVITY: 'add-activity',\n    ADD_ACTIVITY_REACTION: 'add-activity-reaction',\n    ADD_COMMENT: 'add-comment',\n    ADD_COMMENT_REACTION: 'add-comment-reaction',\n    BOOKMARK_ACTIVITY: 'bookmark-activity',\n    CREATE_FEED: 'create-feed',\n    DELETE_BOOKMARK: 'delete-bookmark',\n    DELETE_COMMENT: 'delete-comment',\n    DELETE_FEED: 'delete-feed',\n    EDIT_BOOKMARK: 'edit-bookmark',\n    FOLLOW: 'follow',\n    INVITE_FEED: 'invite-feed',\n    JOIN_FEED: 'join-feed',\n    LEAVE_FEED: 'leave-feed',\n    MANAGE_FEED_GROUP: 'manage-feed-group',\n    MARK_ACTIVITY: 'mark-activity',\n    PIN_ACTIVITY: 'pin-activity',\n    QUERY_FEED_MEMBERS: 'query-feed-members',\n    QUERY_FOLLOWS: 'query-follows',\n    READ_ACTIVITIES: 'read-activities',\n    READ_FEED: 'read-feed',\n    REMOVE_ACTIVITY: 'remove-activity',\n    REMOVE_ACTIVITY_REACTION: 'remove-activity-reaction',\n    REMOVE_COMMENT_REACTION: 'remove-comment-reaction',\n    UNFOLLOW: 'unfollow',\n    UPDATE_ACTIVITY: 'update-activity',\n    UPDATE_COMMENT: 'update-comment',\n    UPDATE_FEED: 'update-feed',\n    UPDATE_FEED_FOLLOWERS: 'update-feed-followers',\n    UPDATE_FEED_MEMBERS: 'update-feed-members',\n};\nconst OwnCapability = {\n    BLOCK_USERS: 'block-users',\n    CHANGE_MAX_DURATION: 'change-max-duration',\n    CREATE_CALL: 'create-call',\n    CREATE_REACTION: 'create-reaction',\n    ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n    END_CALL: 'end-call',\n    JOIN_BACKSTAGE: 'join-backstage',\n    JOIN_CALL: 'join-call',\n    JOIN_ENDED_CALL: 'join-ended-call',\n    KICK_USER: 'kick-user',\n    MUTE_USERS: 'mute-users',\n    PIN_FOR_EVERYONE: 'pin-for-everyone',\n    READ_CALL: 'read-call',\n    REMOVE_CALL_MEMBER: 'remove-call-member',\n    SCREENSHARE: 'screenshare',\n    SEND_AUDIO: 'send-audio',\n    SEND_VIDEO: 'send-video',\n    START_BROADCAST_CALL: 'start-broadcast-call',\n    START_CLOSED_CAPTIONS_CALL: 'start-closed-captions-call',\n    START_FRAME_RECORD_CALL: 'start-frame-record-call',\n    START_RECORD_CALL: 'start-record-call',\n    START_TRANSCRIPTION_CALL: 'start-transcription-call',\n    STOP_BROADCAST_CALL: 'stop-broadcast-call',\n    STOP_CLOSED_CAPTIONS_CALL: 'stop-closed-captions-call',\n    STOP_FRAME_RECORD_CALL: 'stop-frame-record-call',\n    STOP_RECORD_CALL: 'stop-record-call',\n    STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n    UPDATE_CALL: 'update-call',\n    UPDATE_CALL_MEMBER: 'update-call-member',\n    UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n    UPDATE_CALL_SETTINGS: 'update-call-settings',\n};\n\n\n//# sourceMappingURL=index.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@stream-io/node-sdk/dist/index.es.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css":
/*!*********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/css/styles.css ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"fe31b4bbe0c7\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9jc3Mvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxocFxcRG93bmxvYWRzXFxyZW1vdGUtaW50ZXJ2aWV3LXBsYXRmb3JtXFxub2RlX21vZHVsZXNcXEBzdHJlYW0taW9cXHZpZGVvLXJlYWN0LXNka1xcZGlzdFxcY3NzXFxzdHlsZXMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZmUzMWI0YmJlMGM3XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@stream-io/video-react-sdk/dist/css/styles.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stream-io/video-client/dist/index.es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* binding */ AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* binding */ AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   AxiosError: () => (/* reexport safe */ axios__WEBPACK_IMPORTED_MODULE_1__.AxiosError),\n/* harmony export */   Browsers: () => (/* binding */ browsers),\n/* harmony export */   Call: () => (/* binding */ Call),\n/* harmony export */   CallState: () => (/* binding */ CallState),\n/* harmony export */   CallType: () => (/* binding */ CallType),\n/* harmony export */   CallTypes: () => (/* binding */ CallTypes),\n/* harmony export */   CallingState: () => (/* binding */ CallingState),\n/* harmony export */   CameraManager: () => (/* binding */ CameraManager),\n/* harmony export */   CameraManagerState: () => (/* binding */ CameraManagerState),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* binding */ CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* binding */ DebounceType),\n/* harmony export */   DynascaleManager: () => (/* binding */ DynascaleManager),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   FrameRecordingSettingsRequestModeEnum: () => (/* binding */ FrameRecordingSettingsRequestModeEnum),\n/* harmony export */   FrameRecordingSettingsRequestQualityEnum: () => (/* binding */ FrameRecordingSettingsRequestQualityEnum),\n/* harmony export */   FrameRecordingSettingsResponseModeEnum: () => (/* binding */ FrameRecordingSettingsResponseModeEnum),\n/* harmony export */   IngressAudioEncodingOptionsRequestChannelsEnum: () => (/* binding */ IngressAudioEncodingOptionsRequestChannelsEnum),\n/* harmony export */   IngressVideoLayerRequestCodecEnum: () => (/* binding */ IngressVideoLayerRequestCodecEnum),\n/* harmony export */   InputMediaDeviceManager: () => (/* binding */ InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* binding */ InputMediaDeviceManagerState),\n/* harmony export */   LayoutSettingsRequestNameEnum: () => (/* binding */ LayoutSettingsRequestNameEnum),\n/* harmony export */   MicrophoneManager: () => (/* binding */ MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* binding */ MicrophoneManagerState),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* binding */ NoiseCancellationSettingsModeEnum),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   RNSpeechDetector: () => (/* binding */ RNSpeechDetector),\n/* harmony export */   RTMPBroadcastRequestQualityEnum: () => (/* binding */ RTMPBroadcastRequestQualityEnum),\n/* harmony export */   RTMPSettingsRequestQualityEnum: () => (/* binding */ RTMPSettingsRequestQualityEnum),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* binding */ RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* binding */ RecordSettingsRequestQualityEnum),\n/* harmony export */   RxUtils: () => (/* binding */ rxUtils),\n/* harmony export */   ScreenShareManager: () => (/* binding */ ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* binding */ ScreenShareState),\n/* harmony export */   SfuEvents: () => (/* binding */ events),\n/* harmony export */   SfuModels: () => (/* binding */ models),\n/* harmony export */   SpeakerManager: () => (/* binding */ SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* binding */ SpeakerState),\n/* harmony export */   StartClosedCaptionsRequestLanguageEnum: () => (/* binding */ StartClosedCaptionsRequestLanguageEnum),\n/* harmony export */   StartTranscriptionRequestLanguageEnum: () => (/* binding */ StartTranscriptionRequestLanguageEnum),\n/* harmony export */   StreamSfuClient: () => (/* binding */ StreamSfuClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* binding */ StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* binding */ StreamVideoWriteableStateStore),\n/* harmony export */   TranscriptionSettingsRequestClosedCaptionModeEnum: () => (/* binding */ TranscriptionSettingsRequestClosedCaptionModeEnum),\n/* harmony export */   TranscriptionSettingsRequestLanguageEnum: () => (/* binding */ TranscriptionSettingsRequestLanguageEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* binding */ TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseClosedCaptionModeEnum: () => (/* binding */ TranscriptionSettingsResponseClosedCaptionModeEnum),\n/* harmony export */   TranscriptionSettingsResponseLanguageEnum: () => (/* binding */ TranscriptionSettingsResponseLanguageEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* binding */ TranscriptionSettingsResponseModeEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* binding */ VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* binding */ VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* binding */ ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* binding */ VisibilityState),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* binding */ checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* binding */ combineComparators),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createSoundDetector: () => (/* binding */ createSoundDetector),\n/* harmony export */   defaultSortPreset: () => (/* binding */ defaultSortPreset),\n/* harmony export */   descending: () => (/* binding */ descending),\n/* harmony export */   deviceIds$: () => (/* binding */ deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* binding */ disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* binding */ dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* binding */ getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* binding */ getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* binding */ getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getClientDetails: () => (/* binding */ getClientDetails),\n/* harmony export */   getDeviceState: () => (/* binding */ getDeviceState),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getScreenShareStream: () => (/* binding */ getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* binding */ getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* binding */ getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* binding */ getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* binding */ getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* binding */ getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* binding */ hasAudio),\n/* harmony export */   hasPausedTrack: () => (/* binding */ hasPausedTrack),\n/* harmony export */   hasScreenShare: () => (/* binding */ hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* binding */ hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* binding */ hasVideo),\n/* harmony export */   isPinned: () => (/* binding */ isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* binding */ livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   noopComparator: () => (/* binding */ noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* binding */ paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* binding */ pinned),\n/* harmony export */   publishingAudio: () => (/* binding */ publishingAudio),\n/* harmony export */   publishingVideo: () => (/* binding */ publishingVideo),\n/* harmony export */   reactionType: () => (/* binding */ reactionType),\n/* harmony export */   resolveDeviceId: () => (/* binding */ resolveDeviceId),\n/* harmony export */   role: () => (/* binding */ role),\n/* harmony export */   screenSharing: () => (/* binding */ screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* binding */ setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setLogger: () => (/* binding */ setLogger),\n/* harmony export */   setOSInfo: () => (/* binding */ setOSInfo),\n/* harmony export */   setPowerState: () => (/* binding */ setPowerState),\n/* harmony export */   setSdkInfo: () => (/* binding */ setSdkInfo),\n/* harmony export */   setThermalState: () => (/* binding */ setThermalState),\n/* harmony export */   setWebRTCInfo: () => (/* binding */ setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* binding */ speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* binding */ speaking)\n/* harmony export */ });\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ \"(ssr)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twitch-twirp-error-code.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile,tap!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sdp-transform */ \"(ssr)/./node_modules/sdp-transform/lib/index.js\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n/* tslint:disable */ /**\n * @export\n */ const AudioSettingsRequestDefaultDeviceEnum = {\n    SPEAKER: 'speaker',\n    EARPIECE: 'earpiece'\n};\n/**\n * @export\n */ const AudioSettingsResponseDefaultDeviceEnum = {\n    SPEAKER: 'speaker',\n    EARPIECE: 'earpiece'\n};\n/**\n * @export\n */ const CreateDeviceRequestPushProviderEnum = {\n    FIREBASE: 'firebase',\n    APN: 'apn',\n    HUAWEI: 'huawei',\n    XIAOMI: 'xiaomi'\n};\n/**\n * @export\n */ const FrameRecordingSettingsRequestModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const FrameRecordingSettingsRequestQualityEnum = {\n    _360P: '360p',\n    _480P: '480p',\n    _720P: '720p',\n    _1080P: '1080p',\n    _1440P: '1440p',\n    _2160P: '2160p'\n};\n/**\n * @export\n */ const FrameRecordingSettingsResponseModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const IngressAudioEncodingOptionsRequestChannelsEnum = {\n    NUMBER_1: 1,\n    NUMBER_2: 2\n};\n/**\n * @export\n */ const IngressVideoLayerRequestCodecEnum = {\n    H264: 'h264',\n    VP8: 'vp8'\n};\n/**\n * @export\n */ const LayoutSettingsRequestNameEnum = {\n    SPOTLIGHT: 'spotlight',\n    GRID: 'grid',\n    SINGLE_PARTICIPANT: 'single-participant',\n    MOBILE: 'mobile',\n    CUSTOM: 'custom'\n};\n/**\n * @export\n */ const NoiseCancellationSettingsModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * All possibility of string to use\n * @export\n */ const OwnCapability = {\n    BLOCK_USERS: 'block-users',\n    CHANGE_MAX_DURATION: 'change-max-duration',\n    CREATE_CALL: 'create-call',\n    CREATE_REACTION: 'create-reaction',\n    ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n    END_CALL: 'end-call',\n    JOIN_BACKSTAGE: 'join-backstage',\n    JOIN_CALL: 'join-call',\n    JOIN_ENDED_CALL: 'join-ended-call',\n    KICK_USER: 'kick-user',\n    MUTE_USERS: 'mute-users',\n    PIN_FOR_EVERYONE: 'pin-for-everyone',\n    READ_CALL: 'read-call',\n    REMOVE_CALL_MEMBER: 'remove-call-member',\n    SCREENSHARE: 'screenshare',\n    SEND_AUDIO: 'send-audio',\n    SEND_VIDEO: 'send-video',\n    START_BROADCAST_CALL: 'start-broadcast-call',\n    START_CLOSED_CAPTIONS_CALL: 'start-closed-captions-call',\n    START_FRAME_RECORD_CALL: 'start-frame-record-call',\n    START_RECORD_CALL: 'start-record-call',\n    START_TRANSCRIPTION_CALL: 'start-transcription-call',\n    STOP_BROADCAST_CALL: 'stop-broadcast-call',\n    STOP_CLOSED_CAPTIONS_CALL: 'stop-closed-captions-call',\n    STOP_FRAME_RECORD_CALL: 'stop-frame-record-call',\n    STOP_RECORD_CALL: 'stop-record-call',\n    STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n    UPDATE_CALL: 'update-call',\n    UPDATE_CALL_MEMBER: 'update-call-member',\n    UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n    UPDATE_CALL_SETTINGS: 'update-call-settings'\n};\n/**\n * @export\n */ const RTMPBroadcastRequestQualityEnum = {\n    _360P: '360p',\n    _480P: '480p',\n    _720P: '720p',\n    _1080P: '1080p',\n    _1440P: '1440p',\n    _2160P: '2160p',\n    PORTRAIT_360X640: 'portrait-360x640',\n    PORTRAIT_480X854: 'portrait-480x854',\n    PORTRAIT_720X1280: 'portrait-720x1280',\n    PORTRAIT_1080X1920: 'portrait-1080x1920',\n    PORTRAIT_1440X2560: 'portrait-1440x2560',\n    PORTRAIT_2160X3840: 'portrait-2160x3840'\n};\n/**\n * @export\n */ const RTMPSettingsRequestQualityEnum = {\n    _360P: '360p',\n    _480P: '480p',\n    _720P: '720p',\n    _1080P: '1080p',\n    _1440P: '1440p',\n    _2160P: '2160p',\n    PORTRAIT_360X640: 'portrait-360x640',\n    PORTRAIT_480X854: 'portrait-480x854',\n    PORTRAIT_720X1280: 'portrait-720x1280',\n    PORTRAIT_1080X1920: 'portrait-1080x1920',\n    PORTRAIT_1440X2560: 'portrait-1440x2560',\n    PORTRAIT_2160X3840: 'portrait-2160x3840'\n};\n/**\n * @export\n */ const RecordSettingsRequestModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const RecordSettingsRequestQualityEnum = {\n    _360P: '360p',\n    _480P: '480p',\n    _720P: '720p',\n    _1080P: '1080p',\n    _1440P: '1440p',\n    _2160P: '2160p',\n    PORTRAIT_360X640: 'portrait-360x640',\n    PORTRAIT_480X854: 'portrait-480x854',\n    PORTRAIT_720X1280: 'portrait-720x1280',\n    PORTRAIT_1080X1920: 'portrait-1080x1920',\n    PORTRAIT_1440X2560: 'portrait-1440x2560',\n    PORTRAIT_2160X3840: 'portrait-2160x3840'\n};\n/**\n * @export\n */ const StartClosedCaptionsRequestLanguageEnum = {\n    AUTO: 'auto',\n    EN: 'en',\n    FR: 'fr',\n    ES: 'es',\n    DE: 'de',\n    IT: 'it',\n    NL: 'nl',\n    PT: 'pt',\n    PL: 'pl',\n    CA: 'ca',\n    CS: 'cs',\n    DA: 'da',\n    EL: 'el',\n    FI: 'fi',\n    ID: 'id',\n    JA: 'ja',\n    RU: 'ru',\n    SV: 'sv',\n    TA: 'ta',\n    TH: 'th',\n    TR: 'tr',\n    HU: 'hu',\n    RO: 'ro',\n    ZH: 'zh',\n    AR: 'ar',\n    TL: 'tl',\n    HE: 'he',\n    HI: 'hi',\n    HR: 'hr',\n    KO: 'ko',\n    MS: 'ms',\n    NO: 'no',\n    UK: 'uk',\n    BG: 'bg',\n    ET: 'et',\n    SL: 'sl',\n    SK: 'sk'\n};\n/**\n * @export\n */ const StartTranscriptionRequestLanguageEnum = {\n    AUTO: 'auto',\n    EN: 'en',\n    FR: 'fr',\n    ES: 'es',\n    DE: 'de',\n    IT: 'it',\n    NL: 'nl',\n    PT: 'pt',\n    PL: 'pl',\n    CA: 'ca',\n    CS: 'cs',\n    DA: 'da',\n    EL: 'el',\n    FI: 'fi',\n    ID: 'id',\n    JA: 'ja',\n    RU: 'ru',\n    SV: 'sv',\n    TA: 'ta',\n    TH: 'th',\n    TR: 'tr',\n    HU: 'hu',\n    RO: 'ro',\n    ZH: 'zh',\n    AR: 'ar',\n    TL: 'tl',\n    HE: 'he',\n    HI: 'hi',\n    HR: 'hr',\n    KO: 'ko',\n    MS: 'ms',\n    NO: 'no',\n    UK: 'uk',\n    BG: 'bg',\n    ET: 'et',\n    SL: 'sl',\n    SK: 'sk'\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestClosedCaptionModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestLanguageEnum = {\n    AUTO: 'auto',\n    EN: 'en',\n    FR: 'fr',\n    ES: 'es',\n    DE: 'de',\n    IT: 'it',\n    NL: 'nl',\n    PT: 'pt',\n    PL: 'pl',\n    CA: 'ca',\n    CS: 'cs',\n    DA: 'da',\n    EL: 'el',\n    FI: 'fi',\n    ID: 'id',\n    JA: 'ja',\n    RU: 'ru',\n    SV: 'sv',\n    TA: 'ta',\n    TH: 'th',\n    TR: 'tr',\n    HU: 'hu',\n    RO: 'ro',\n    ZH: 'zh',\n    AR: 'ar',\n    TL: 'tl',\n    HE: 'he',\n    HI: 'hi',\n    HR: 'hr',\n    KO: 'ko',\n    MS: 'ms',\n    NO: 'no',\n    UK: 'uk',\n    BG: 'bg',\n    ET: 'et',\n    SL: 'sl',\n    SK: 'sk'\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseClosedCaptionModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseLanguageEnum = {\n    AUTO: 'auto',\n    EN: 'en',\n    FR: 'fr',\n    ES: 'es',\n    DE: 'de',\n    IT: 'it',\n    NL: 'nl',\n    PT: 'pt',\n    PL: 'pl',\n    CA: 'ca',\n    CS: 'cs',\n    DA: 'da',\n    EL: 'el',\n    FI: 'fi',\n    ID: 'id',\n    JA: 'ja',\n    RU: 'ru',\n    SV: 'sv',\n    TA: 'ta',\n    TH: 'th',\n    TR: 'tr',\n    HU: 'hu',\n    RO: 'ro',\n    ZH: 'zh',\n    AR: 'ar',\n    TL: 'tl',\n    HE: 'he',\n    HI: 'hi',\n    HR: 'hr',\n    KO: 'ko',\n    MS: 'ms',\n    NO: 'no',\n    UK: 'uk',\n    BG: 'bg',\n    ET: 'et',\n    SL: 'sl',\n    SK: 'sk'\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const VideoSettingsRequestCameraFacingEnum = {\n    FRONT: 'front',\n    BACK: 'back',\n    EXTERNAL: 'external'\n};\n/**\n * @export\n */ const VideoSettingsResponseCameraFacingEnum = {\n    FRONT: 'front',\n    BACK: 'back',\n    EXTERNAL: 'external'\n};\nclass ErrorFromResponse extends Error {\n    constructor({ message, code, status, response, unrecoverable }){\n        super(message);\n        this.name = 'ErrorFromResponse';\n        this.code = code;\n        this.response = response;\n        this.status = status;\n        this.unrecoverable = unrecoverable;\n    }\n    // Vitest helper (serialized errors are too large to read)\n    // https://github.com/vitest-dev/vitest/blob/v3.1.3/packages/utils/src/error.ts#L60-L62\n    toJSON() {\n        const extra = [\n            [\n                'status',\n                this.status\n            ],\n            [\n                'code',\n                this.code\n            ],\n            [\n                'unrecoverable',\n                this.unrecoverable\n            ]\n        ];\n        const joinable = [];\n        for (const [key, value] of extra){\n            if (typeof value !== 'undefined' && value !== null) {\n                joinable.push(`${key}: ${value}`);\n            }\n        }\n        return {\n            message: `(${joinable.join(', ')}) - ${this.message}`,\n            stack: this.stack,\n            name: this.name\n        };\n    }\n}\n// @generated by protobuf-ts 2.10.0 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/struct.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */ var NullValue;\n(function(NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from protobuf enum value: NULL_VALUE = 0;\n     */ NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.Struct', [\n            {\n                no: 1,\n                name: 'fields',\n                kind: 'map',\n                K: 9 /*ScalarType.STRING*/ ,\n                V: {\n                    kind: 'message',\n                    T: ()=>Value\n                }\n            }\n        ]);\n    }\n    /**\n     * Encode `Struct` to JSON object.\n     */ internalJsonWrite(message, options) {\n        let json = {};\n        for (let [k, v] of Object.entries(message.fields)){\n            json[k] = Value.toJson(v);\n        }\n        return json;\n    }\n    /**\n     * Decode `Struct` from JSON object.\n     */ internalJsonRead(json, options, target) {\n        if (!(0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.isJsonObject)(json)) throw new globalThis.Error('Unable to parse message ' + this.typeName + ' from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json) + '.');\n        if (!target) target = this.create();\n        for (let [k, v] of globalThis.Object.entries(json)){\n            target.fields[k] = Value.fromJson(v);\n        }\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */ const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.Value', [\n            {\n                no: 1,\n                name: 'null_value',\n                kind: 'enum',\n                oneof: 'kind',\n                T: ()=>[\n                        'google.protobuf.NullValue',\n                        NullValue\n                    ]\n            },\n            {\n                no: 2,\n                name: 'number_value',\n                kind: 'scalar',\n                oneof: 'kind',\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 3,\n                name: 'string_value',\n                kind: 'scalar',\n                oneof: 'kind',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'bool_value',\n                kind: 'scalar',\n                oneof: 'kind',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 5,\n                name: 'struct_value',\n                kind: 'message',\n                oneof: 'kind',\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: 'list_value',\n                kind: 'message',\n                oneof: 'kind',\n                T: ()=>ListValue\n            }\n        ]);\n    }\n    /**\n     * Encode `Value` to JSON value.\n     */ internalJsonWrite(message, options) {\n        if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n        switch(message.kind.oneofKind){\n            case undefined:\n                throw new globalThis.Error();\n            case 'boolValue':\n                return message.kind.boolValue;\n            case 'nullValue':\n                return null;\n            case 'numberValue':\n                let numberValue = message.kind.numberValue;\n                if (typeof numberValue == 'number' && !Number.isFinite(numberValue)) throw new globalThis.Error();\n                return numberValue;\n            case 'stringValue':\n                return message.kind.stringValue;\n            case 'listValue':\n                let listValueField = this.fields.find((f)=>f.no === 6);\n                if (listValueField?.kind !== 'message') throw new globalThis.Error();\n                return listValueField.T().toJson(message.kind.listValue);\n            case 'structValue':\n                let structValueField = this.fields.find((f)=>f.no === 5);\n                if (structValueField?.kind !== 'message') throw new globalThis.Error();\n                return structValueField.T().toJson(message.kind.structValue);\n        }\n    }\n    /**\n     * Decode `Value` from JSON value.\n     */ internalJsonRead(json, options, target) {\n        if (!target) target = this.create();\n        switch(typeof json){\n            case 'number':\n                target.kind = {\n                    oneofKind: 'numberValue',\n                    numberValue: json\n                };\n                break;\n            case 'string':\n                target.kind = {\n                    oneofKind: 'stringValue',\n                    stringValue: json\n                };\n                break;\n            case 'boolean':\n                target.kind = {\n                    oneofKind: 'boolValue',\n                    boolValue: json\n                };\n                break;\n            case 'object':\n                if (json === null) {\n                    target.kind = {\n                        oneofKind: 'nullValue',\n                        nullValue: NullValue.NULL_VALUE\n                    };\n                } else if (globalThis.Array.isArray(json)) {\n                    target.kind = {\n                        oneofKind: 'listValue',\n                        listValue: ListValue.fromJson(json)\n                    };\n                } else {\n                    target.kind = {\n                        oneofKind: 'structValue',\n                        structValue: Struct.fromJson(json)\n                    };\n                }\n                break;\n            default:\n                throw new globalThis.Error('Unable to parse ' + this.typeName + ' from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json));\n        }\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */ const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.ListValue', [\n            {\n                no: 1,\n                name: 'values',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>Value\n            }\n        ]);\n    }\n    /**\n     * Encode `ListValue` to JSON array.\n     */ internalJsonWrite(message, options) {\n        return message.values.map((v)=>Value.toJson(v));\n    }\n    /**\n     * Decode `ListValue` from JSON array.\n     */ internalJsonRead(json, options, target) {\n        if (!globalThis.Array.isArray(json)) throw new globalThis.Error('Unable to parse ' + this.typeName + ' from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json));\n        if (!target) target = this.create();\n        let values = json.map((v)=>Value.fromJson(v));\n        target.values.push(...values);\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */ const ListValue = new ListValue$Type();\n// @generated by protobuf-ts 2.10.0 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/timestamp.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.Timestamp', [\n            {\n                no: 1,\n                name: 'seconds',\n                kind: 'scalar',\n                T: 3 /*ScalarType.INT64*/ \n            },\n            {\n                no: 2,\n                name: 'nanos',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    /**\n     * Creates a new `Timestamp` for the current time.\n     */ now() {\n        const msg = this.create();\n        const ms = Date.now();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript Date.\n     */ toDate(message) {\n        return new Date(_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n    }\n    /**\n     * Converts a JavaScript Date to a `Timestamp`.\n     */ fromDate(date) {\n        const msg = this.create();\n        const ms = date.getTime();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = (ms % 1000 + (ms < 0 && ms % 1000 !== 0 ? 1000 : 0)) * 1000000;\n        return msg;\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonWrite(message, options) {\n        let ms = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(message.seconds).toNumber() * 1000;\n        if (ms < Date.parse('0001-01-01T00:00:00Z') || ms > Date.parse('9999-12-31T23:59:59Z')) throw new Error('Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.');\n        if (message.nanos < 0) throw new Error('Unable to encode invalid Timestamp to JSON. Nanos must not be negative.');\n        let z = 'Z';\n        if (message.nanos > 0) {\n            let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === '000000') z = '.' + nanosStr.substring(0, 3) + 'Z';\n            else if (nanosStr.substring(6) === '000') z = '.' + nanosStr.substring(0, 6) + 'Z';\n            else z = '.' + nanosStr + 'Z';\n        }\n        return new Date(ms).toISOString().replace('.000Z', z);\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonRead(json, options, target) {\n        if (typeof json !== 'string') throw new Error('Unable to parse Timestamp from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json) + '.');\n        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) throw new Error('Unable to parse Timestamp from JSON. Invalid format.');\n        let ms = Date.parse(matches[1] + '-' + matches[2] + '-' + matches[3] + 'T' + matches[4] + ':' + matches[5] + ':' + matches[6] + (matches[8] ? matches[8] : 'Z'));\n        if (Number.isNaN(ms)) throw new Error('Unable to parse Timestamp from JSON. Invalid value.');\n        if (ms < Date.parse('0001-01-01T00:00:00Z') || ms > Date.parse('9999-12-31T23:59:59Z')) throw new globalThis.Error('Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.');\n        if (!target) target = this.create();\n        target.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(ms / 1000).toString();\n        target.nanos = 0;\n        if (matches[7]) target.nanos = parseInt('1' + matches[7] + '0'.repeat(9 - matches[7].length)) - 1000000000;\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */ const Timestamp = new Timestamp$Type();\n// @generated by protobuf-ts 2.10.0 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/models/models.proto\" (package \"stream.video.sfu.models\", syntax proto3)\n// tslint:disable\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */ var PeerType;\n(function(PeerType) {\n    /**\n     * todo fix me (marcelo)\n     *\n     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n     */ PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n     */ PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */ var ConnectionQuality;\n(function(ConnectionQuality) {\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n     */ ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n     */ ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n     */ ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n     */ ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */ var VideoQuality;\n(function(VideoQuality) {\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n     */ VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n     */ VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n     */ VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n     */ VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */ var TrackType;\n(function(TrackType) {\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n     */ TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n     */ TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n     */ TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n     */ TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n     */ TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */ var ErrorCode;\n(function(ErrorCode) {\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n     */ ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n     */ ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_SIGNAL_LOST = 206;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_SIGNAL_LOST\"] = 206] = \"PARTICIPANT_SIGNAL_LOST\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n     */ ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_PARTICIPANT_LIMIT_REACHED = 301;\n     */ ErrorCode[ErrorCode[\"CALL_PARTICIPANT_LIMIT_REACHED\"] = 301] = \"CALL_PARTICIPANT_LIMIT_REACHED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n     */ ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n     */ ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n     */ ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n     */ ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n     */ ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n     */ ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n     */ ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */ var SdkType;\n(function(SdkType) {\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n     */ SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n     */ SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n     */ SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n     */ SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n     */ SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n     */ SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n     */ SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n     */ SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_GO = 8;\n     */ SdkType[SdkType[\"GO\"] = 8] = \"GO\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_PLAIN_JAVASCRIPT = 9;\n     */ SdkType[SdkType[\"PLAIN_JAVASCRIPT\"] = 9] = \"PLAIN_JAVASCRIPT\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */ var TrackUnpublishReason;\n(function(TrackUnpublishReason) {\n    /**\n     * Default value which is used when the specific reason\n     * for muting the track is not known.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Represents user muting their tracks.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n    /**\n     * Represents muting the track because the permission to\n     * publish the track has been revoked.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n    /**\n     * Represents muting the track due to moderation actions.\n     * This is different from permission revoked because the\n     * participant can unmute themselves here whereas in case\n     * of \"permission revoke\" it is not possible until the\n     * call permissions are updated.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */ var GoAwayReason;\n(function(GoAwayReason) {\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n     */ GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n     */ GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n     */ GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */ var CallEndedReason;\n(function(CallEndedReason) {\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n     */ CallEndedReason[CallEndedReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n     */ CallEndedReason[CallEndedReason[\"ENDED\"] = 1] = \"ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n     */ CallEndedReason[CallEndedReason[\"LIVE_ENDED\"] = 2] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n     */ CallEndedReason[CallEndedReason[\"KICKED\"] = 3] = \"KICKED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_SESSION_ENDED = 4;\n     */ CallEndedReason[CallEndedReason[\"SESSION_ENDED\"] = 4] = \"SESSION_ENDED\";\n})(CallEndedReason || (CallEndedReason = {}));\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */ var WebsocketReconnectStrategy;\n(function(WebsocketReconnectStrategy) {\n    /**\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Sent after reaching the maximum reconnection attempts, or any other unrecoverable error leading to permanent disconnect.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    /**\n     * SDK should maintaining existing publisher/subscriber pc instances\n     * and establish a new WebSocket connection.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"FAST\"] = 2] = \"FAST\";\n    /**\n     * SDK should obtain new credentials from the coordinator, drops existing pc instances, set a new session_id and initializes\n     * a completely new WebSocket connection, ensuring a comprehensive reset.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_REJOIN = 3;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"REJOIN\"] = 3] = \"REJOIN\";\n    /**\n     * SDK should migrate to a new SFU instance\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 4;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"MIGRATE\"] = 4] = \"MIGRATE\";\n})(WebsocketReconnectStrategy || (WebsocketReconnectStrategy = {}));\n/**\n * AndroidThermalState is reported by the Android API. The full list of values is documented here\n * https://developer.android.com/reference/android/os/PowerManager.html#getCurrentThermalStatus()\n *\n * @generated from protobuf enum stream.video.sfu.models.AndroidThermalState\n */ var AndroidThermalState;\n(function(AndroidThermalState) {\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_UNSPECIFIED = 0;\n     */ AndroidThermalState[AndroidThermalState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_NONE = 1;\n     */ AndroidThermalState[AndroidThermalState[\"NONE\"] = 1] = \"NONE\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_LIGHT = 2;\n     */ AndroidThermalState[AndroidThermalState[\"LIGHT\"] = 2] = \"LIGHT\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_MODERATE = 3;\n     */ AndroidThermalState[AndroidThermalState[\"MODERATE\"] = 3] = \"MODERATE\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SEVERE = 4;\n     */ AndroidThermalState[AndroidThermalState[\"SEVERE\"] = 4] = \"SEVERE\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_CRITICAL = 5;\n     */ AndroidThermalState[AndroidThermalState[\"CRITICAL\"] = 5] = \"CRITICAL\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_EMERGENCY = 6;\n     */ AndroidThermalState[AndroidThermalState[\"EMERGENCY\"] = 6] = \"EMERGENCY\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SHUTDOWN = 7;\n     */ AndroidThermalState[AndroidThermalState[\"SHUTDOWN\"] = 7] = \"SHUTDOWN\";\n})(AndroidThermalState || (AndroidThermalState = {}));\n/**\n * AppleThermalState is the thermal state as reported by Apple devices when available or applicable to the platform.\n * The full list of states (enum) is available here: https://developer.apple.com/documentation/foundation/processinfo/thermalstate\n *\n * @generated from protobuf enum stream.video.sfu.models.AppleThermalState\n */ var AppleThermalState;\n(function(AppleThermalState) {\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_UNSPECIFIED = 0;\n     */ AppleThermalState[AppleThermalState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_NOMINAL = 1;\n     */ AppleThermalState[AppleThermalState[\"NOMINAL\"] = 1] = \"NOMINAL\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_FAIR = 2;\n     */ AppleThermalState[AppleThermalState[\"FAIR\"] = 2] = \"FAIR\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_SERIOUS = 3;\n     */ AppleThermalState[AppleThermalState[\"SERIOUS\"] = 3] = \"SERIOUS\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_CRITICAL = 4;\n     */ AppleThermalState[AppleThermalState[\"CRITICAL\"] = 4] = \"CRITICAL\";\n})(AppleThermalState || (AppleThermalState = {}));\n/**\n * ClientCapability defines a feature that client supports\n *\n * @generated from protobuf enum stream.video.sfu.models.ClientCapability\n */ var ClientCapability;\n(function(ClientCapability) {\n    /**\n     * @generated from protobuf enum value: CLIENT_CAPABILITY_UNSPECIFIED = 0;\n     */ ClientCapability[ClientCapability[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Enables SFU pausing inbound video\n     *\n     * @generated from protobuf enum value: CLIENT_CAPABILITY_SUBSCRIBER_VIDEO_PAUSE = 1;\n     */ ClientCapability[ClientCapability[\"SUBSCRIBER_VIDEO_PAUSE\"] = 1] = \"SUBSCRIBER_VIDEO_PAUSE\";\n})(ClientCapability || (ClientCapability = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.CallState', [\n            {\n                no: 1,\n                name: 'participants',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>Participant\n            },\n            {\n                no: 2,\n                name: 'started_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            },\n            {\n                no: 3,\n                name: 'participant_count',\n                kind: 'message',\n                T: ()=>ParticipantCount\n            },\n            {\n                no: 4,\n                name: 'pins',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */ const CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.ParticipantCount', [\n            {\n                no: 1,\n                name: 'total',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: 'anonymous',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */ const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Pin', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */ const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Participant', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'published_tracks',\n                kind: 'enum',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'joined_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            },\n            {\n                no: 5,\n                name: 'track_lookup_prefix',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: 'connection_quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.ConnectionQuality',\n                        ConnectionQuality,\n                        'CONNECTION_QUALITY_'\n                    ]\n            },\n            {\n                no: 7,\n                name: 'is_speaking',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: 'is_dominant_speaker',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: 'audio_level',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 10,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 11,\n                name: 'image',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: 'custom',\n                kind: 'message',\n                T: ()=>Struct\n            },\n            {\n                no: 13,\n                name: 'roles',\n                kind: 'scalar',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */ const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.StreamQuality', [\n            {\n                no: 1,\n                name: 'video_quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.VideoQuality',\n                        VideoQuality,\n                        'VIDEO_QUALITY_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */ const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.VideoDimension', [\n            {\n                no: 1,\n                name: 'width',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: 'height',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */ const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.VideoLayer', [\n            {\n                no: 1,\n                name: 'rid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'video_dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            },\n            {\n                no: 4,\n                name: 'bitrate',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: 'fps',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: 'quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.VideoQuality',\n                        VideoQuality,\n                        'VIDEO_QUALITY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */ const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeOption$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.SubscribeOption', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'codecs',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>Codec\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.SubscribeOption\n */ const SubscribeOption = new SubscribeOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishOption$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.PublishOption', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'bitrate',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: 'fps',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 5,\n                name: 'max_spatial_layers',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 6,\n                name: 'max_temporal_layers',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 7,\n                name: 'video_dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            },\n            {\n                no: 8,\n                name: 'id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 9,\n                name: 'use_single_layer',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.PublishOption\n */ const PublishOption = new PublishOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Codec', [\n            {\n                no: 16,\n                name: 'payload_type',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 10,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 14,\n                name: 'clock_rate',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 15,\n                name: 'encoding_parameters',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: 'fmtp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */ const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.ICETrickle', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'ice_candidate',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */ const ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.TrackInfo', [\n            {\n                no: 1,\n                name: 'track_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 5,\n                name: 'layers',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>VideoLayer\n            },\n            {\n                no: 6,\n                name: 'mid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'dtx',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: 'stereo',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: 'red',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 10,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 11,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 12,\n                name: 'publish_option_id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */ const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Error', [\n            {\n                no: 1,\n                name: 'code',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.ErrorCode',\n                        ErrorCode,\n                        'ERROR_CODE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'message',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'should_retry',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */ const Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.ClientDetails', [\n            {\n                no: 1,\n                name: 'sdk',\n                kind: 'message',\n                T: ()=>Sdk\n            },\n            {\n                no: 2,\n                name: 'os',\n                kind: 'message',\n                T: ()=>OS\n            },\n            {\n                no: 3,\n                name: 'browser',\n                kind: 'message',\n                T: ()=>Browser\n            },\n            {\n                no: 4,\n                name: 'device',\n                kind: 'message',\n                T: ()=>Device\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */ const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Sdk', [\n            {\n                no: 1,\n                name: 'type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.SdkType',\n                        SdkType,\n                        'SDK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'major',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'minor',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'patch',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */ const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.OS', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'architecture',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */ const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Browser', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */ const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RTMPIngress$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.RTMPIngress', [\n            {\n                no: 1,\n                name: 'width',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: 'height',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 3,\n                name: 'frame_rate',\n                kind: 'scalar',\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 4,\n                name: 'software',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: 'encoder',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'remote_addr',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.RTMPIngress\n */ const RTMPIngress = new RTMPIngress$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Device', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */ const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Call', [\n            {\n                no: 1,\n                name: 'type',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'created_by_user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'host_user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: 'custom',\n                kind: 'message',\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: 'created_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            },\n            {\n                no: 7,\n                name: 'updated_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */ const Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.CallGrants', [\n            {\n                no: 1,\n                name: 'can_publish_audio',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: 'can_publish_video',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: 'can_screenshare',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */ const CallGrants = new CallGrants$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InputDevices$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.InputDevices', [\n            {\n                no: 1,\n                name: 'available_devices',\n                kind: 'scalar',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'current_device',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'is_permitted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.InputDevices\n */ const InputDevices = new InputDevices$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AndroidState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.AndroidState', [\n            {\n                no: 1,\n                name: 'thermal_state',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.AndroidThermalState',\n                        AndroidThermalState,\n                        'ANDROID_THERMAL_STATE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'is_power_saver_mode',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AndroidState\n */ const AndroidState = new AndroidState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AppleState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.AppleState', [\n            {\n                no: 1,\n                name: 'thermal_state',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.AppleThermalState',\n                        AppleThermalState,\n                        'APPLE_THERMAL_STATE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'is_low_power_mode_enabled',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AppleState\n */ const AppleState = new AppleState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PerformanceStats$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.PerformanceStats', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'avg_frame_time_ms',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: 'avg_fps',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 5,\n                name: 'video_dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            },\n            {\n                no: 6,\n                name: 'target_bitrate',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.PerformanceStats\n */ const PerformanceStats = new PerformanceStats$Type();\nvar models = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AndroidState: AndroidState,\n    get AndroidThermalState () {\n        return AndroidThermalState;\n    },\n    AppleState: AppleState,\n    get AppleThermalState () {\n        return AppleThermalState;\n    },\n    Browser: Browser,\n    Call: Call$1,\n    get CallEndedReason () {\n        return CallEndedReason;\n    },\n    CallGrants: CallGrants,\n    CallState: CallState$1,\n    get ClientCapability () {\n        return ClientCapability;\n    },\n    ClientDetails: ClientDetails,\n    Codec: Codec,\n    get ConnectionQuality () {\n        return ConnectionQuality;\n    },\n    Device: Device,\n    Error: Error$2,\n    get ErrorCode () {\n        return ErrorCode;\n    },\n    get GoAwayReason () {\n        return GoAwayReason;\n    },\n    ICETrickle: ICETrickle$1,\n    InputDevices: InputDevices,\n    OS: OS,\n    Participant: Participant,\n    ParticipantCount: ParticipantCount,\n    get PeerType () {\n        return PeerType;\n    },\n    PerformanceStats: PerformanceStats,\n    Pin: Pin,\n    PublishOption: PublishOption,\n    RTMPIngress: RTMPIngress,\n    Sdk: Sdk,\n    get SdkType () {\n        return SdkType;\n    },\n    StreamQuality: StreamQuality,\n    SubscribeOption: SubscribeOption,\n    TrackInfo: TrackInfo,\n    get TrackType () {\n        return TrackType;\n    },\n    get TrackUnpublishReason () {\n        return TrackUnpublishReason;\n    },\n    VideoDimension: VideoDimension,\n    VideoLayer: VideoLayer,\n    get VideoQuality () {\n        return VideoQuality;\n    },\n    get WebsocketReconnectStrategy () {\n        return WebsocketReconnectStrategy;\n    }\n});\n// @generated by protobuf-ts 2.10.0 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StartNoiseCancellationRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */ const StartNoiseCancellationRequest = new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StartNoiseCancellationResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */ const StartNoiseCancellationResponse = new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StopNoiseCancellationRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */ const StopNoiseCancellationRequest = new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StopNoiseCancellationResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */ const StopNoiseCancellationResponse = new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Reconnection$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.Reconnection', [\n            {\n                no: 1,\n                name: 'time_seconds',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 2,\n                name: 'strategy',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.WebsocketReconnectStrategy',\n                        WebsocketReconnectStrategy,\n                        'WEBSOCKET_RECONNECT_STRATEGY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Reconnection\n */ const Reconnection = new Reconnection$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Telemetry$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.Telemetry', [\n            {\n                no: 1,\n                name: 'connection_time_seconds',\n                kind: 'scalar',\n                oneof: 'data',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 2,\n                name: 'reconnection',\n                kind: 'message',\n                oneof: 'data',\n                T: ()=>Reconnection\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Telemetry\n */ const Telemetry = new Telemetry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendStatsRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'subscriber_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'publisher_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'webrtc_version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: 'sdk',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: 'sdk_version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'audio_devices',\n                kind: 'message',\n                T: ()=>InputDevices\n            },\n            {\n                no: 8,\n                name: 'video_devices',\n                kind: 'message',\n                T: ()=>InputDevices\n            },\n            {\n                no: 9,\n                name: 'android',\n                kind: 'message',\n                oneof: 'deviceState',\n                T: ()=>AndroidState\n            },\n            {\n                no: 10,\n                name: 'apple',\n                kind: 'message',\n                oneof: 'deviceState',\n                T: ()=>AppleState\n            },\n            {\n                no: 11,\n                name: 'telemetry',\n                kind: 'message',\n                T: ()=>Telemetry\n            },\n            {\n                no: 12,\n                name: 'rtmp',\n                kind: 'message',\n                T: ()=>RTMPIngress\n            },\n            {\n                no: 13,\n                name: 'subscriber_rtc_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 14,\n                name: 'publisher_rtc_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 15,\n                name: 'rtc_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 16,\n                name: 'encode_stats',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>PerformanceStats\n            },\n            {\n                no: 17,\n                name: 'decode_stats',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>PerformanceStats\n            },\n            {\n                no: 18,\n                name: 'unified_session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */ const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendStatsResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */ const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.ICERestartRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */ const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.ICERestartResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */ const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateMuteStatesRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'mute_states',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackMuteState\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */ const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateMuteStatesResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */ const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.TrackMuteState', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */ const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.AudioMuteChanged', [\n            {\n                no: 1,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */ new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.VideoMuteChanged', [\n            {\n                no: 2,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */ new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateSubscriptionsRequest', [\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'tracks',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */ const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateSubscriptionsResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */ const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.TrackSubscriptionDetails', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */ const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendAnswerRequest', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */ const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendAnswerResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */ const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.ICETrickleResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */ const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SetPublisherRequest', [\n            {\n                no: 1,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'tracks',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackInfo\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */ const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SetPublisherResponse', [\n            {\n                no: 1,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'ice_restart',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */ const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */ const SignalServer = new _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_8__.ServiceType('stream.video.sfu.signal.SignalServer', [\n    {\n        name: 'SetPublisher',\n        options: {},\n        I: SetPublisherRequest,\n        O: SetPublisherResponse\n    },\n    {\n        name: 'SendAnswer',\n        options: {},\n        I: SendAnswerRequest,\n        O: SendAnswerResponse\n    },\n    {\n        name: 'IceTrickle',\n        options: {},\n        I: ICETrickle$1,\n        O: ICETrickleResponse\n    },\n    {\n        name: 'UpdateSubscriptions',\n        options: {},\n        I: UpdateSubscriptionsRequest,\n        O: UpdateSubscriptionsResponse\n    },\n    {\n        name: 'UpdateMuteStates',\n        options: {},\n        I: UpdateMuteStatesRequest,\n        O: UpdateMuteStatesResponse\n    },\n    {\n        name: 'IceRestart',\n        options: {},\n        I: ICERestartRequest,\n        O: ICERestartResponse\n    },\n    {\n        name: 'SendStats',\n        options: {},\n        I: SendStatsRequest,\n        O: SendStatsResponse\n    },\n    {\n        name: 'StartNoiseCancellation',\n        options: {},\n        I: StartNoiseCancellationRequest,\n        O: StartNoiseCancellationResponse\n    },\n    {\n        name: 'StopNoiseCancellation',\n        options: {},\n        I: StopNoiseCancellationRequest,\n        O: StopNoiseCancellationResponse\n    }\n]);\n// @generated by protobuf-ts 2.10.0 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/event/events.proto\" (package \"stream.video.sfu.event\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.SfuEvent', [\n            {\n                no: 1,\n                name: 'subscriber_offer',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>SubscriberOffer\n            },\n            {\n                no: 2,\n                name: 'publisher_answer',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>PublisherAnswer\n            },\n            {\n                no: 3,\n                name: 'connection_quality_changed',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ConnectionQualityChanged\n            },\n            {\n                no: 4,\n                name: 'audio_level_changed',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>AudioLevelChanged\n            },\n            {\n                no: 5,\n                name: 'ice_trickle',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ICETrickle$1\n            },\n            {\n                no: 6,\n                name: 'change_publish_quality',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ChangePublishQuality\n            },\n            {\n                no: 10,\n                name: 'participant_joined',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantJoined\n            },\n            {\n                no: 11,\n                name: 'participant_left',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantLeft\n            },\n            {\n                no: 12,\n                name: 'dominant_speaker_changed',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>DominantSpeakerChanged\n            },\n            {\n                no: 13,\n                name: 'join_response',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>JoinResponse\n            },\n            {\n                no: 14,\n                name: 'health_check_response',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>HealthCheckResponse\n            },\n            {\n                no: 16,\n                name: 'track_published',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>TrackPublished\n            },\n            {\n                no: 17,\n                name: 'track_unpublished',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>TrackUnpublished\n            },\n            {\n                no: 18,\n                name: 'error',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>Error$1\n            },\n            {\n                no: 19,\n                name: 'call_grants_updated',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>CallGrantsUpdated\n            },\n            {\n                no: 20,\n                name: 'go_away',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>GoAway\n            },\n            {\n                no: 21,\n                name: 'ice_restart',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ICERestart\n            },\n            {\n                no: 22,\n                name: 'pins_updated',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>PinsChanged\n            },\n            {\n                no: 23,\n                name: 'call_ended',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>CallEnded\n            },\n            {\n                no: 24,\n                name: 'participant_updated',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantUpdated\n            },\n            {\n                no: 25,\n                name: 'participant_migration_complete',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantMigrationComplete\n            },\n            {\n                no: 27,\n                name: 'change_publish_options',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ChangePublishOptions\n            },\n            {\n                no: 28,\n                name: 'inbound_state_notification',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>InboundStateNotification\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */ const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptions$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ChangePublishOptions', [\n            {\n                no: 1,\n                name: 'publish_options',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>PublishOption\n            },\n            {\n                no: 2,\n                name: 'reason',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptions\n */ const ChangePublishOptions = new ChangePublishOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptionsComplete$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ChangePublishOptionsComplete', []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptionsComplete\n */ const ChangePublishOptionsComplete = new ChangePublishOptionsComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantMigrationComplete$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantMigrationComplete', []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantMigrationComplete\n */ const ParticipantMigrationComplete = new ParticipantMigrationComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.PinsChanged', [\n            {\n                no: 1,\n                name: 'pins',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */ const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.Error', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            },\n            {\n                no: 5,\n                name: 'reconnect_strategy',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.WebsocketReconnectStrategy',\n                        WebsocketReconnectStrategy,\n                        'WEBSOCKET_RECONNECT_STRATEGY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */ const Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ICETrickle', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'ice_candidate',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */ const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ICERestart', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */ const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.SfuRequest', [\n            {\n                no: 1,\n                name: 'join_request',\n                kind: 'message',\n                oneof: 'requestPayload',\n                T: ()=>JoinRequest\n            },\n            {\n                no: 2,\n                name: 'health_check_request',\n                kind: 'message',\n                oneof: 'requestPayload',\n                T: ()=>HealthCheckRequest\n            },\n            {\n                no: 3,\n                name: 'leave_call_request',\n                kind: 'message',\n                oneof: 'requestPayload',\n                T: ()=>LeaveCallRequest\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */ const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeaveCallRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.LeaveCallRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'reason',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.LeaveCallRequest\n */ const LeaveCallRequest = new LeaveCallRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.HealthCheckRequest', []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */ const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.HealthCheckResponse', [\n            {\n                no: 1,\n                name: 'participant_count',\n                kind: 'message',\n                T: ()=>ParticipantCount\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */ const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.TrackPublished', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */ const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.TrackUnpublished', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'cause',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackUnpublishReason',\n                        TrackUnpublishReason,\n                        'TRACK_UNPUBLISH_REASON_'\n                    ]\n            },\n            {\n                no: 5,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */ const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.JoinRequest', [\n            {\n                no: 1,\n                name: 'token',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'subscriber_sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 8,\n                name: 'publisher_sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'client_details',\n                kind: 'message',\n                T: ()=>ClientDetails\n            },\n            {\n                no: 5,\n                name: 'migration',\n                kind: 'message',\n                T: ()=>Migration\n            },\n            {\n                no: 6,\n                name: 'fast_reconnect',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 7,\n                name: 'reconnect_details',\n                kind: 'message',\n                T: ()=>ReconnectDetails\n            },\n            {\n                no: 9,\n                name: 'preferred_publish_options',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>PublishOption\n            },\n            {\n                no: 10,\n                name: 'preferred_subscribe_options',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>SubscribeOption\n            },\n            {\n                no: 11,\n                name: 'capabilities',\n                kind: 'enum',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        'stream.video.sfu.models.ClientCapability',\n                        ClientCapability,\n                        'CLIENT_CAPABILITY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */ const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReconnectDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ReconnectDetails', [\n            {\n                no: 1,\n                name: 'strategy',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.WebsocketReconnectStrategy',\n                        WebsocketReconnectStrategy,\n                        'WEBSOCKET_RECONNECT_STRATEGY_'\n                    ]\n            },\n            {\n                no: 3,\n                name: 'announced_tracks',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 4,\n                name: 'subscriptions',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            },\n            {\n                no: 5,\n                name: 'reconnect_attempt',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: 'from_sfu_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'previous_session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 8,\n                name: 'reason',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ReconnectDetails\n */ const ReconnectDetails = new ReconnectDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.Migration', [\n            {\n                no: 1,\n                name: 'from_sfu_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'announced_tracks',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 3,\n                name: 'subscriptions',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */ const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.JoinResponse', [\n            {\n                no: 1,\n                name: 'call_state',\n                kind: 'message',\n                T: ()=>CallState$1\n            },\n            {\n                no: 2,\n                name: 'reconnected',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: 'fast_reconnect_deadline_seconds',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: 'publish_options',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>PublishOption\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */ const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantJoined', [\n            {\n                no: 1,\n                name: 'call_cid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */ const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantLeft', [\n            {\n                no: 1,\n                name: 'call_cid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */ const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantUpdated', [\n            {\n                no: 1,\n                name: 'call_cid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */ const ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.SubscriberOffer', [\n            {\n                no: 1,\n                name: 'ice_restart',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */ const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.PublisherAnswer', [\n            {\n                no: 1,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */ const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ConnectionQualityChanged', [\n            {\n                no: 1,\n                name: 'connection_quality_updates',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>ConnectionQualityInfo\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */ const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ConnectionQualityInfo', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'connection_quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.ConnectionQuality',\n                        ConnectionQuality,\n                        'CONNECTION_QUALITY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */ const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.DominantSpeakerChanged', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */ const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.AudioLevel', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'level',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: 'is_speaking',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */ const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.AudioLevelChanged', [\n            {\n                no: 1,\n                name: 'audio_levels',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>AudioLevel\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */ const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.AudioSender', [\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'publish_option_id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */ const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.VideoLayerSetting', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'active',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: 'max_bitrate',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: 'scale_resolution_down_by',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 6,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 7,\n                name: 'max_framerate',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 8,\n                name: 'scalability_mode',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */ const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.VideoSender', [\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'layers',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>VideoLayerSetting\n            },\n            {\n                no: 4,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 5,\n                name: 'publish_option_id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */ const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ChangePublishQuality', [\n            {\n                no: 1,\n                name: 'audio_senders',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>AudioSender\n            },\n            {\n                no: 2,\n                name: 'video_senders',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>VideoSender\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */ const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.CallGrantsUpdated', [\n            {\n                no: 1,\n                name: 'current_grants',\n                kind: 'message',\n                T: ()=>CallGrants\n            },\n            {\n                no: 2,\n                name: 'message',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */ const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.GoAway', [\n            {\n                no: 1,\n                name: 'reason',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.GoAwayReason',\n                        GoAwayReason,\n                        'GO_AWAY_REASON_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */ const GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.CallEnded', [\n            {\n                no: 1,\n                name: 'reason',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.CallEndedReason',\n                        CallEndedReason,\n                        'CALL_ENDED_REASON_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */ const CallEnded = new CallEnded$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InboundStateNotification$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.InboundStateNotification', [\n            {\n                no: 1,\n                name: 'inbound_video_states',\n                kind: 'message',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: ()=>InboundVideoState\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.InboundStateNotification\n */ const InboundStateNotification = new InboundStateNotification$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InboundVideoState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.InboundVideoState', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'paused',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.InboundVideoState\n */ const InboundVideoState = new InboundVideoState$Type();\nvar events = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AudioLevel: AudioLevel,\n    AudioLevelChanged: AudioLevelChanged,\n    AudioSender: AudioSender,\n    CallEnded: CallEnded,\n    CallGrantsUpdated: CallGrantsUpdated,\n    ChangePublishOptions: ChangePublishOptions,\n    ChangePublishOptionsComplete: ChangePublishOptionsComplete,\n    ChangePublishQuality: ChangePublishQuality,\n    ConnectionQualityChanged: ConnectionQualityChanged,\n    ConnectionQualityInfo: ConnectionQualityInfo,\n    DominantSpeakerChanged: DominantSpeakerChanged,\n    Error: Error$1,\n    GoAway: GoAway,\n    HealthCheckRequest: HealthCheckRequest,\n    HealthCheckResponse: HealthCheckResponse,\n    ICERestart: ICERestart,\n    ICETrickle: ICETrickle,\n    InboundStateNotification: InboundStateNotification,\n    InboundVideoState: InboundVideoState,\n    JoinRequest: JoinRequest,\n    JoinResponse: JoinResponse,\n    LeaveCallRequest: LeaveCallRequest,\n    Migration: Migration,\n    ParticipantJoined: ParticipantJoined,\n    ParticipantLeft: ParticipantLeft,\n    ParticipantMigrationComplete: ParticipantMigrationComplete,\n    ParticipantUpdated: ParticipantUpdated,\n    PinsChanged: PinsChanged,\n    PublisherAnswer: PublisherAnswer,\n    ReconnectDetails: ReconnectDetails,\n    SfuEvent: SfuEvent,\n    SfuRequest: SfuRequest,\n    SubscriberOffer: SubscriberOffer,\n    TrackPublished: TrackPublished,\n    TrackUnpublished: TrackUnpublished,\n    VideoLayerSetting: VideoLayerSetting,\n    VideoSender: VideoSender\n});\nvar VisibilityState;\n(function(VisibilityState) {\n    VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n    VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n    VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function(DebounceType) {\n    DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n    DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n    DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n    DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */ class SignalServerClient {\n    constructor(_transport){\n        this._transport = _transport;\n        this.typeName = SignalServer.typeName;\n        this.methods = SignalServer.methods;\n        this.options = SignalServer.options;\n    }\n    /**\n     * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n     *\n     * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n     */ setPublisher(input, options) {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * answer is sent by the client to the SFU after receiving a subscriber_offer.\n     *\n     * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n     */ sendAnswer(input, options) {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * SendICECandidate sends an ICE candidate to the client\n     *\n     * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n     */ iceTrickle(input, options) {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n     * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n     *\n     * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n     */ updateSubscriptions(input, options) {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n     */ updateMuteStates(input, options) {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n     */ iceRestart(input, options) {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n     */ sendStats(input, options) {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n     */ startNoiseCancellation(input, options) {\n        const method = this.methods[7], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n     */ stopNoiseCancellation(input, options) {\n        const method = this.methods[8], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n}\nconst defaultOptions = {\n    baseUrl: '',\n    sendJson: true,\n    timeout: 5 * 1000,\n    jsonOptions: {\n        ignoreUnknownFields: true\n    }\n};\nconst withHeaders = (headers)=>{\n    return {\n        interceptUnary (next, method, input, options) {\n            options.meta = {\n                ...options.meta,\n                ...headers\n            };\n            return next(method, input, options);\n        }\n    };\n};\nconst withRequestLogger = (logger, level)=>{\n    return {\n        interceptUnary: (next, method, input, options)=>{\n            const invocation = next(method, input, options);\n            logger(level, `Invoked SFU RPC method ${method.name}`, {\n                request: invocation.request,\n                headers: invocation.requestHeaders,\n                response: invocation.response\n            });\n            return invocation;\n        }\n    };\n};\nconst withRequestTracer = (trace)=>{\n    const traceError = (name, input, err)=>trace(`${name}OnFailure`, [\n            err,\n            input\n        ]);\n    const exclusions = {\n        SendStats: true\n    };\n    return {\n        interceptUnary (next, method, input, options) {\n            if (exclusions[method.name]) {\n                return next(method, input, options);\n            }\n            trace(method.name, input);\n            const unaryCall = next(method, input, options);\n            unaryCall.then((invocation)=>{\n                const err = invocation.response?.error;\n                if (err) traceError(method.name, input, err);\n            }, (err)=>traceError(method.name, input, err));\n            return unaryCall;\n        }\n    };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */ const createSignalClient = (options)=>{\n    const transport = new _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_10__.TwirpFetchTransport({\n        ...defaultOptions,\n        ...options\n    });\n    return new SignalServerClient(transport);\n};\nconst sleep = (m)=>new Promise((r)=>setTimeout(r, m));\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */ const KnownCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + numberOfFailures * 2000, 5000);\n    const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction hex(bytes) {\n    let s = '';\n    for(let i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, '0');\n    }\n    return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    const bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return [\n        hex(bytes.subarray(0, 4)),\n        hex(bytes.subarray(4, 6)),\n        hex(bytes.subarray(6, 8)),\n        hex(bytes.subarray(8, 10)),\n        hex(bytes.subarray(10, 16))\n    ].join('-');\n}\nconst getRandomValues = (()=>{\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n        return crypto.getRandomValues.bind(crypto);\n    }\n    return function getRandomValuesWithMathRandom(bytes) {\n        const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n        for(let i = 0; i < bytes.length; i++){\n            bytes[i] = Math.random() * max;\n        }\n    };\n})();\nfunction getRandomBytes(length) {\n    const bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\n// Type guards to check WebSocket error type\nfunction isCloseEvent(res) {\n    return res.code !== undefined;\n}\n/**\n * Checks whether we are using React Native\n */ const isReactNative = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n});\nlet logger;\nlet level = 'info';\nconst logToConsole = (logLevel, message, ...args)=>{\n    let logMethod;\n    switch(logLevel){\n        case 'error':\n            if (isReactNative()) {\n                message = `ERROR: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.error;\n            break;\n        case 'warn':\n            if (isReactNative()) {\n                message = `WARN: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.warn;\n            break;\n        case 'info':\n            logMethod = console.info;\n            break;\n        case 'trace':\n            logMethod = console.trace;\n            break;\n        default:\n            logMethod = console.log;\n            break;\n    }\n    logMethod(message, ...args);\n};\nconst setLogger = (l, lvl)=>{\n    logger = l;\n    if (lvl) {\n        setLogLevel(lvl);\n    }\n};\nconst setLogLevel = (l)=>{\n    level = l;\n};\nconst getLogLevel = ()=>level;\nconst getLogger = (withTags)=>{\n    const loggerMethod = logger || logToConsole;\n    const tags = (withTags || []).filter(Boolean).join(':');\n    const result = (logLevel, message, ...args)=>{\n        if (logLevels[logLevel] >= logLevels[level]) {\n            loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n        }\n    };\n    return result;\n};\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * For each retry, there would be a delay to avoid request bursts toward the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param signal the signal to abort the RPC call and retries loop.\n */ const retryable = async (rpc, signal)=>{\n    let attempt = 0;\n    let result = undefined;\n    do {\n        if (attempt > 0) await sleep(retryInterval(attempt));\n        try {\n            result = await rpc();\n        } catch (err) {\n            const isRequestCancelled = err instanceof _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.RpcError && err.code === _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__.TwirpErrorCode[_protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__.TwirpErrorCode.cancelled];\n            const isAborted = signal?.aborted ?? false;\n            if (isRequestCancelled || isAborted) throw err;\n            getLogger([\n                'sfu-client',\n                'rpc'\n            ])('debug', `rpc failed (${attempt})`, err);\n            attempt++;\n        }\n    }while (!result || result.response.error?.shouldRetry);\n    return result;\n};\n/**\n * Returns a generic SDP for the given direction.\n * We use this SDP to send it as part of our JoinRequest so that the SFU\n * can use it to determine the client's codec capabilities.\n *\n * @param direction the direction of the transceiver.\n */ const getGenericSdp = async (direction)=>{\n    const tempPc = new RTCPeerConnection();\n    tempPc.addTransceiver('video', {\n        direction\n    });\n    tempPc.addTransceiver('audio', {\n        direction\n    });\n    const offer = await tempPc.createOffer();\n    const sdp = offer.sdp ?? '';\n    tempPc.getTransceivers().forEach((t)=>{\n        t.stop?.();\n    });\n    tempPc.close();\n    return sdp;\n};\n/**\n * Returns whether the codec is an SVC codec.\n *\n * @param codecOrMimeType the codec to check.\n */ const isSvcCodec = (codecOrMimeType)=>{\n    if (!codecOrMimeType) return false;\n    codecOrMimeType = codecOrMimeType.toLowerCase();\n    return codecOrMimeType === 'vp9' || codecOrMimeType === 'av1' || codecOrMimeType === 'video/vp9' || codecOrMimeType === 'video/av1';\n};\nconst sfuEventKinds = {\n    subscriberOffer: undefined,\n    publisherAnswer: undefined,\n    connectionQualityChanged: undefined,\n    audioLevelChanged: undefined,\n    iceTrickle: undefined,\n    changePublishQuality: undefined,\n    participantJoined: undefined,\n    participantLeft: undefined,\n    dominantSpeakerChanged: undefined,\n    joinResponse: undefined,\n    healthCheckResponse: undefined,\n    trackPublished: undefined,\n    trackUnpublished: undefined,\n    error: undefined,\n    callGrantsUpdated: undefined,\n    goAway: undefined,\n    iceRestart: undefined,\n    pinsUpdated: undefined,\n    callEnded: undefined,\n    participantUpdated: undefined,\n    participantMigrationComplete: undefined,\n    changePublishOptions: undefined,\n    inboundStateNotification: undefined\n};\nconst isSfuEvent = (eventName)=>{\n    return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n    constructor(){\n        this.logger = getLogger([\n            'Dispatcher'\n        ]);\n        this.subscribers = {};\n        this.dispatch = (message, tag = '0')=>{\n            const eventKind = message.eventPayload.oneofKind;\n            if (!eventKind) return;\n            const payload = message.eventPayload[eventKind];\n            this.logger('debug', `Dispatching ${eventKind}, tag=${tag}`, payload);\n            const listeners = this.subscribers[eventKind];\n            if (!listeners) return;\n            for (const fn of listeners){\n                try {\n                    fn(payload);\n                } catch (e) {\n                    this.logger('warn', 'Listener failed with error', e);\n                }\n            }\n        };\n        this.on = (eventName, fn)=>{\n            var _a;\n            ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        this.off = (eventName, fn)=>{\n            this.subscribers[eventName] = (this.subscribers[eventName] || []).filter((f)=>f !== fn);\n        };\n    }\n}\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */ class IceTrickleBuffer {\n    constructor(){\n        this.subscriberCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.ReplaySubject();\n        this.publisherCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.ReplaySubject();\n        this.push = (iceTrickle)=>{\n            const iceCandidate = toIceCandidate(iceTrickle);\n            if (!iceCandidate) return;\n            if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n                this.subscriberCandidates.next(iceCandidate);\n            } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n                this.publisherCandidates.next(iceCandidate);\n            } else {\n                const logger = getLogger([\n                    'sfu-client'\n                ]);\n                logger('warn', `ICETrickle, Unknown peer type`, iceTrickle);\n            }\n        };\n        this.dispose = ()=>{\n            this.subscriberCandidates.complete();\n            this.publisherCandidates.complete();\n        };\n    }\n}\nconst toIceCandidate = (iceTrickle)=>{\n    try {\n        return JSON.parse(iceTrickle.iceCandidate);\n    } catch (e) {\n        const logger = getLogger([\n            'sfu-client'\n        ]);\n        logger('error', `Failed to parse ICE Trickle`, e, iceTrickle);\n        return undefined;\n    }\n};\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */ const withoutConcurrency = createRunner(wrapWithContinuationTracking);\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */ const withCancellation = createRunner(wrapWithCancellation);\nconst pendingPromises = new Map();\nfunction hasPending(tag) {\n    return pendingPromises.has(tag);\n}\nasync function settled(tag) {\n    let pending;\n    while(pending = pendingPromises.get(tag)){\n        await pending.promise;\n    }\n}\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */ function createRunner(wrapper) {\n    return function run(tag, cb) {\n        const { cb: wrapped, onContinued } = wrapper(tag, cb);\n        const pending = pendingPromises.get(tag);\n        pending?.onContinued();\n        const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n        pendingPromises.set(tag, {\n            promise,\n            onContinued\n        });\n        return promise;\n    };\n}\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */ function wrapWithContinuationTracking(tag, cb) {\n    let hasContinuation = false;\n    const wrapped = ()=>cb().finally(()=>{\n            if (!hasContinuation) {\n                pendingPromises.delete(tag);\n            }\n        });\n    const onContinued = ()=>hasContinuation = true;\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Wraps an async function with additional functionalilty:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n */ function wrapWithCancellation(tag, cb) {\n    const ac = new AbortController();\n    const wrapped = ()=>{\n        if (ac.signal.aborted) {\n            return Promise.resolve('canceled');\n        }\n        return cb(ac.signal).finally(()=>{\n            if (!ac.signal.aborted) {\n                pendingPromises.delete(tag);\n            }\n        });\n    };\n    const onContinued = ()=>ac.abort();\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */ const isFunctionPatch = (update)=>typeof update === 'function';\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */ const getCurrentValue = (observable$)=>{\n    let value;\n    let err = undefined;\n    (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n        observable$\n    ]).subscribe({\n        next: ([v])=>{\n            value = v;\n        },\n        error: (e)=>{\n            err = e;\n        }\n    }).unsubscribe();\n    if (err) throw err;\n    return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */ const setCurrentValue = (subject, update)=>{\n    const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n    subject.next(next);\n    return next;\n};\n/**\n * Updates the value of the provided Subject and returns the previous value\n * and a function to roll back the update.\n * This is useful when you want to optimistically update a value\n * and roll back the update if an error occurs.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n */ const updateValue = (subject, update)=>{\n    const lastValue = subject.getValue();\n    const value = setCurrentValue(subject, update);\n    return {\n        lastValue,\n        value,\n        rollback: ()=>setCurrentValue(subject, lastValue)\n    };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n * @param onError an optional error handler.\n */ const createSubscription = (observable, handler, onError = (error)=>getLogger([\n        'RxUtils'\n    ])('warn', 'An observable emitted an error', error))=>{\n    const subscription = observable.subscribe({\n        next: handler,\n        error: onError\n    });\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe. Makes sure that\n * only one async handler runs at the same time. If updates come in quicker than\n * it takes for the current handler to finish, other handlers will wait.\n *\n * @param observable the observable to subscribe to.\n * @param handler the async handler to call when the observable emits a value.\n */ const createSafeAsyncSubscription = (observable, handler)=>{\n    const tag = Symbol();\n    return createSubscription(observable, (value)=>{\n        withoutConcurrency(tag, ()=>handler(value));\n    });\n};\nvar rxUtils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createSafeAsyncSubscription: createSafeAsyncSubscription,\n    createSubscription: createSubscription,\n    getCurrentValue: getCurrentValue,\n    setCurrentValue: setCurrentValue,\n    updateValue: updateValue\n});\n/**\n * Represents the state of the current call.\n */ var CallingState;\n(function(CallingState) {\n    /**\n     * The call is in an unknown state.\n     */ CallingState[\"UNKNOWN\"] = \"unknown\";\n    /**\n     * The call is in an idle state.\n     */ CallingState[\"IDLE\"] = \"idle\";\n    /**\n     * The call is in the process of ringing.\n     * (User hasn't accepted nor rejected the call yet.)\n     */ CallingState[\"RINGING\"] = \"ringing\";\n    /**\n     * The call is in the process of joining.\n     */ CallingState[\"JOINING\"] = \"joining\";\n    /**\n     * The call is currently active.\n     */ CallingState[\"JOINED\"] = \"joined\";\n    /**\n     * The call has been left.\n     */ CallingState[\"LEFT\"] = \"left\";\n    /**\n     * The call is in the process of reconnecting.\n     */ CallingState[\"RECONNECTING\"] = \"reconnecting\";\n    /**\n     * The call is in the process of migrating from one node to another.\n     */ CallingState[\"MIGRATING\"] = \"migrating\";\n    /**\n     * The call has failed to reconnect.\n     */ CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n    /**\n     * The call is in offline mode.\n     */ CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\nclass StreamVideoWriteableStateStore {\n    constructor(){\n        /**\n         * A store keeping data of a successfully connected user over WS to the coordinator server.\n         */ this.connectedUserSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        /**\n         * A list of {@link Call} objects created/tracked by this client.\n         */ this.callsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject([]);\n        /**\n         * Sets the currently connected user.\n         *\n         * @internal\n         * @param user the user to set as connected.\n         */ this.setConnectedUser = (user)=>{\n            return setCurrentValue(this.connectedUserSubject, user);\n        };\n        /**\n         * Sets the list of {@link Call} objects created/tracked by this client.\n         * @param calls\n         */ this.setCalls = (calls)=>{\n            return setCurrentValue(this.callsSubject, calls);\n        };\n        /**\n         * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to add.\n         */ this.registerCall = (call)=>{\n            if (!this.calls.find((c)=>c.cid === call.cid)) {\n                this.setCalls((calls)=>[\n                        ...calls,\n                        call\n                    ]);\n            }\n        };\n        /**\n         * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to remove\n         */ this.unregisterCall = (call)=>{\n            const logger = getLogger([\n                'client-state'\n            ]);\n            logger('trace', `Unregistering call: ${call.cid}`);\n            return this.setCalls((calls)=>calls.filter((c)=>c !== call));\n        };\n        /**\n         * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param type the type of call to find.\n         * @param id the id of the call to find.\n         */ this.findCall = (type, id)=>{\n            return this.calls.find((c)=>c.type === type && c.id === id);\n        };\n        this.connectedUserSubject.subscribe(async (user)=>{\n            // leave all calls when the user disconnects.\n            if (!user) {\n                const logger = getLogger([\n                    'client-state'\n                ]);\n                for (const call of this.calls){\n                    if (call.state.callingState === CallingState.LEFT) continue;\n                    logger('info', `User disconnected, leaving call: ${call.cid}`);\n                    await call.leave({\n                        message: 'client.disconnectUser() called'\n                    }).catch((err)=>{\n                        logger('error', `Error leaving call: ${call.cid}`, err);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * The currently connected user.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUserSubject);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.callsSubject);\n    }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */ class StreamVideoReadOnlyStateStore {\n    constructor(store){\n        // convert and expose subjects as observables\n        this.connectedUser$ = store.connectedUserSubject.asObservable();\n        this.calls$ = store.callsSubject.asObservable();\n    }\n    /**\n     * The current user connected over WS to the backend.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUser$);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.calls$);\n    }\n}\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */ const combineComparators = (...comparators)=>{\n    return (a, b)=>{\n        for (const comparator of comparators){\n            const result = comparator(a, b);\n            if (result !== 0) return result;\n        }\n        return 0;\n    };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */ const descending = (comparator)=>{\n    return (a, b)=>comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */ const conditional = (predicate)=>{\n    return (comparator)=>{\n        return (a, b)=>{\n            if (!predicate(a, b)) return 0;\n            return comparator(a, b);\n        };\n    };\n};\n/**\n * A no-op comparator which always returns 0.\n */ const noopComparator = ()=>{\n    return ()=>0;\n};\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */ const hasVideo = (p)=>p.publishedTracks.includes(TrackType.VIDEO);\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */ const hasAudio = (p)=>p.publishedTracks.includes(TrackType.AUDIO);\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */ const hasScreenShare = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */ const hasScreenShareAudio = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */ const isPinned = (p)=>!!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n/**\n * Check if a participant has a paused track of the specified type.\n *\n * @param p the participant to check.\n * @param videoTrackType the type of video track to check for ('videoTrack' or 'screenShareTrack').\n */ const hasPausedTrack = (p, videoTrackType)=>{\n    if (!p.pausedTracks) return false;\n    const trackType = videoTrackType === 'videoTrack' ? TrackType.VIDEO : videoTrackType === 'screenShareTrack' ? TrackType.SCREEN_SHARE : undefined;\n    if (!trackType) return false;\n    return p.pausedTracks.includes(trackType);\n};\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const dominantSpeaker = (a, b)=>{\n    if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n    if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const speaking = (a, b)=>{\n    if (a.isSpeaking && !b.isSpeaking) return -1;\n    if (!a.isSpeaking && b.isSpeaking) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const screenSharing = (a, b)=>{\n    if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n    if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingVideo = (a, b)=>{\n    if (hasVideo(a) && !hasVideo(b)) return -1;\n    if (!hasVideo(a) && hasVideo(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingAudio = (a, b)=>{\n    if (hasAudio(a) && !hasAudio(b)) return -1;\n    if (!hasAudio(a) && hasAudio(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const pinned = (a, b)=>{\n    if (a.pin && b.pin) {\n        if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n        if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n        if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n        if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n    }\n    if (a.pin && !b.pin) return -1;\n    if (!a.pin && b.pin) return 1;\n    return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */ const reactionType = (type)=>{\n    return (a, b)=>{\n        if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n        if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n        return 0;\n    };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */ const role = (...roles)=>(a, b)=>{\n        if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n        if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n        return 0;\n    };\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const name = (a, b)=>{\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n};\nconst hasAnyRole = (p, roles)=>(p.roles || []).some((r)=>roles.includes(r));\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */ const ifInvisibleOrUnknownBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */ const defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */ const speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */ const paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */ const livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)), role('admin', 'host', 'speaker'));\n/**\n * Returns the default egress object - when no egress data is available.\n */ const defaultEgress = {\n    broadcasting: false,\n    hls: {\n        playlist_url: '',\n        status: ''\n    },\n    rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */ class CallState {\n    /**\n     * Creates a new instance of the CallState class.\n     *\n     */ constructor(){\n        this.backstageSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(true);\n        this.blockedUserIdsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject([]);\n        this.createdAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(new Date());\n        this.endedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.startsAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.updatedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(new Date());\n        this.createdBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.customSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject({});\n        this.egressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.ingressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.recordingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(false);\n        this.sessionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.transcribingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(false);\n        this.captioningSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(false);\n        this.endedBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.thumbnailsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.membersSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject([]);\n        this.ownCapabilitiesSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject([]);\n        this.callingStateSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(CallingState.UNKNOWN);\n        this.startedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.participantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(0);\n        this.anonymousParticipantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(0);\n        this.participantsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject([]);\n        this.callStatsReportSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.closedCaptionsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject([]);\n        // These are tracks that were delivered to the Subscriber's onTrack event\n        // that we couldn't associate with a participant yet.\n        // This happens when the participantJoined event hasn't been received yet.\n        // We keep these tracks around until we can associate them with a participant.\n        this.orphanedTracks = [];\n        this.logger = getLogger([\n            'CallState'\n        ]);\n        /**\n         * A list of comparators that are used to sort the participants.\n         */ this.sortParticipantsBy = defaultSortPreset;\n        this.closedCaptionsTasks = new Map();\n        /**\n         * Runs the cleanup tasks.\n         */ this.dispose = ()=>{\n            for (const [ccKey, taskId] of this.closedCaptionsTasks.entries()){\n                clearTimeout(taskId);\n                this.closedCaptionsTasks.delete(ccKey);\n            }\n        };\n        /**\n         * Sets the list of criteria that are used to sort the participants.\n         * To disable sorting, you can pass `noopComparator()`.\n         *\n         * @param comparator the comparator to use to sort the participants.\n         */ this.setSortParticipantsBy = (comparator)=>{\n            this.sortParticipantsBy = comparator;\n            // trigger re-sorting of participants\n            this.setCurrentValue(this.participantsSubject, (ps)=>ps);\n        };\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the number of participants in the current call.\n         *\n         * @internal\n         * @param count the number of participants.\n         */ this.setParticipantCount = (count)=>{\n            return this.setCurrentValue(this.participantCountSubject, count);\n        };\n        /**\n         * Sets the time the call session actually started.\n         *\n         * @internal\n         * @param startedAt the time the call session actually started.\n         */ this.setStartedAt = (startedAt)=>{\n            return this.setCurrentValue(this.startedAtSubject, startedAt);\n        };\n        /**\n         * Sets the closed captioning state of the current call.\n         *\n         * @internal\n         * @param captioning the closed captioning state.\n         */ this.setCaptioning = (captioning)=>{\n            return updateValue(this.captioningSubject, captioning);\n        };\n        /**\n         * Sets the number of anonymous participants in the current call.\n         *\n         * @internal\n         * @param count the number of anonymous participants.\n         */ this.setAnonymousParticipantCount = (count)=>{\n            return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n        };\n        /**\n         * Sets the list of participants in the current call.\n         *\n         * @internal\n         *\n         * @param participants the list of participants.\n         */ this.setParticipants = (participants)=>{\n            return this.setCurrentValue(this.participantsSubject, participants);\n        };\n        /**\n         * Sets the calling state.\n         *\n         * @internal\n         * @param state the new calling state.\n         */ this.setCallingState = (state)=>{\n            return this.setCurrentValue(this.callingStateSubject, state);\n        };\n        /**\n         * Sets the call stats report.\n         *\n         * @internal\n         * @param report the report to set.\n         */ this.setCallStatsReport = (report)=>{\n            return this.setCurrentValue(this.callStatsReportSubject, report);\n        };\n        /**\n         * Sets the members of the current call.\n         *\n         * @internal\n         * @param members the members to set.\n         */ this.setMembers = (members)=>{\n            this.setCurrentValue(this.membersSubject, members);\n        };\n        /**\n         * Sets the own capabilities.\n         *\n         * @internal\n         * @param capabilities the capabilities to set.\n         */ this.setOwnCapabilities = (capabilities)=>{\n            return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n        };\n        /**\n         * Sets the backstage state.\n         * @param backstage the backstage state.\n         */ this.setBackstage = (backstage)=>{\n            return this.setCurrentValue(this.backstageSubject, backstage);\n        };\n        /**\n         * Sets the time when this call has been ended.\n         * @param endedAt the time when this call has been ended.\n         */ this.setEndedAt = (endedAt)=>{\n            return this.setCurrentValue(this.endedAtSubject, endedAt);\n        };\n        /**\n         * Will try to find the participant with the given sessionId in the current call.\n         *\n         * @param sessionId the sessionId of the participant to find.\n         * @returns the participant with the given sessionId or undefined if not found.\n         */ this.findParticipantBySessionId = (sessionId)=>{\n            return this.participants.find((p)=>p.sessionId === sessionId);\n        };\n        /**\n         * Returns a new lookup table of participants indexed by their session ID.\n         */ this.getParticipantLookupBySessionId = ()=>{\n            return this.participants.reduce((lookupTable, participant)=>{\n                lookupTable[participant.sessionId] = participant;\n                return lookupTable;\n            }, {});\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If the participant can't be found, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param patch the patch to apply to the participant.\n         * @returns the updated participant or `undefined` if the participant couldn't be found.\n         */ this.updateParticipant = (sessionId, patch)=>{\n            const participant = this.findParticipantBySessionId(sessionId);\n            if (!participant) {\n                this.logger('warn', `Participant with sessionId ${sessionId} not found`);\n                return;\n            }\n            const thePatch = typeof patch === 'function' ? patch(participant) : patch;\n            const updatedParticipant = {\n                ...participant,\n                ...thePatch\n            };\n            return this.setParticipants((participants)=>participants.map((p)=>p.sessionId === sessionId ? updatedParticipant : p));\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If a participant with matching `sessionId` can't be found, the provided\n         * `participant` is added to the list of participants.\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param participant the participant to update or add.\n         * @param patch an optional patch to apply to the participant.\n         */ this.updateOrAddParticipant = (sessionId, participant, patch)=>{\n            return this.setParticipants((participants)=>{\n                let add = true;\n                const nextParticipants = participants.map((p)=>{\n                    if (p.sessionId === sessionId) {\n                        add = false;\n                        const updated = {\n                            ...p,\n                            ...participant\n                        };\n                        const thePatch = typeof patch === 'function' ? patch(updated) : patch;\n                        return Object.assign(updated, thePatch);\n                    }\n                    return p;\n                });\n                if (add) nextParticipants.push(participant);\n                return nextParticipants;\n            });\n        };\n        /**\n         * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n         * If no patches are provided, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param patch the patch to apply to the participants.\n         * @returns all participants, with all patch applied.\n         */ this.updateParticipants = (patch)=>{\n            if (Object.keys(patch).length === 0) return this.participants;\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    const thePatch = patch[p.sessionId];\n                    if (thePatch) {\n                        return {\n                            ...p,\n                            ...thePatch\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Update track subscription configuration for one or more participants.\n         * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n         * You can only subscribe for tracks after the participant started publishing the given kind of track.\n         *\n         * @param trackType the kind of subscription to update.\n         * @param changes the list of subscription changes to do.\n         */ this.updateParticipantTracks = (trackType, changes)=>{\n            return this.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change])=>{\n                if (change.dimension) {\n                    change.dimension.height = Math.ceil(change.dimension.height);\n                    change.dimension.width = Math.ceil(change.dimension.width);\n                }\n                const prop = trackType === 'videoTrack' ? 'videoDimension' : trackType === 'screenShareTrack' ? 'screenShareDimension' : undefined;\n                if (prop) {\n                    acc[sessionId] = {\n                        [prop]: change.dimension\n                    };\n                }\n                return acc;\n            }, {}));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param event the video event that our backend sent us.\n         */ this.updateFromEvent = (event)=>{\n            const update = this.eventHandlers[event.type];\n            if (update) {\n                update(event);\n            }\n        };\n        /**\n         * Updates the participant pinned state with server side pinning data.\n         *\n         * @param pins the latest pins from the server.\n         */ this.setServerSidePins = (pins)=>{\n            const pinsLookup = pins.reduce((lookup, pin)=>{\n                lookup[pin.sessionId] = Date.now();\n                return lookup;\n            }, {});\n            return this.setParticipants((participants)=>participants.map((participant)=>{\n                    const serverSidePinnedAt = pinsLookup[participant.sessionId];\n                    // the participant is newly pinned\n                    if (serverSidePinnedAt) {\n                        return {\n                            ...participant,\n                            pin: {\n                                isLocalPin: false,\n                                pinnedAt: serverSidePinnedAt\n                            }\n                        };\n                    }\n                    // the participant is no longer pinned server side\n                    // we need to reset the pin\n                    if (participant.pin && !participant.pin.isLocalPin) {\n                        return {\n                            ...participant,\n                            pin: undefined\n                        };\n                    }\n                    // no changes to be applied\n                    return participant;\n                }));\n        };\n        /**\n         * Adds an orphaned track to the call state.\n         *\n         * @internal\n         *\n         * @param orphanedTrack the orphaned track to add.\n         */ this.registerOrphanedTrack = (orphanedTrack)=>{\n            this.orphanedTracks.push(orphanedTrack);\n        };\n        /**\n         * Removes an orphaned track from the call state.\n         *\n         * @internal\n         *\n         * @param id the ID of the orphaned track to remove.\n         */ this.removeOrphanedTrack = (id)=>{\n            this.orphanedTracks = this.orphanedTracks.filter((o)=>o.id !== id);\n        };\n        /**\n         * Takes all orphaned tracks with the given track lookup prefix.\n         * All orphaned tracks with the given track lookup prefix are removed from the call state.\n         *\n         * @internal\n         *\n         * @param trackLookupPrefix the track lookup prefix to match the orphaned tracks by.\n         */ this.takeOrphanedTracks = (trackLookupPrefix)=>{\n            const orphans = this.orphanedTracks.filter((orphan)=>orphan.trackLookupPrefix === trackLookupPrefix);\n            if (orphans.length > 0) {\n                this.orphanedTracks = this.orphanedTracks.filter((orphan)=>orphan.trackLookupPrefix !== trackLookupPrefix);\n            }\n            return orphans;\n        };\n        /**\n         * Updates the closed captions settings.\n         *\n         * @param config the new closed captions settings.\n         */ this.updateClosedCaptionSettings = (config)=>{\n            this.closedCaptionsSettings = {\n                ...this.closedCaptionsSettings,\n                ...config\n            };\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param call the call response from the server.\n         */ this.updateFromCallResponse = (call)=>{\n            this.setBackstage(call.backstage);\n            this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n            this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n            this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n            this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n            this.setEndedAt(call.ended_at ? new Date(call.ended_at) : undefined);\n            this.setCurrentValue(this.createdBySubject, call.created_by);\n            this.setCurrentValue(this.customSubject, call.custom);\n            this.setCurrentValue(this.egressSubject, call.egress);\n            this.setCurrentValue(this.ingressSubject, call.ingress);\n            this.setCurrentValue(this.recordingSubject, call.recording);\n            const s = this.setCurrentValue(this.sessionSubject, call.session);\n            this.updateParticipantCountFromSession(s);\n            this.setCurrentValue(this.settingsSubject, call.settings);\n            this.setCurrentValue(this.transcribingSubject, call.transcribing);\n            this.setCurrentValue(this.captioningSubject, call.captioning);\n            this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n        };\n        /**\n         * Updates the call state with the data received from the SFU server.\n         *\n         * @internal\n         *\n         * @param callState the call state from the SFU server.\n         * @param currentSessionId the session ID of the current user.\n         * @param reconnectDetails optional reconnect details.\n         */ this.updateFromSfuCallState = (callState, currentSessionId, reconnectDetails)=>{\n            const { participants, participantCount, startedAt, pins } = callState;\n            const localPublishedTracks = reconnectDetails?.announcedTracks.map((t)=>t.trackType) ?? [];\n            this.setParticipants(()=>{\n                const participantLookup = this.getParticipantLookupBySessionId();\n                return participants.map((p)=>{\n                    // We need to preserve the local state of the participant\n                    // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n                    // as it doesn't exist on the server.\n                    const existingParticipant = participantLookup[p.sessionId];\n                    const isLocalParticipant = p.sessionId === currentSessionId;\n                    return Object.assign({}, existingParticipant, p, {\n                        isLocalParticipant,\n                        publishedTracks: isLocalParticipant ? localPublishedTracks : p.publishedTracks,\n                        viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n                            videoTrack: VisibilityState.UNKNOWN,\n                            screenShareTrack: VisibilityState.UNKNOWN\n                        }\n                    });\n                });\n            });\n            this.setParticipantCount(participantCount?.total || 0);\n            this.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n            this.setStartedAt(startedAt ? Timestamp.toDate(startedAt) : new Date());\n            this.setServerSidePins(pins);\n        };\n        this.updateFromMemberRemoved = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.filter((m)=>event.members.indexOf(m.user_id) === -1));\n        };\n        this.updateFromMemberAdded = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>[\n                    ...members,\n                    ...event.members\n                ]);\n        };\n        this.updateFromHLSBroadcastStopped = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false,\n                    hls: {\n                        ...egress.hls,\n                        status: ''\n                    }\n                }));\n        };\n        this.updateFromHLSBroadcastingFailed = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false,\n                    hls: {\n                        ...egress.hls,\n                        status: ''\n                    }\n                }));\n        };\n        this.updateParticipantCountFromSession = (session)=>{\n            // when in JOINED state, we should use the participant count coming through\n            // the SFU healthcheck event, as it's more accurate.\n            if (!session || this.callingState === CallingState.JOINED) return;\n            const byRoleCount = Object.values(session.participants_count_by_role).reduce((total, countByRole)=>total + countByRole, 0);\n            const participantCount = Math.max(byRoleCount, session.participants.length);\n            this.setParticipantCount(participantCount);\n            this.setAnonymousParticipantCount(session.anonymous_participant_count || 0);\n        };\n        this.updateFromSessionParticipantCountUpdate = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                return {\n                    ...session,\n                    anonymous_participant_count: event.anonymous_participant_count,\n                    participants_count_by_role: event.participants_count_by_role\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantLeft = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                return {\n                    ...session,\n                    participants: participants.filter((p)=>p.user_session_id !== user_session_id),\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantJoined = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                // It could happen that the backend delivers the same participant more than once.\n                // Once with the call.session_started event and once again with the\n                // call.session_participant_joined event. In this case,\n                // we should update the existing participant and prevent duplicating it.\n                let shouldInsertParticipant = true;\n                const updatedParticipants = participants.map((p)=>{\n                    if (p.user_session_id === user_session_id) {\n                        shouldInsertParticipant = false;\n                        return event.participant;\n                    }\n                    return p;\n                });\n                if (shouldInsertParticipant) {\n                    // this is a new array, we can safely push the new participant\n                    updatedParticipants.push(event.participant);\n                }\n                // If we are updating an existing participant, we don't want to increment\n                // the participant_by_role count.\n                const increment = shouldInsertParticipant ? 1 : 0;\n                return {\n                    ...session,\n                    participants: updatedParticipants,\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: (participants_count_by_role[user.role] || 0) + increment\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateMembers = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.map((member)=>{\n                    const memberUpdate = event.members.find((m)=>m.user_id === member.user_id);\n                    return memberUpdate ? memberUpdate : member;\n                }));\n        };\n        this.updateParticipantReaction = (event)=>{\n            const { user, custom, type, emoji_code } = event.reaction;\n            this.setParticipants((participants)=>{\n                return participants.map((p)=>{\n                    // skip if the reaction is not for this participant\n                    if (p.userId !== user.id) return p;\n                    // update the participant with the new reaction\n                    return {\n                        ...p,\n                        reaction: {\n                            type,\n                            emoji_code,\n                            custom\n                        }\n                    };\n                });\n            });\n        };\n        this.unblockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>{\n                if (!current) return current;\n                return current.filter((id)=>id !== event.user.id);\n            });\n        };\n        this.blockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>[\n                    ...current || [],\n                    event.user.id\n                ]);\n        };\n        this.updateOwnCapabilities = (event)=>{\n            if (event.user.id === this.localParticipant?.userId) {\n                this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n            }\n        };\n        this.updateFromClosedCaptions = (event)=>{\n            this.setCurrentValue(this.closedCaptionsSubject, (queue)=>{\n                const { closed_caption } = event;\n                const keyOf = (c)=>`${c.speaker_id}/${c.start_time}`;\n                const currentKey = keyOf(closed_caption);\n                const duplicate = queue.some((caption)=>keyOf(caption) === currentKey);\n                if (duplicate) return queue;\n                const nextQueue = [\n                    ...queue,\n                    closed_caption\n                ];\n                const { visibilityDurationMs = 2700, maxVisibleCaptions = 2 } = this.closedCaptionsSettings || {};\n                // schedule the removal of the closed caption after the retention time\n                if (visibilityDurationMs > 0) {\n                    const taskId = setTimeout(()=>{\n                        this.setCurrentValue(this.closedCaptionsSubject, (captions)=>captions.filter((caption)=>caption !== closed_caption));\n                        this.closedCaptionsTasks.delete(currentKey);\n                    }, visibilityDurationMs);\n                    this.closedCaptionsTasks.set(currentKey, taskId);\n                    // cancel the cleanup tasks for the closed captions that are no longer in the queue\n                    for(let i = 0; i < nextQueue.length - maxVisibleCaptions; i++){\n                        const key = keyOf(nextQueue[i]);\n                        const task = this.closedCaptionsTasks.get(key);\n                        clearTimeout(task);\n                        this.closedCaptionsTasks.delete(key);\n                    }\n                }\n                // trim the queue\n                return nextQueue.slice(-maxVisibleCaptions);\n            });\n        };\n        this.rawParticipants$ = this.participantsSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.participants$ = this.participantsSubject.asObservable().pipe(// maintain stable-sort by mutating the participants stored\n        // in the original subject\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((ps)=>ps.sort(this.sortParticipantsBy)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.localParticipant$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((participants)=>participants.find((p)=>p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.remoteParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((participants)=>participants.filter((p)=>!p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.pinnedParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((participants)=>participants.filter((p)=>!!p.pin)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.dominantSpeaker$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((participants)=>participants.find((p)=>p.isDominantSpeaker)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.hasOngoingScreenShare$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((participants)=>participants.some((p)=>hasScreenShare(p))), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        // dates\n        this.createdAt$ = this.createdAtSubject.asObservable();\n        this.endedAt$ = this.endedAtSubject.asObservable();\n        this.startsAt$ = this.startsAtSubject.asObservable();\n        this.startedAt$ = this.startedAtSubject.asObservable();\n        this.updatedAt$ = this.updatedAtSubject.asObservable();\n        this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n        this.members$ = this.membersSubject.asObservable();\n        // complex objects should work as streams of data\n        this.createdBy$ = this.createdBySubject.asObservable();\n        this.custom$ = this.customSubject.asObservable();\n        this.egress$ = this.egressSubject.asObservable();\n        this.ingress$ = this.ingressSubject.asObservable();\n        this.session$ = this.sessionSubject.asObservable();\n        this.settings$ = this.settingsSubject.asObservable();\n        this.endedBy$ = this.endedBySubject.asObservable();\n        this.thumbnails$ = this.thumbnailsSubject.asObservable();\n        this.closedCaptions$ = this.closedCaptionsSubject.asObservable();\n        /**\n         * Performs shallow comparison of two arrays.\n         * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n         */ const isShallowEqual = (a, b)=>{\n            if (a.length !== b.length) return false;\n            for (const item of a)if (!b.includes(item)) return false;\n            for (const item of b)if (!a.includes(item)) return false;\n            return true;\n        };\n        /**\n         * Creates an Observable from the given subject by piping to the\n         * `distinctUntilChanged()` operator.\n         */ const duc = (subject, comparator)=>subject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)(comparator));\n        // primitive values should only emit once the value they hold changes\n        this.anonymousParticipantCount$ = duc(this.anonymousParticipantCountSubject);\n        this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n        this.backstage$ = duc(this.backstageSubject);\n        this.callingState$ = duc(this.callingStateSubject);\n        this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n        this.participantCount$ = duc(this.participantCountSubject);\n        this.recording$ = duc(this.recordingSubject);\n        this.transcribing$ = duc(this.transcribingSubject);\n        this.captioning$ = duc(this.captioningSubject);\n        this.eventHandlers = {\n            // these events are not updating the call state:\n            'call.frame_recording_ready': undefined,\n            'call.kicked_user': undefined,\n            'call.moderation_blur': undefined,\n            'call.moderation_warning': undefined,\n            'call.permission_request': undefined,\n            'call.recording_ready': undefined,\n            'call.rtmp_broadcast_failed': undefined,\n            'call.rtmp_broadcast_started': undefined,\n            'call.rtmp_broadcast_stopped': undefined,\n            'call.stats_report_ready': undefined,\n            'call.transcription_ready': undefined,\n            'call.user_feedback_submitted': undefined,\n            'call.user_muted': undefined,\n            'connection.error': undefined,\n            'connection.ok': undefined,\n            'health.check': undefined,\n            'user.updated': undefined,\n            custom: undefined,\n            // events that update call state:\n            'call.accepted': (e)=>this.updateFromCallResponse(e.call),\n            'call.blocked_user': this.blockUser,\n            'call.closed_caption': this.updateFromClosedCaptions,\n            'call.closed_captions_failed': ()=>{\n                this.setCurrentValue(this.captioningSubject, false);\n            },\n            'call.closed_captions_started': ()=>{\n                this.setCurrentValue(this.captioningSubject, true);\n            },\n            'call.closed_captions_stopped': ()=>{\n                this.setCurrentValue(this.captioningSubject, false);\n            },\n            'call.created': (e)=>this.updateFromCallResponse(e.call),\n            'call.deleted': (e)=>this.updateFromCallResponse(e.call),\n            'call.ended': (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setCurrentValue(this.endedBySubject, e.user);\n            },\n            'call.frame_recording_failed': (e)=>{\n                this.updateFromCallResponse(e.call);\n            },\n            'call.frame_recording_started': (e)=>{\n                this.updateFromCallResponse(e.call);\n            },\n            'call.frame_recording_stopped': (e)=>{\n                this.updateFromCallResponse(e.call);\n            },\n            'call.hls_broadcasting_failed': this.updateFromHLSBroadcastingFailed,\n            'call.hls_broadcasting_started': (e)=>{\n                this.updateFromCallResponse(e.call);\n            },\n            'call.hls_broadcasting_stopped': this.updateFromHLSBroadcastStopped,\n            'call.live_started': (e)=>this.updateFromCallResponse(e.call),\n            'call.member_added': this.updateFromMemberAdded,\n            'call.member_removed': this.updateFromMemberRemoved,\n            'call.member_updated_permission': this.updateMembers,\n            'call.member_updated': this.updateMembers,\n            'call.notification': (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setMembers(e.members);\n            },\n            'call.permissions_updated': this.updateOwnCapabilities,\n            'call.reaction_new': this.updateParticipantReaction,\n            'call.recording_started': ()=>this.setCurrentValue(this.recordingSubject, true),\n            'call.recording_stopped': ()=>this.setCurrentValue(this.recordingSubject, false),\n            'call.recording_failed': ()=>this.setCurrentValue(this.recordingSubject, false),\n            'call.rejected': (e)=>this.updateFromCallResponse(e.call),\n            'call.ring': (e)=>this.updateFromCallResponse(e.call),\n            'call.missed': (e)=>this.updateFromCallResponse(e.call),\n            'call.session_ended': (e)=>this.updateFromCallResponse(e.call),\n            'call.session_participant_count_updated': this.updateFromSessionParticipantCountUpdate,\n            'call.session_participant_joined': this.updateFromSessionParticipantJoined,\n            'call.session_participant_left': this.updateFromSessionParticipantLeft,\n            'call.session_started': (e)=>this.updateFromCallResponse(e.call),\n            'call.transcription_started': ()=>{\n                this.setCurrentValue(this.transcribingSubject, true);\n            },\n            'call.transcription_stopped': ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            'call.transcription_failed': ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            'call.unblocked_user': this.unblockUser,\n            'call.updated': (e)=>this.updateFromCallResponse(e.call)\n        };\n    }\n    /**\n     * The server-side counted number of participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get participantCount() {\n        return this.getCurrentValue(this.participantCount$);\n    }\n    /**\n     * The time the call session actually started.\n     * Useful for displaying the call duration.\n     */ get startedAt() {\n        return this.getCurrentValue(this.startedAt$);\n    }\n    /**\n     * Returns whether closed captions are enabled in the current call.\n     */ get captioning() {\n        return this.getCurrentValue(this.captioning$);\n    }\n    /**\n     * The server-side counted number of anonymous participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get anonymousParticipantCount() {\n        return this.getCurrentValue(this.anonymousParticipantCount$);\n    }\n    /**\n     * The list of participants in the current call.\n     */ get participants() {\n        return this.getCurrentValue(this.participants$);\n    }\n    /**\n     * The stable list of participants in the current call, unsorted.\n     */ get rawParticipants() {\n        return this.getCurrentValue(this.rawParticipants$);\n    }\n    /**\n     * The local participant in the current call.\n     */ get localParticipant() {\n        return this.getCurrentValue(this.localParticipant$);\n    }\n    /**\n     * The list of remote participants in the current call.\n     */ get remoteParticipants() {\n        return this.getCurrentValue(this.remoteParticipants$);\n    }\n    /**\n     * The dominant speaker in the current call.\n     */ get dominantSpeaker() {\n        return this.getCurrentValue(this.dominantSpeaker$);\n    }\n    /**\n     * The list of pinned participants in the current call.\n     */ get pinnedParticipants() {\n        return this.getCurrentValue(this.pinnedParticipants$);\n    }\n    /**\n     * Tell if there is an ongoing screen share in this call.\n     */ get hasOngoingScreenShare() {\n        return this.getCurrentValue(this.hasOngoingScreenShare$);\n    }\n    /**\n     * The calling state.\n     */ get callingState() {\n        return this.getCurrentValue(this.callingState$);\n    }\n    /**\n     * The call stats report.\n     */ get callStatsReport() {\n        return this.getCurrentValue(this.callStatsReport$);\n    }\n    /**\n     * Returns whether the call stats report is being observed or not.\n     * @internal\n     */ get isCallStatsReportObserved() {\n        return this.callStatsReportSubject.observed;\n    }\n    /**\n     * The members of the current call.\n     */ get members() {\n        return this.getCurrentValue(this.members$);\n    }\n    /**\n     * The capabilities of the current user for the current call.\n     */ get ownCapabilities() {\n        return this.getCurrentValue(this.ownCapabilities$);\n    }\n    /**\n     * The backstage state.\n     */ get backstage() {\n        return this.getCurrentValue(this.backstage$);\n    }\n    /**\n     * Will provide the list of blocked user IDs.\n     */ get blockedUserIds() {\n        return this.getCurrentValue(this.blockedUserIds$);\n    }\n    /**\n     * Will provide the time when this call has been created.\n     */ get createdAt() {\n        return this.getCurrentValue(this.createdAt$);\n    }\n    /**\n     * Will provide the time when this call has been ended.\n     */ get endedAt() {\n        return this.getCurrentValue(this.endedAt$);\n    }\n    /**\n     * Will provide the time when this call has been scheduled to start.\n     */ get startsAt() {\n        return this.getCurrentValue(this.startsAt$);\n    }\n    /**\n     * Will provide the time when this call has been updated.\n     */ get updatedAt() {\n        return this.getCurrentValue(this.updatedAt$);\n    }\n    /**\n     * Will provide the user who created this call.\n     */ get createdBy() {\n        return this.getCurrentValue(this.createdBy$);\n    }\n    /**\n     * Will provide the custom data of this call.\n     */ get custom() {\n        return this.getCurrentValue(this.custom$);\n    }\n    /**\n     * Will provide the egress data of this call.\n     */ get egress() {\n        return this.getCurrentValue(this.egress$);\n    }\n    /**\n     * Will provide the ingress data of this call.\n     */ get ingress() {\n        return this.getCurrentValue(this.ingress$);\n    }\n    /**\n     * Will provide the recording state of this call.\n     */ get recording() {\n        return this.getCurrentValue(this.recording$);\n    }\n    /**\n     * Will provide the session data of this call.\n     */ get session() {\n        return this.getCurrentValue(this.session$);\n    }\n    /**\n     * Will provide the settings of this call.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Will provide the transcribing state of this call.\n     */ get transcribing() {\n        return this.getCurrentValue(this.transcribing$);\n    }\n    /**\n     * Will provide the user who ended this call.\n     */ get endedBy() {\n        return this.getCurrentValue(this.endedBy$);\n    }\n    /**\n     * Will provide the thumbnails of this call, if enabled in the call settings.\n     */ get thumbnails() {\n        return this.getCurrentValue(this.thumbnails$);\n    }\n    /**\n     * Returns the current queue of closed captions.\n     */ get closedCaptions() {\n        return this.getCurrentValue(this.closedCaptions$);\n    }\n}\n/**\n * NegotiationError is thrown when there is an error during the negotiation process.\n * It extends the built-in Error class and includes an SfuError object for more details.\n */ class NegotiationError extends Error {\n    /**\n     * Creates an instance of NegotiationError.\n     */ constructor(error){\n        super(error.message);\n        this.name = 'NegotiationError';\n        this.error = error;\n    }\n}\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\n/**\n * Dump the provided MediaStream into a JSON object.\n */ const dumpStream = (stream)=>({\n        id: stream.id,\n        tracks: stream.getTracks().map((track)=>({\n                id: track.id,\n                kind: track.kind,\n                label: track.label,\n                enabled: track.enabled,\n                muted: track.muted,\n                readyState: track.readyState\n            }))\n    });\nconst getSdkSignature = (clientDetails)=>{\n    const { sdk, ...platform } = clientDetails;\n    const sdkName = getSdkName(sdk);\n    const sdkVersion = getSdkVersion(sdk);\n    return {\n        sdkName,\n        sdkVersion,\n        ...platform\n    };\n};\nconst getSdkName = (sdk)=>{\n    return sdk && sdk.type === SdkType.REACT ? 'stream-react' : sdk && sdk.type === SdkType.REACT_NATIVE ? 'stream-react-native' : 'stream-js';\n};\nconst getSdkVersion = (sdk)=>{\n    return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : '0.0.0-development';\n};\nconst version = \"1.28.1\";\nconst [major, minor, patch] = version.split('.');\nlet sdkInfo = {\n    type: SdkType.PLAIN_JAVASCRIPT,\n    major,\n    minor,\n    patch\n};\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nlet deviceState = {\n    oneofKind: undefined\n};\nconst setSdkInfo = (info)=>{\n    sdkInfo = info;\n};\nconst getSdkInfo = ()=>{\n    return sdkInfo;\n};\nconst setOSInfo = (info)=>{\n    osInfo = info;\n};\nconst setDeviceInfo = (info)=>{\n    deviceInfo = info;\n};\nconst getWebRTCInfo = ()=>{\n    return webRtcInfo;\n};\nconst setWebRTCInfo = (info)=>{\n    webRtcInfo = info;\n};\nconst setThermalState = (state)=>{\n    if (!osInfo) {\n        deviceState = {\n            oneofKind: undefined\n        };\n        return;\n    }\n    if (osInfo.name === 'android') {\n        const thermalState = AndroidThermalState[state] || AndroidThermalState.UNSPECIFIED;\n        deviceState = {\n            oneofKind: 'android',\n            android: {\n                thermalState,\n                isPowerSaverMode: deviceState?.oneofKind === 'android' && deviceState.android.isPowerSaverMode\n            }\n        };\n    }\n    if (osInfo.name.toLowerCase() === 'ios') {\n        const thermalState = AppleThermalState[state] || AppleThermalState.UNSPECIFIED;\n        deviceState = {\n            oneofKind: 'apple',\n            apple: {\n                thermalState,\n                isLowPowerModeEnabled: deviceState?.oneofKind === 'apple' && deviceState.apple.isLowPowerModeEnabled\n            }\n        };\n    }\n};\nconst setPowerState = (powerMode)=>{\n    if (!osInfo) {\n        deviceState = {\n            oneofKind: undefined\n        };\n        return;\n    }\n    if (osInfo.name === 'android') {\n        deviceState = {\n            oneofKind: 'android',\n            android: {\n                thermalState: deviceState?.oneofKind === 'android' ? deviceState.android.thermalState : AndroidThermalState.UNSPECIFIED,\n                isPowerSaverMode: powerMode\n            }\n        };\n    }\n    if (osInfo.name.toLowerCase() === 'ios') {\n        deviceState = {\n            oneofKind: 'apple',\n            apple: {\n                thermalState: deviceState?.oneofKind === 'apple' ? deviceState.apple.thermalState : AppleThermalState.UNSPECIFIED,\n                isLowPowerModeEnabled: powerMode\n            }\n        };\n    }\n};\nconst getDeviceState = ()=>{\n    return deviceState;\n};\nconst getClientDetails = async ()=>{\n    if (isReactNative()) {\n        // Since RN doesn't support web, sharing browser info is not required\n        return {\n            sdk: sdkInfo,\n            os: osInfo,\n            device: deviceInfo\n        };\n    }\n    // @ts-expect-error - userAgentData is not yet in the TS types\n    const userAgentDataApi = navigator.userAgentData;\n    let userAgentData;\n    if (userAgentDataApi && userAgentDataApi.getHighEntropyValues) {\n        try {\n            userAgentData = await userAgentDataApi.getHighEntropyValues([\n                'platform',\n                'platformVersion',\n                'fullVersionList'\n            ]);\n        } catch  {\n        // Ignore the error\n        }\n    }\n    const userAgent = new ua_parser_js__WEBPACK_IMPORTED_MODULE_2__.UAParser(navigator.userAgent);\n    const { browser, os, device, cpu } = userAgent.getResult();\n    // If userAgentData is available, it means we are in a modern Chromium browser,\n    // and we can use it to get more accurate browser information.\n    // We hook into the fullVersionList to find the browser name and version and\n    // eventually detect exotic browsers like Samsung Internet, AVG Secure Browser, etc.\n    // who by default they identify themselves as \"Chromium\" in the user agent string.\n    // Eliminates the generic \"Chromium\" name and \"Not)A_Brand\" name from the list.\n    // https://wicg.github.io/ua-client-hints/#create-arbitrary-brands-section\n    const uaBrowser = userAgentData?.fullVersionList?.find((v)=>!v.brand.includes('Chromium') && !v.brand.match(/[()\\-./:;=?_]/g));\n    return {\n        sdk: sdkInfo,\n        browser: {\n            name: uaBrowser?.brand || browser.name || navigator.userAgent,\n            version: uaBrowser?.version || browser.version || ''\n        },\n        os: {\n            name: userAgentData?.platform || os.name || '',\n            version: userAgentData?.platformVersion || os.version || '',\n            architecture: cpu.architecture || ''\n        },\n        device: {\n            name: [\n                device.vendor,\n                device.model,\n                device.type\n            ].filter(Boolean).join(' '),\n            version: ''\n        }\n    };\n};\n/**\n * Checks whether the current browser is Safari.\n */ const isSafari = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || '');\n};\n/**\n * Checks whether the current browser is Firefox.\n */ const isFirefox = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return navigator.userAgent?.includes('Firefox');\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */ const isChrome = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return navigator.userAgent?.includes('Chrome');\n};\n/**\n * Checks whether the current browser is among the list of first-class supported browsers.\n * This includes Chrome, Edge, Firefox, and Safari.\n *\n * Although the Stream Video SDK may work in other browsers, these are the ones we officially support.\n */ const isSupportedBrowser = async ()=>{\n    const { browser } = await getClientDetails();\n    if (!browser) return false; // we aren't running in a browser\n    const name = browser.name.toLowerCase();\n    const [major] = browser.version.split('.');\n    const version = parseInt(major, 10);\n    return name.includes('chrome') && version >= 124 || name.includes('edge') && version >= 124 || name.includes('firefox') && version >= 124 || name.includes('safari') && version >= 17 || name.includes('webkit') && version >= 605 || // WebView on iOS\n    name.includes('webview') && version >= 124 // WebView on Android\n    ;\n};\nvar browsers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isChrome: isChrome,\n    isFirefox: isFirefox,\n    isSafari: isSafari,\n    isSupportedBrowser: isSupportedBrowser\n});\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */ const createStatsReporter = ({ subscriber, publisher, state, datacenter, pollingIntervalInMs = 2000 })=>{\n    const logger = getLogger([\n        'stats'\n    ]);\n    const getRawStatsForTrack = async (kind, selector)=>{\n        if (kind === 'subscriber' && subscriber) {\n            return subscriber.getStats(selector);\n        } else if (kind === 'publisher' && publisher) {\n            return publisher.getStats(selector);\n        } else {\n            return undefined;\n        }\n    };\n    const getStatsForStream = async (kind, tracks)=>{\n        const pc = kind === 'subscriber' ? subscriber : publisher;\n        if (!pc) return [];\n        const statsForStream = [];\n        for (const track of tracks){\n            const report = await pc.getStats(track);\n            const stats = transform(report, {\n                trackKind: track.kind,\n                kind,\n                publisher: undefined\n            });\n            statsForStream.push(stats);\n        }\n        return statsForStream;\n    };\n    const startReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.add(sessionId);\n        void run();\n    };\n    const stopReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.delete(sessionId);\n        void run();\n    };\n    const sessionIdsToTrack = new Set();\n    /**\n     * The main stats reporting loop.\n     */ const run = async ()=>{\n        const participantStats = {};\n        if (sessionIdsToTrack.size > 0) {\n            const sessionIds = new Set(sessionIdsToTrack);\n            for (const participant of state.participants){\n                if (!sessionIds.has(participant.sessionId)) continue;\n                const { audioStream, isLocalParticipant, sessionId, userId, videoStream } = participant;\n                const kind = isLocalParticipant ? 'publisher' : 'subscriber';\n                try {\n                    const tracks = isLocalParticipant ? publisher?.getPublishedTracks() || [] : [\n                        ...videoStream?.getVideoTracks() || [],\n                        ...audioStream?.getAudioTracks() || []\n                    ];\n                    participantStats[sessionId] = await getStatsForStream(kind, tracks);\n                } catch (e) {\n                    logger('warn', `Failed to collect ${kind} stats for ${userId}`, e);\n                }\n            }\n        }\n        const [subscriberRawStats, publisherRawStats] = await Promise.all([\n            getRawStatsForTrack('subscriber'),\n            publisher ? getRawStatsForTrack('publisher') : undefined\n        ]);\n        const process = (report, kind)=>aggregate(transform(report, {\n                kind,\n                trackKind: 'video',\n                publisher\n            }));\n        const subscriberStats = subscriberRawStats ? process(subscriberRawStats, 'subscriber') : getEmptyStats();\n        const publisherStats = publisherRawStats ? process(publisherRawStats, 'publisher') : getEmptyStats();\n        state.setCallStatsReport({\n            datacenter,\n            publisherStats,\n            subscriberStats,\n            subscriberRawStats,\n            publisherRawStats,\n            participants: participantStats,\n            timestamp: Date.now()\n        });\n    };\n    let timeoutId;\n    if (pollingIntervalInMs > 0) {\n        const loop = async ()=>{\n            // bail out of the loop as we don't want to collect stats\n            // (they are expensive) if no one is listening to them\n            if (state.isCallStatsReportObserved) {\n                await run().catch((e)=>{\n                    logger('debug', 'Failed to collect stats', e);\n                });\n            }\n            timeoutId = setTimeout(loop, pollingIntervalInMs);\n        };\n        void loop();\n    }\n    const stop = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n    return {\n        getRawStatsForTrack,\n        getStatsForStream,\n        startReportingStatsFor,\n        stopReportingStatsFor,\n        stop\n    };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */ const transform = (report, opts)=>{\n    const { trackKind, kind, publisher } = opts;\n    const direction = kind === 'subscriber' ? 'inbound-rtp' : 'outbound-rtp';\n    const stats = flatten(report);\n    const streams = stats.filter((stat)=>stat.type === direction && stat.kind === trackKind).map((stat)=>{\n        const rtcStreamStats = stat;\n        const codec = stats.find((s)=>s.type === 'codec' && s.id === rtcStreamStats.codecId);\n        const transport = stats.find((s)=>s.type === 'transport' && s.id === rtcStreamStats.transportId);\n        let roundTripTime;\n        if (transport && transport.dtlsState === 'connected') {\n            const candidatePair = stats.find((s)=>s.type === 'candidate-pair' && s.id === transport.selectedCandidatePairId);\n            roundTripTime = candidatePair?.currentRoundTripTime;\n        }\n        let trackType;\n        if (kind === 'publisher' && publisher) {\n            const firefox = isFirefox();\n            const mediaSource = stats.find((s)=>s.type === 'media-source' && // Firefox doesn't have mediaSourceId, so we need to guess the media source\n                (firefox ? true : s.id === rtcStreamStats.mediaSourceId));\n            if (mediaSource) {\n                trackType = publisher.getTrackType(mediaSource.trackIdentifier);\n            }\n        }\n        return {\n            bytesSent: rtcStreamStats.bytesSent,\n            bytesReceived: rtcStreamStats.bytesReceived,\n            codec: codec?.mimeType,\n            currentRoundTripTime: roundTripTime,\n            frameHeight: rtcStreamStats.frameHeight,\n            frameWidth: rtcStreamStats.frameWidth,\n            framesPerSecond: rtcStreamStats.framesPerSecond,\n            jitter: rtcStreamStats.jitter,\n            kind: rtcStreamStats.kind,\n            mediaSourceId: rtcStreamStats.mediaSourceId,\n            qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n            rid: rtcStreamStats.rid,\n            ssrc: rtcStreamStats.ssrc,\n            trackType\n        };\n    });\n    return {\n        rawStats: report,\n        streams,\n        timestamp: Date.now()\n    };\n};\nconst getEmptyStats = (stats)=>{\n    return {\n        rawReport: stats ?? {\n            streams: [],\n            timestamp: Date.now()\n        },\n        totalBytesSent: 0,\n        totalBytesReceived: 0,\n        averageJitterInMs: 0,\n        averageRoundTripTimeInMs: 0,\n        qualityLimitationReasons: 'none',\n        highestFrameWidth: 0,\n        highestFrameHeight: 0,\n        highestFramesPerSecond: 0,\n        codec: '',\n        codecPerTrackType: {},\n        timestamp: Date.now()\n    };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */ const aggregate = (stats)=>{\n    const aggregatedStats = getEmptyStats(stats);\n    let maxArea = -1;\n    const area = (w, h)=>w * h;\n    const qualityLimitationReasons = new Set();\n    const streams = stats.streams;\n    const report = streams.reduce((acc, stream)=>{\n        acc.totalBytesSent += stream.bytesSent || 0;\n        acc.totalBytesReceived += stream.bytesReceived || 0;\n        acc.averageJitterInMs += stream.jitter || 0;\n        acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n        // naive calculation of the highest resolution\n        const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n        if (streamArea > maxArea) {\n            acc.highestFrameWidth = stream.frameWidth || 0;\n            acc.highestFrameHeight = stream.frameHeight || 0;\n            acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n            maxArea = streamArea;\n        }\n        qualityLimitationReasons.add(stream.qualityLimitationReason || '');\n        return acc;\n    }, aggregatedStats);\n    if (streams.length > 0) {\n        report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n        report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n        // we take the first codec we find, as it should be the same for all streams\n        report.codec = streams[0].codec || '';\n        report.codecPerTrackType = streams.reduce((acc, stream)=>{\n            if (stream.trackType) {\n                acc[stream.trackType] = stream.codec || '';\n            }\n            return acc;\n        }, {});\n    }\n    const qualityLimitationReason = [\n        qualityLimitationReasons.has('cpu') && 'cpu',\n        qualityLimitationReasons.has('bandwidth') && 'bandwidth',\n        qualityLimitationReasons.has('other') && 'other'\n    ].filter(Boolean).join(', ');\n    if (qualityLimitationReason) {\n        report.qualityLimitationReasons = qualityLimitationReason;\n    }\n    return report;\n};\nclass SfuStatsReporter {\n    constructor(sfuClient, { options, clientDetails, subscriber, publisher, microphone, camera, state, tracer, unifiedSessionId }){\n        this.logger = getLogger([\n            'SfuStatsReporter'\n        ]);\n        this.inputDevices = new Map();\n        this.observeDevice = (device, kind)=>{\n            const { browserPermissionState$ } = device.state;\n            this.unsubscribeDevicePermissionsSubscription?.();\n            this.unsubscribeDevicePermissionsSubscription = createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n                browserPermissionState$,\n                this.state.ownCapabilities$\n            ]), ([browserPermissionState, ownCapabilities])=>{\n                // cleanup the previous listDevices() subscription in case\n                // permissions or capabilities have changed.\n                // we will subscribe again if everything is in order.\n                this.unsubscribeListDevicesSubscription?.();\n                const hasCapability = kind === 'mic' ? ownCapabilities.includes(OwnCapability.SEND_AUDIO) : ownCapabilities.includes(OwnCapability.SEND_VIDEO);\n                if (browserPermissionState !== 'granted' || !hasCapability) {\n                    this.inputDevices.set(kind, {\n                        currentDevice: '',\n                        availableDevices: [],\n                        isPermitted: false\n                    });\n                    return;\n                }\n                this.unsubscribeListDevicesSubscription = createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n                    device.listDevices(),\n                    device.state.selectedDevice$\n                ]), ([devices, deviceId])=>{\n                    const selected = devices.find((d)=>d.deviceId === deviceId);\n                    this.inputDevices.set(kind, {\n                        currentDevice: selected?.label || deviceId || '',\n                        availableDevices: devices.map((d)=>d.label),\n                        isPermitted: true\n                    });\n                });\n            });\n        };\n        this.sendConnectionTime = (connectionTimeSeconds)=>{\n            this.sendTelemetryData({\n                data: {\n                    oneofKind: 'connectionTimeSeconds',\n                    connectionTimeSeconds\n                }\n            });\n        };\n        this.sendReconnectionTime = (strategy, timeSeconds)=>{\n            this.sendTelemetryData({\n                data: {\n                    oneofKind: 'reconnection',\n                    reconnection: {\n                        strategy,\n                        timeSeconds\n                    }\n                }\n            });\n        };\n        this.sendTelemetryData = (telemetryData)=>{\n            // intentionally not awaiting the promise here\n            // to avoid impeding with the ongoing actions.\n            this.run(telemetryData).catch((err)=>{\n                this.logger('warn', 'Failed to send telemetry data', err);\n            });\n        };\n        this.run = async (telemetry)=>{\n            const [subscriberStats, publisherStats] = await Promise.all([\n                this.subscriber.stats.get(),\n                this.publisher?.stats.get()\n            ]);\n            this.subscriber.tracer?.trace('getstats', subscriberStats.delta);\n            if (publisherStats) {\n                this.publisher?.tracer?.trace('getstats', publisherStats.delta);\n            }\n            const subscriberTrace = this.subscriber.tracer?.take();\n            const publisherTrace = this.publisher?.tracer?.take();\n            const tracer = this.tracer.take();\n            const sfuTrace = this.sfuClient.getTrace();\n            const traces = [\n                ...tracer.snapshot,\n                ...sfuTrace?.snapshot ?? [],\n                ...publisherTrace?.snapshot ?? [],\n                ...subscriberTrace?.snapshot ?? []\n            ];\n            try {\n                await this.sfuClient.sendStats({\n                    sdk: this.sdkName,\n                    sdkVersion: this.sdkVersion,\n                    webrtcVersion: this.webRTCVersion,\n                    subscriberStats: JSON.stringify(flatten(subscriberStats.stats)),\n                    publisherStats: publisherStats ? JSON.stringify(flatten(publisherStats.stats)) : '[]',\n                    subscriberRtcStats: '',\n                    publisherRtcStats: '',\n                    rtcStats: JSON.stringify(traces),\n                    encodeStats: publisherStats?.performanceStats ?? [],\n                    decodeStats: subscriberStats.performanceStats,\n                    audioDevices: this.inputDevices.get('mic'),\n                    videoDevices: this.inputDevices.get('camera'),\n                    unifiedSessionId: this.unifiedSessionId,\n                    deviceState: getDeviceState(),\n                    telemetry\n                });\n            } catch (err) {\n                publisherTrace?.rollback();\n                subscriberTrace?.rollback();\n                tracer.rollback();\n                sfuTrace?.rollback();\n                throw err;\n            }\n        };\n        this.start = ()=>{\n            if (this.options.reporting_interval_ms <= 0) return;\n            this.observeDevice(this.microphone, 'mic');\n            this.observeDevice(this.camera, 'camera');\n            clearInterval(this.intervalId);\n            this.intervalId = setInterval(()=>{\n                this.run().catch((err)=>{\n                    this.logger('warn', 'Failed to report stats', err);\n                });\n            }, this.options.reporting_interval_ms);\n        };\n        this.stop = ()=>{\n            this.unsubscribeDevicePermissionsSubscription?.();\n            this.unsubscribeDevicePermissionsSubscription = undefined;\n            this.unsubscribeListDevicesSubscription?.();\n            this.unsubscribeListDevicesSubscription = undefined;\n            this.inputDevices.clear();\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n            clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n        };\n        this.flush = ()=>{\n            this.run().catch((err)=>{\n                this.logger('warn', 'Failed to flush report stats', err);\n            });\n        };\n        this.scheduleOne = (timeout)=>{\n            clearTimeout(this.timeoutId);\n            this.timeoutId = setTimeout(()=>{\n                this.run().catch((err)=>{\n                    this.logger('warn', 'Failed to report stats', err);\n                });\n            }, timeout);\n        };\n        this.sfuClient = sfuClient;\n        this.options = options;\n        this.subscriber = subscriber;\n        this.publisher = publisher;\n        this.microphone = microphone;\n        this.camera = camera;\n        this.state = state;\n        this.tracer = tracer;\n        this.unifiedSessionId = unifiedSessionId;\n        const { sdk, browser } = clientDetails;\n        this.sdkName = getSdkName(sdk);\n        this.sdkVersion = getSdkVersion(sdk);\n        // use the WebRTC version if set by the SDK (React Native) otherwise,\n        // use the browser version as a fallback\n        const webRTCInfo = getWebRTCInfo();\n        this.webRTCVersion = webRTCInfo?.version || `${browser?.name || ''}-${browser?.version || ''}` || 'N/A';\n    }\n}\nconst traceRTCPeerConnection = (pc, trace)=>{\n    pc.addEventListener('icecandidate', (e)=>{\n        trace('onicecandidate', e.candidate);\n    });\n    pc.addEventListener('track', (e)=>{\n        const streams = e.streams.map((stream)=>`stream:${stream.id}`);\n        trace('ontrack', `${e.track.kind}:${e.track.id} ${streams}`);\n    });\n    pc.addEventListener('signalingstatechange', ()=>{\n        trace('signalingstatechange', pc.signalingState);\n    });\n    pc.addEventListener('iceconnectionstatechange', ()=>{\n        trace('iceconnectionstatechange', pc.iceConnectionState);\n    });\n    pc.addEventListener('icegatheringstatechange', ()=>{\n        trace('icegatheringstatechange', pc.iceGatheringState);\n    });\n    pc.addEventListener('connectionstatechange', ()=>{\n        trace('connectionstatechange', pc.connectionState);\n    });\n    pc.addEventListener('negotiationneeded', ()=>{\n        trace('negotiationneeded', undefined);\n    });\n    pc.addEventListener('datachannel', ({ channel })=>{\n        trace('datachannel', [\n            channel.id,\n            channel.label\n        ]);\n    });\n    const origClose = pc.close;\n    pc.close = function tracedClose() {\n        trace('close', undefined);\n        return origClose.call(this);\n    };\n    for (const method of [\n        'createOffer',\n        'createAnswer',\n        'setLocalDescription',\n        'setRemoteDescription',\n        'addIceCandidate'\n    ]){\n        const original = pc[method];\n        if (!original) continue;\n        // @ts-expect-error we don't use deprecated APIs\n        pc[method] = async function tracedMethod(...args) {\n            try {\n                trace(method, args);\n                // @ts-expect-error improper types\n                const result = await original.apply(this, args);\n                trace(`${method}OnSuccess`, result);\n                return result;\n            } catch (err) {\n                trace(`${method}OnFailure`, err.toString());\n                throw err;\n            }\n        };\n    }\n};\n/**\n * StatsTracer is a class that collects and processes WebRTC stats.\n * It is used to track the performance of the WebRTC connection\n * and to provide information about the media streams.\n * It is used by both the Publisher and Subscriber classes.\n *\n * @internal\n */ class StatsTracer {\n    /**\n     * Creates a new StatsTracer instance.\n     */ constructor(pc, peerType, trackIdToTrackType){\n        this.previousStats = {};\n        this.frameTimeHistory = [];\n        this.fpsHistory = [];\n        /**\n         * Get the stats from the RTCPeerConnection.\n         * When called, it will return the stats for the current connection.\n         * It will also return the delta between the current stats and the previous stats.\n         * This is used to track the performance of the connection.\n         *\n         * @internal\n         */ this.get = async ()=>{\n            const stats = await this.pc.getStats();\n            const currentStats = toObject(stats);\n            const performanceStats = this.withOverrides(this.peerType === PeerType.SUBSCRIBER ? this.getDecodeStats(currentStats) : this.getEncodeStats(currentStats));\n            const delta = deltaCompression(this.previousStats, currentStats);\n            // store the current data for the next iteration\n            this.previousStats = currentStats;\n            this.frameTimeHistory = this.frameTimeHistory.slice(-2);\n            this.fpsHistory = this.fpsHistory.slice(-2);\n            return {\n                performanceStats,\n                delta,\n                stats\n            };\n        };\n        /**\n         * Collects encode stats from the RTCPeerConnection.\n         */ this.getEncodeStats = (currentStats)=>{\n            const encodeStats = [];\n            for (const rtp of Object.values(currentStats)){\n                if (rtp.type !== 'outbound-rtp') continue;\n                const { codecId, framesSent = 0, kind, id, totalEncodeTime = 0, framesPerSecond = 0, frameHeight = 0, frameWidth = 0, targetBitrate = 0, mediaSourceId } = rtp;\n                if (kind === 'audio' || !this.previousStats[id]) continue;\n                const prevRtp = this.previousStats[id];\n                const deltaTotalEncodeTime = totalEncodeTime - (prevRtp.totalEncodeTime || 0);\n                const deltaFramesSent = framesSent - (prevRtp.framesSent || 0);\n                const framesEncodeTime = deltaFramesSent > 0 ? deltaTotalEncodeTime / deltaFramesSent * 1000 : 0;\n                this.frameTimeHistory.push(framesEncodeTime);\n                this.fpsHistory.push(framesPerSecond);\n                let trackType = TrackType.VIDEO;\n                if (mediaSourceId && currentStats[mediaSourceId]) {\n                    const mediaSource = currentStats[mediaSourceId];\n                    trackType = this.trackIdToTrackType.get(mediaSource.trackIdentifier) || trackType;\n                }\n                encodeStats.push({\n                    trackType,\n                    codec: getCodecFromStats(currentStats, codecId),\n                    avgFrameTimeMs: average(this.frameTimeHistory),\n                    avgFps: average(this.fpsHistory),\n                    targetBitrate: Math.round(targetBitrate),\n                    videoDimension: {\n                        width: frameWidth,\n                        height: frameHeight\n                    }\n                });\n            }\n            return encodeStats;\n        };\n        /**\n         * Collects decode stats from the RTCPeerConnection.\n         */ this.getDecodeStats = (currentStats)=>{\n            let rtp = undefined;\n            let max = 0;\n            for (const item of Object.values(currentStats)){\n                if (item.type !== 'inbound-rtp') continue;\n                const rtpItem = item;\n                const { kind, frameWidth = 0, frameHeight = 0 } = rtpItem;\n                const area = frameWidth * frameHeight;\n                if (kind === 'video' && area > max) {\n                    rtp = rtpItem;\n                    max = area;\n                }\n            }\n            if (!rtp || !this.previousStats[rtp.id]) return [];\n            const prevRtp = this.previousStats[rtp.id];\n            const { framesDecoded = 0, framesPerSecond = 0, totalDecodeTime = 0, trackIdentifier } = rtp;\n            const deltaTotalDecodeTime = totalDecodeTime - (prevRtp.totalDecodeTime || 0);\n            const deltaFramesDecoded = framesDecoded - (prevRtp.framesDecoded || 0);\n            const framesDecodeTime = deltaFramesDecoded > 0 ? deltaTotalDecodeTime / deltaFramesDecoded * 1000 : 0;\n            this.frameTimeHistory.push(framesDecodeTime);\n            this.fpsHistory.push(framesPerSecond);\n            const trackType = this.trackIdToTrackType.get(trackIdentifier) || TrackType.VIDEO;\n            return [\n                PerformanceStats.create({\n                    trackType,\n                    codec: getCodecFromStats(currentStats, rtp.codecId),\n                    avgFrameTimeMs: average(this.frameTimeHistory),\n                    avgFps: average(this.fpsHistory),\n                    videoDimension: {\n                        width: rtp.frameWidth,\n                        height: rtp.frameHeight\n                    }\n                })\n            ];\n        };\n        /**\n         * Applies cost overrides to the performance stats.\n         * This is used to override the default encode/decode times with custom values.\n         * This is useful for testing and debugging purposes, and it shouldn't be used in production.\n         */ this.withOverrides = (performanceStats)=>{\n            if (this.costOverrides) {\n                for (const s of performanceStats){\n                    const override = this.costOverrides.get(s.trackType);\n                    if (override !== undefined) {\n                        // override the average encode/decode time with the provided cost.\n                        // format: [override].[original-frame-time]\n                        s.avgFrameTimeMs = override + (s.avgFrameTimeMs || 0) / 1000;\n                    }\n                }\n            }\n            return performanceStats;\n        };\n        /**\n         * Set the encode/decode cost for a specific track type.\n         * This is used to override the default encode/decode times with custom values.\n         * This is useful for testing and debugging purposes, and it shouldn't be used in production.\n         *\n         * @internal\n         */ this.setCost = (cost, trackType = TrackType.VIDEO)=>{\n            if (!this.costOverrides) this.costOverrides = new Map();\n            this.costOverrides.set(trackType, cost);\n        };\n        this.pc = pc;\n        this.peerType = peerType;\n        this.trackIdToTrackType = trackIdToTrackType;\n    }\n}\n/**\n * Convert the stat report to an object.\n *\n * @param report the stat report to convert.\n */ const toObject = (report)=>{\n    const obj = {};\n    report.forEach((v, k)=>{\n        obj[k] = v;\n    });\n    return obj;\n};\n/**\n * Apply delta compression to the stats report.\n * Reduces size by ~90%.\n * To reduce further, report keys could be compressed.\n */ const deltaCompression = (oldStats, newStats)=>{\n    newStats = JSON.parse(JSON.stringify(newStats));\n    for (const [id, report] of Object.entries(newStats)){\n        delete report.id;\n        if (!oldStats[id]) continue;\n        for (const [name, value] of Object.entries(report)){\n            if (value === oldStats[id][name]) {\n                delete report[name];\n            }\n        }\n    }\n    let timestamp = -Infinity;\n    const values = Object.values(newStats);\n    for (const report of values){\n        if (report.timestamp > timestamp) {\n            timestamp = report.timestamp;\n        }\n    }\n    for (const report of values){\n        if (report.timestamp === timestamp) {\n            report.timestamp = 0;\n        }\n    }\n    newStats.timestamp = timestamp;\n    return newStats;\n};\n/**\n * Calculates an average value.\n */ const average = (arr)=>arr.reduce((a, b)=>a + b, 0) / arr.length;\n/**\n * Create a Codec object from the codec stats.\n *\n * @param stats the stats report.\n * @param codecId the codec ID to look for.\n */ const getCodecFromStats = (stats, codecId)=>{\n    if (!codecId || !stats[codecId]) return;\n    const codecStats = stats[codecId];\n    return Codec.create({\n        name: codecStats.mimeType.split('/').pop(),\n        clockRate: codecStats.clockRate,\n        payloadType: codecStats.payloadType,\n        fmtp: codecStats.sdpFmtpLine\n    });\n};\nclass Tracer {\n    constructor(id){\n        this.buffer = [];\n        this.enabled = true;\n        this.setEnabled = (enabled)=>{\n            if (this.enabled === enabled) return;\n            this.enabled = enabled;\n            this.buffer = [];\n        };\n        this.trace = (tag, data)=>{\n            if (!this.enabled) return;\n            this.buffer.push([\n                tag,\n                this.id,\n                data,\n                Date.now()\n            ]);\n        };\n        this.traceOnce = (key, tag, data)=>{\n            if (this.keys?.has(key)) return;\n            this.trace(tag, data);\n            (this.keys ?? (this.keys = new Map())).set(key, true);\n        };\n        this.resetTrace = (key)=>{\n            this.keys?.delete(key);\n        };\n        this.take = ()=>{\n            const snapshot = this.buffer;\n            this.buffer = [];\n            return {\n                snapshot,\n                rollback: ()=>{\n                    this.buffer.unshift(...snapshot);\n                }\n            };\n        };\n        this.dispose = ()=>{\n            this.buffer = [];\n            this.keys?.clear();\n        };\n        this.id = id;\n    }\n}\n/**\n * A base class for the `Publisher` and `Subscriber` classes.\n * @internal\n */ class BasePeerConnection {\n    /**\n     * Constructs a new `BasePeerConnection` instance.\n     */ constructor(peerType, { sfuClient, connectionConfig, state, dispatcher, onReconnectionNeeded, tag, enableTracing, iceRestartDelay = 2500 }){\n        this.isIceRestarting = false;\n        this.isDisposed = false;\n        this.trackIdToTrackType = new Map();\n        this.subscriptions = [];\n        this.lock = Math.random().toString(36).slice(2);\n        this.createPeerConnection = (connectionConfig)=>{\n            const pc = new RTCPeerConnection(connectionConfig);\n            pc.addEventListener('icecandidate', this.onIceCandidate);\n            pc.addEventListener('icecandidateerror', this.onIceCandidateError);\n            pc.addEventListener('iceconnectionstatechange', this.onIceConnectionStateChange);\n            pc.addEventListener('icegatheringstatechange', this.onIceGatherChange);\n            pc.addEventListener('signalingstatechange', this.onSignalingChange);\n            pc.addEventListener('connectionstatechange', this.onConnectionStateChange);\n            return pc;\n        };\n        /**\n         * Attempts to restart ICE on the `RTCPeerConnection`.\n         * This method intentionally doesn't await the `restartIce()` method,\n         * allowing it to run in the background and handle any errors that may occur.\n         */ this.tryRestartIce = ()=>{\n            this.restartIce().catch((e)=>{\n                const reason = 'restartICE() failed, initiating reconnect';\n                this.logger('error', reason, e);\n                const strategy = e instanceof NegotiationError && e.error.code === ErrorCode.PARTICIPANT_SIGNAL_LOST ? WebsocketReconnectStrategy.FAST : WebsocketReconnectStrategy.REJOIN;\n                this.onReconnectionNeeded?.(strategy, reason);\n            });\n        };\n        /**\n         * Handles events synchronously.\n         * Consecutive events are queued and executed one after the other.\n         */ this.on = (event, fn)=>{\n            this.subscriptions.push(this.dispatcher.on(event, (e)=>{\n                const lockKey = `pc.${this.lock}.${event}`;\n                withoutConcurrency(lockKey, async ()=>fn(e)).catch((err)=>{\n                    if (this.isDisposed) return;\n                    this.logger('warn', `Error handling ${event}`, err);\n                });\n            }));\n        };\n        /**\n         * Appends the trickled ICE candidates to the `RTCPeerConnection`.\n         */ this.addTrickledIceCandidates = ()=>{\n            const { iceTrickleBuffer } = this.sfuClient;\n            const observable = this.peerType === PeerType.SUBSCRIBER ? iceTrickleBuffer.subscriberCandidates : iceTrickleBuffer.publisherCandidates;\n            this.unsubscribeIceTrickle?.();\n            this.unsubscribeIceTrickle = createSafeAsyncSubscription(observable, async (candidate)=>{\n                return this.pc.addIceCandidate(candidate).catch((e)=>{\n                    if (this.isDisposed) return;\n                    this.logger('warn', `ICE candidate error`, e, candidate);\n                });\n            });\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector an optional `MediaStreamTrack` to get the stats for.\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        /**\n         * Maps the given track ID to the corresponding track type.\n         */ this.getTrackType = (trackId)=>{\n            return this.trackIdToTrackType.get(trackId);\n        };\n        /**\n         * Checks if the `RTCPeerConnection` is healthy.\n         * It checks the ICE connection state and the peer connection state.\n         * If either state is `failed`, `disconnected`, or `closed`,\n         * it returns `false`, otherwise it returns `true`.\n         */ this.isHealthy = ()=>{\n            const failedStates = new Set([\n                'failed',\n                'closed'\n            ]);\n            const iceState = this.pc.iceConnectionState;\n            const connectionState = this.pc.connectionState;\n            return !failedStates.has(iceState) && !failedStates.has(connectionState);\n        };\n        /**\n         * Handles the ICECandidate event and\n         * Initiates an ICE Trickle process with the SFU.\n         */ this.onIceCandidate = (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                this.logger('debug', 'null ice candidate');\n                return;\n            }\n            const iceCandidate = this.asJSON(candidate);\n            this.sfuClient.iceTrickle({\n                peerType: this.peerType,\n                iceCandidate\n            }).catch((err)=>{\n                if (this.isDisposed) return;\n                this.logger('warn', `ICETrickle failed`, err);\n            });\n        };\n        /**\n         * Converts the ICE candidate to a JSON string.\n         */ this.asJSON = (candidate)=>{\n            if (!candidate.usernameFragment) {\n                // react-native-webrtc doesn't include usernameFragment in the candidate\n                const segments = candidate.candidate.split(' ');\n                const ufragIndex = segments.findIndex((s)=>s === 'ufrag') + 1;\n                const usernameFragment = segments[ufragIndex];\n                return JSON.stringify({\n                    ...candidate,\n                    usernameFragment\n                });\n            }\n            return JSON.stringify(candidate.toJSON());\n        };\n        /**\n         * Handles the ConnectionStateChange event.\n         */ this.onConnectionStateChange = async ()=>{\n            const state = this.pc.connectionState;\n            this.logger('debug', `Connection state changed`, state);\n            if (this.tracer && (state === 'connected' || state === 'failed')) {\n                try {\n                    const stats = await this.stats.get();\n                    this.tracer.trace('getstats', stats.delta);\n                } catch (err) {\n                    this.tracer.trace('getstatsOnFailure', err.toString());\n                }\n            }\n            // we can't recover from a failed connection state (contrary to ICE)\n            if (state === 'failed') {\n                this.onReconnectionNeeded?.(WebsocketReconnectStrategy.REJOIN, 'Connection failed');\n                return;\n            }\n            this.handleConnectionStateUpdate(state);\n        };\n        /**\n         * Handles the ICE connection state change event.\n         */ this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            this.logger('debug', `ICE connection state changed`, state);\n            this.handleConnectionStateUpdate(state);\n        };\n        this.handleConnectionStateUpdate = (state)=>{\n            const { callingState } = this.state;\n            if (callingState === CallingState.OFFLINE) return;\n            if (callingState === CallingState.RECONNECTING) return;\n            // do nothing when ICE is restarting\n            if (this.isIceRestarting) return;\n            switch(state){\n                case 'failed':\n                    // in the `failed` state, we try to restart ICE immediately\n                    this.logger('info', 'restartICE due to failed connection');\n                    this.tryRestartIce();\n                    break;\n                case 'disconnected':\n                    // in the `disconnected` state, we schedule a restartICE() after a delay\n                    // as the browser might recover the connection in the meantime\n                    this.logger('info', 'disconnected connection, scheduling restartICE');\n                    clearTimeout(this.iceRestartTimeout);\n                    this.iceRestartTimeout = setTimeout(()=>{\n                        const currentState = this.pc.iceConnectionState;\n                        if (currentState === 'disconnected' || currentState === 'failed') {\n                            this.tryRestartIce();\n                        }\n                    }, this.iceRestartDelay);\n                    break;\n                case 'connected':\n                    // in the `connected` state, we clear the ice restart timeout if it exists\n                    if (this.iceRestartTimeout) {\n                        this.logger('info', 'connected connection, canceling restartICE');\n                        clearTimeout(this.iceRestartTimeout);\n                        this.iceRestartTimeout = undefined;\n                    }\n                    break;\n            }\n        };\n        /**\n         * Handles the ICE candidate error event.\n         */ this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent ? `${e.errorCode}: ${e.errorText}` : e;\n            this.logger('debug', 'ICE Candidate error', errorMessage);\n        };\n        /**\n         * Handles the ICE gathering state change event.\n         */ this.onIceGatherChange = ()=>{\n            this.logger('debug', `ICE Gathering State`, this.pc.iceGatheringState);\n        };\n        /**\n         * Handles the signaling state change event.\n         */ this.onSignalingChange = ()=>{\n            this.logger('debug', `Signaling state changed`, this.pc.signalingState);\n        };\n        this.peerType = peerType;\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.dispatcher = dispatcher;\n        this.iceRestartDelay = iceRestartDelay;\n        this.onReconnectionNeeded = onReconnectionNeeded;\n        this.logger = getLogger([\n            peerType === PeerType.SUBSCRIBER ? 'Subscriber' : 'Publisher',\n            tag\n        ]);\n        this.pc = this.createPeerConnection(connectionConfig);\n        this.stats = new StatsTracer(this.pc, peerType, this.trackIdToTrackType);\n        if (enableTracing) {\n            this.tracer = new Tracer(`${tag}-${peerType === PeerType.SUBSCRIBER ? 'sub' : 'pub'}`);\n            this.tracer.trace('create', {\n                url: sfuClient.edgeName,\n                ...connectionConfig\n            });\n            traceRTCPeerConnection(this.pc, this.tracer.trace);\n        }\n    }\n    /**\n     * Disposes the `RTCPeerConnection` instance.\n     */ dispose() {\n        clearTimeout(this.iceRestartTimeout);\n        this.iceRestartTimeout = undefined;\n        this.onReconnectionNeeded = undefined;\n        this.isDisposed = true;\n        this.detachEventHandlers();\n        this.pc.close();\n        this.tracer?.dispose();\n    }\n    /**\n     * Detaches the event handlers from the `RTCPeerConnection`.\n     */ detachEventHandlers() {\n        const pc = this.pc;\n        pc.removeEventListener('icecandidate', this.onIceCandidate);\n        pc.removeEventListener('icecandidateerror', this.onIceCandidateError);\n        pc.removeEventListener('signalingstatechange', this.onSignalingChange);\n        pc.removeEventListener('iceconnectionstatechange', this.onIceConnectionStateChange);\n        pc.removeEventListener('icegatheringstatechange', this.onIceGatherChange);\n        this.unsubscribeIceTrickle?.();\n        this.subscriptions.forEach((unsubscribe)=>unsubscribe());\n    }\n}\nclass TransceiverCache {\n    constructor(){\n        this.cache = [];\n        this.layers = [];\n        /**\n         * An array maintaining the order how transceivers were added to the peer connection.\n         * This is needed because some browsers (Firefox) don't reliably report\n         * trackId and `mid` parameters.\n         */ this.transceiverOrder = [];\n        /**\n         * Adds a transceiver to the cache.\n         */ this.add = (publishOption, transceiver)=>{\n            this.cache.push({\n                publishOption,\n                transceiver\n            });\n            this.transceiverOrder.push(transceiver);\n        };\n        /**\n         * Gets the transceiver for the given publish option.\n         */ this.get = (publishOption)=>{\n            return this.findTransceiver(publishOption)?.transceiver;\n        };\n        /**\n         * Checks if the cache has the given publish option.\n         */ this.has = (publishOption)=>{\n            return !!this.get(publishOption);\n        };\n        /**\n         * Finds the first transceiver that satisfies the given predicate.\n         */ this.find = (predicate)=>{\n            return this.cache.find(predicate);\n        };\n        /**\n         * Provides all the items in the cache.\n         */ this.items = ()=>{\n            return this.cache;\n        };\n        /**\n         * Init index of the transceiver in the cache.\n         */ this.indexOf = (transceiver)=>{\n            return this.transceiverOrder.indexOf(transceiver);\n        };\n        /**\n         * Gets cached video layers for the given track.\n         */ this.getLayers = (publishOption)=>{\n            const entry = this.layers.find((item)=>item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n            return entry?.layers;\n        };\n        /**\n         * Sets the video layers for the given track.\n         */ this.setLayers = (publishOption, layers = [])=>{\n            const entry = this.findLayer(publishOption);\n            if (entry) {\n                entry.layers = layers;\n            } else {\n                this.layers.push({\n                    publishOption,\n                    layers\n                });\n            }\n        };\n        this.findTransceiver = (publishOption)=>{\n            return this.cache.find((item)=>item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n        };\n        this.findLayer = (publishOption)=>{\n            return this.layers.find((item)=>item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n        };\n    }\n}\nconst ensureExhausted = (x, message)=>{\n    getLogger([\n        'helpers'\n    ])('warn', message, x);\n};\nconst trackTypeToParticipantStreamKey = (trackType)=>{\n    switch(trackType){\n        case TrackType.SCREEN_SHARE:\n            return 'screenShareStream';\n        case TrackType.SCREEN_SHARE_AUDIO:\n            return 'screenShareAudioStream';\n        case TrackType.VIDEO:\n            return 'videoStream';\n        case TrackType.AUDIO:\n            return 'audioStream';\n        case TrackType.UNSPECIFIED:\n            throw new Error('Track type is unspecified');\n        default:\n            ensureExhausted(trackType, 'Unknown track type');\n    }\n};\nconst muteTypeToTrackType = (muteType)=>{\n    switch(muteType){\n        case 'audio':\n            return TrackType.AUDIO;\n        case 'video':\n            return TrackType.VIDEO;\n        case 'screenshare':\n            return TrackType.SCREEN_SHARE;\n        case 'screenshare_audio':\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            ensureExhausted(muteType, 'Unknown mute type');\n    }\n};\nconst toTrackType = (trackType)=>{\n    switch(trackType){\n        case 'TRACK_TYPE_AUDIO':\n            return TrackType.AUDIO;\n        case 'TRACK_TYPE_VIDEO':\n            return TrackType.VIDEO;\n        case 'TRACK_TYPE_SCREEN_SHARE':\n            return TrackType.SCREEN_SHARE;\n        case 'TRACK_TYPE_SCREEN_SHARE_AUDIO':\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            return undefined;\n    }\n};\nconst isAudioTrackType = (trackType)=>trackType === TrackType.AUDIO || trackType === TrackType.SCREEN_SHARE_AUDIO;\nconst defaultBitratePerRid = {\n    q: 300000,\n    h: 750000,\n    f: 1250000\n};\n/**\n * In SVC, we need to send only one video encoding (layer).\n * this layer will have the additional spatial and temporal layers\n * defined via the scalabilityMode property.\n *\n * @param layers the layers to process.\n */ const toSvcEncodings = (layers)=>{\n    if (!layers) return;\n    // we take the highest quality layer, and we assign it to `q` encoder.\n    const withRid = (rid)=>(l)=>l.rid === rid;\n    const highestLayer = layers.find(withRid('f')) || layers.find(withRid('h')) || layers.find(withRid('q'));\n    return [\n        {\n            ...highestLayer,\n            rid: 'q'\n        }\n    ];\n};\n/**\n * Converts the rid to a video quality.\n */ const ridToVideoQuality = (rid)=>{\n    return rid === 'q' ? VideoQuality.LOW_UNSPECIFIED : rid === 'h' ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n};\n/**\n * Converts the given video layers to SFU video layers.\n */ const toVideoLayers = (layers = [])=>{\n    return layers.map((layer)=>({\n            rid: layer.rid || '',\n            bitrate: layer.maxBitrate || 0,\n            fps: layer.maxFramerate || 0,\n            quality: ridToVideoQuality(layer.rid || ''),\n            videoDimension: {\n                width: layer.width,\n                height: layer.height\n            }\n        }));\n};\n/**\n * Converts the spatial and temporal layers to a scalability mode.\n */ const toScalabilityMode = (spatialLayers, temporalLayers)=>`L${spatialLayers}T${temporalLayers}${spatialLayers > 1 ? '_KEY' : ''}`;\n/**\n * Determines the most optimal video layers for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param publishOption the publish options for the track.\n */ const computeVideoLayers = (videoTrack, publishOption)=>{\n    if (isAudioTrackType(publishOption.trackType)) return;\n    const optimalVideoLayers = [];\n    const { bitrate, codec, fps = 30, maxSpatialLayers = 3, maxTemporalLayers = 3, videoDimension = {\n        width: 1280,\n        height: 720\n    }, useSingleLayer } = publishOption;\n    const { width = videoDimension.width, height = videoDimension.height } = videoTrack.getSettings();\n    const maxBitrate = getComputedMaxBitrate(videoDimension, width, height, bitrate);\n    let downscaleFactor = 1;\n    let bitrateFactor = 1;\n    const svcCodec = isSvcCodec(codec?.name);\n    for (const rid of [\n        'f',\n        'h',\n        'q'\n    ].slice(0, maxSpatialLayers)){\n        const layer = {\n            active: true,\n            rid,\n            width: Math.round(width / downscaleFactor),\n            height: Math.round(height / downscaleFactor),\n            maxBitrate: Math.round(maxBitrate / bitrateFactor) || defaultBitratePerRid[rid],\n            maxFramerate: fps\n        };\n        if (svcCodec) {\n            // for SVC codecs, we need to set the scalability mode, and the\n            // codec will handle the rest (layers, temporal layers, etc.)\n            layer.scalabilityMode = toScalabilityMode(useSingleLayer ? 1 : maxSpatialLayers, maxTemporalLayers);\n        } else {\n            // for non-SVC codecs, we need to downscale proportionally (simulcast)\n            layer.scaleResolutionDownBy = downscaleFactor;\n        }\n        downscaleFactor *= 2;\n        bitrateFactor *= 2;\n        // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n        // when deciding which layer to disable when CPU or bandwidth is constrained.\n        // Encodings should be ordered in increasing spatial resolution order.\n        optimalVideoLayers.unshift(layer);\n    }\n    // for simplicity, we start with all layers enabled, then this function\n    // will clear/reassign the layers that are not needed\n    return withSimulcastConstraints(width, height, optimalVideoLayers, useSingleLayer);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n * @param bitrate the target bitrate.\n */ const getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight, bitrate)=>{\n    // if the current resolution is lower than the target resolution,\n    // we want to proportionally reduce the target bitrate\n    const { width: targetWidth, height: targetHeight } = targetResolution;\n    if (currentWidth < targetWidth || currentHeight < targetHeight) {\n        const currentPixels = currentWidth * currentHeight;\n        const targetPixels = targetWidth * targetHeight;\n        const reductionFactor = currentPixels / targetPixels;\n        return Math.round(bitrate * reductionFactor);\n    }\n    return bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */ const withSimulcastConstraints = (width, height, optimalVideoLayers, useSingleLayer)=>{\n    let layers;\n    const size = Math.max(width, height);\n    if (size <= 320) {\n        // provide only one layer 320x240 (f), the one with the highest quality\n        layers = optimalVideoLayers.filter((layer)=>layer.rid === 'f');\n    } else if (size <= 640) {\n        // provide two layers, 320x240 (h) and 640x480 (f)\n        layers = optimalVideoLayers.filter((layer)=>layer.rid !== 'q');\n    } else {\n        // provide three layers for sizes > 640x480\n        layers = optimalVideoLayers;\n    }\n    // we might have removed some layers, so we need to reassign the rid\n    // to match the expected order of [q, h, f] for simulcast\n    const ridMapping = [\n        'q',\n        'h',\n        'f'\n    ];\n    return layers.map((layer, index, arr)=>({\n            ...layer,\n            rid: ridMapping[index],\n            active: useSingleLayer && index < arr.length - 1 ? false : layer.active\n        }));\n};\n/**\n * Extracts the mid from the transceiver or the SDP.\n *\n * @param transceiver the transceiver.\n * @param transceiverInitIndex the index of the transceiver in the transceiver's init array.\n * @param sdp the SDP.\n */ const extractMid = (transceiver, transceiverInitIndex, sdp)=>{\n    if (transceiver.mid) return transceiver.mid;\n    if (!sdp) return String(transceiverInitIndex);\n    const track = transceiver.sender.track;\n    const parsedSdp = (0,sdp_transform__WEBPACK_IMPORTED_MODULE_3__.parse)(sdp);\n    const media = parsedSdp.media.find((m)=>{\n        return m.type === track.kind && // if `msid` is not present, we assume that the track is the first one\n        (m.msid?.includes(track.id) ?? true);\n    });\n    if (typeof media?.mid !== 'undefined') return String(media.mid);\n    if (transceiverInitIndex < 0) return '';\n    return String(transceiverInitIndex);\n};\n/**\n * Enables stereo in the answer SDP based on the offered stereo in the offer SDP.\n *\n * @param offerSdp the offer SDP containing the stereo configuration.\n * @param answerSdp the answer SDP to be modified.\n */ const enableStereo = (offerSdp, answerSdp)=>{\n    const offeredStereoMids = new Set();\n    const parsedOfferSdp = (0,sdp_transform__WEBPACK_IMPORTED_MODULE_3__.parse)(offerSdp);\n    for (const media of parsedOfferSdp.media){\n        if (media.type !== 'audio') continue;\n        const opus = media.rtp.find((r)=>r.codec === 'opus');\n        if (!opus) continue;\n        for (const fmtp of media.fmtp){\n            if (fmtp.payload === opus.payload && fmtp.config.includes('stereo=1')) {\n                offeredStereoMids.add(media.mid);\n            }\n        }\n    }\n    // No stereo offered, return the original answerSdp\n    if (offeredStereoMids.size === 0) return answerSdp;\n    const parsedAnswerSdp = (0,sdp_transform__WEBPACK_IMPORTED_MODULE_3__.parse)(answerSdp);\n    for (const media of parsedAnswerSdp.media){\n        if (media.type !== 'audio' || !offeredStereoMids.has(media.mid)) continue;\n        const opus = media.rtp.find((r)=>r.codec === 'opus');\n        if (!opus) continue;\n        for (const fmtp of media.fmtp){\n            if (fmtp.payload === opus.payload && !fmtp.config.includes('stereo=1')) {\n                fmtp.config += ';stereo=1';\n            }\n        }\n    }\n    return (0,sdp_transform__WEBPACK_IMPORTED_MODULE_3__.write)(parsedAnswerSdp);\n};\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n *\n * @internal\n */ class Publisher extends BasePeerConnection {\n    /**\n     * Constructs a new `Publisher` instance.\n     */ constructor({ publishOptions, ...baseOptions }){\n        super(PeerType.PUBLISHER_UNSPECIFIED, baseOptions);\n        this.transceiverCache = new TransceiverCache();\n        this.clonedTracks = new Set();\n        /**\n         * Starts publishing the given track of the given media stream.\n         *\n         * Consecutive calls to this method will replace the stream.\n         * The previous stream will be stopped.\n         *\n         * @param track the track to publish.\n         * @param trackType the track type to publish.\n         */ this.publish = async (track, trackType)=>{\n            if (!this.publishOptions.some((o)=>o.trackType === trackType)) {\n                throw new Error(`No publish options found for ${TrackType[trackType]}`);\n            }\n            for (const publishOption of this.publishOptions){\n                if (publishOption.trackType !== trackType) continue;\n                // create a clone of the track as otherwise the same trackId will\n                // appear in the SDP in multiple transceivers\n                const trackToPublish = this.cloneTrack(track);\n                const transceiver = this.transceiverCache.get(publishOption);\n                if (!transceiver) {\n                    await this.addTransceiver(trackToPublish, publishOption);\n                } else {\n                    const previousTrack = transceiver.sender.track;\n                    await this.updateTransceiver(transceiver, trackToPublish, trackType);\n                    if (!isReactNative()) {\n                        this.stopTrack(previousTrack);\n                    }\n                }\n            }\n        };\n        /**\n         * Adds a new transceiver carrying the given track to the peer connection.\n         */ this.addTransceiver = async (track, publishOption)=>{\n            const videoEncodings = computeVideoLayers(track, publishOption);\n            const sendEncodings = isSvcCodec(publishOption.codec?.name) ? toSvcEncodings(videoEncodings) : videoEncodings;\n            const transceiver = this.pc.addTransceiver(track, {\n                direction: 'sendonly',\n                sendEncodings\n            });\n            const params = transceiver.sender.getParameters();\n            params.degradationPreference = 'maintain-framerate';\n            await transceiver.sender.setParameters(params);\n            const trackType = publishOption.trackType;\n            this.logger('debug', `Added ${TrackType[trackType]} transceiver`);\n            this.transceiverCache.add(publishOption, transceiver);\n            this.trackIdToTrackType.set(track.id, trackType);\n            await this.negotiate();\n        };\n        /**\n         * Updates the transceiver with the given track and track type.\n         */ this.updateTransceiver = async (transceiver, track, trackType)=>{\n            const sender = transceiver.sender;\n            if (sender.track) this.trackIdToTrackType.delete(sender.track.id);\n            await sender.replaceTrack(track);\n            if (track) this.trackIdToTrackType.set(track.id, trackType);\n        };\n        /**\n         * Synchronizes the current Publisher state with the provided publish options.\n         */ this.syncPublishOptions = async ()=>{\n            // enable publishing with new options -> [av1, vp9]\n            for (const publishOption of this.publishOptions){\n                const { trackType } = publishOption;\n                if (!this.isPublishing(trackType)) continue;\n                if (this.transceiverCache.has(publishOption)) continue;\n                const item = this.transceiverCache.find((i)=>!!i.transceiver.sender.track && i.publishOption.trackType === trackType);\n                if (!item || !item.transceiver) continue;\n                // take the track from the existing transceiver for the same track type,\n                // clone it and publish it with the new publish options\n                const track = this.cloneTrack(item.transceiver.sender.track);\n                await this.addTransceiver(track, publishOption);\n            }\n            // stop publishing with options not required anymore -> [vp9]\n            for (const item of this.transceiverCache.items()){\n                const { publishOption, transceiver } = item;\n                const hasPublishOption = this.publishOptions.some((option)=>option.id === publishOption.id && option.trackType === publishOption.trackType);\n                if (hasPublishOption) continue;\n                // it is safe to stop the track here, it is a clone\n                this.stopTrack(transceiver.sender.track);\n                await this.updateTransceiver(transceiver, null, publishOption.trackType);\n            }\n        };\n        /**\n         * Returns true if the given track type is currently being published to the SFU.\n         *\n         * @param trackType the track type to check. If omitted, checks if any track is being published.\n         */ this.isPublishing = (trackType)=>{\n            for (const item of this.transceiverCache.items()){\n                if (trackType && item.publishOption.trackType !== trackType) continue;\n                const track = item.transceiver.sender.track;\n                if (!track) continue;\n                if (track.readyState === 'live' && track.enabled) return true;\n            }\n            return false;\n        };\n        /**\n         * Stops the cloned track that is being published to the SFU.\n         */ this.stopTracks = (...trackTypes)=>{\n            for (const item of this.transceiverCache.items()){\n                const { publishOption, transceiver } = item;\n                if (!trackTypes.includes(publishOption.trackType)) continue;\n                this.stopTrack(transceiver.sender.track);\n            }\n        };\n        /**\n         * Stops all the cloned tracks that are being published to the SFU.\n         */ this.stopAllTracks = ()=>{\n            for (const { transceiver } of this.transceiverCache.items()){\n                this.stopTrack(transceiver.sender.track);\n            }\n            for (const track of this.clonedTracks){\n                this.stopTrack(track);\n            }\n        };\n        this.changePublishQuality = async (videoSender)=>{\n            const { trackType, layers, publishOptionId } = videoSender;\n            const enabledLayers = layers.filter((l)=>l.active);\n            const tag = 'Update publish quality:';\n            this.logger('info', `${tag} requested layers by SFU:`, enabledLayers);\n            const transceiverId = this.transceiverCache.find((t)=>t.publishOption.id === publishOptionId && t.publishOption.trackType === trackType);\n            const sender = transceiverId?.transceiver.sender;\n            if (!sender) {\n                return this.logger('warn', `${tag} no video sender found.`);\n            }\n            const params = sender.getParameters();\n            if (params.encodings.length === 0) {\n                return this.logger('warn', `${tag} there are no encodings set.`);\n            }\n            const codecInUse = transceiverId?.publishOption.codec?.name;\n            const usesSvcCodec = codecInUse && isSvcCodec(codecInUse);\n            let changed = false;\n            for (const encoder of params.encodings){\n                const layer = usesSvcCodec ? enabledLayers[0] : enabledLayers.find((l)=>l.name === encoder.rid) ?? (params.encodings.length === 1 ? enabledLayers[0] : undefined);\n                // flip 'active' flag only when necessary\n                const shouldActivate = !!layer?.active;\n                if (shouldActivate !== encoder.active) {\n                    encoder.active = shouldActivate;\n                    changed = true;\n                }\n                // skip the rest of the settings if the layer is disabled or not found\n                if (!layer) continue;\n                const { maxFramerate, scaleResolutionDownBy, maxBitrate, scalabilityMode } = layer;\n                if (scaleResolutionDownBy >= 1 && scaleResolutionDownBy !== encoder.scaleResolutionDownBy) {\n                    encoder.scaleResolutionDownBy = scaleResolutionDownBy;\n                    changed = true;\n                }\n                if (maxBitrate > 0 && maxBitrate !== encoder.maxBitrate) {\n                    encoder.maxBitrate = maxBitrate;\n                    changed = true;\n                }\n                if (maxFramerate > 0 && maxFramerate !== encoder.maxFramerate) {\n                    encoder.maxFramerate = maxFramerate;\n                    changed = true;\n                }\n                // @ts-expect-error scalabilityMode is not in the typedefs yet\n                if (scalabilityMode && scalabilityMode !== encoder.scalabilityMode) {\n                    // @ts-expect-error scalabilityMode is not in the typedefs yet\n                    encoder.scalabilityMode = scalabilityMode;\n                    changed = true;\n                }\n            }\n            const activeEncoders = params.encodings.filter((e)=>e.active);\n            if (!changed) {\n                return this.logger('info', `${tag} no change:`, activeEncoders);\n            }\n            await sender.setParameters(params);\n            this.logger('info', `${tag} enabled rids:`, activeEncoders);\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            this.logger('debug', 'Restarting ICE connection');\n            const signalingState = this.pc.signalingState;\n            if (this.isIceRestarting || signalingState === 'have-local-offer') {\n                this.logger('debug', 'ICE restart is already in progress');\n                return;\n            }\n            await this.negotiate({\n                iceRestart: true\n            });\n        };\n        /**\n         * Initiates a new offer/answer exchange with the currently connected SFU.\n         *\n         * @param options the optional offer options to use.\n         */ this.negotiate = async (options)=>{\n            return withoutConcurrency(`publisher.negotiate.${this.lock}`, async ()=>{\n                const offer = await this.pc.createOffer(options);\n                const tracks = this.getAnnouncedTracks(offer.sdp);\n                if (!tracks.length) throw new Error(`Can't negotiate without any tracks`);\n                try {\n                    this.isIceRestarting = options?.iceRestart ?? false;\n                    await this.pc.setLocalDescription(offer);\n                    const { sdp = '' } = offer;\n                    const { response } = await this.sfuClient.setPublisher({\n                        sdp,\n                        tracks\n                    });\n                    if (response.error) throw new NegotiationError(response.error);\n                    const { sdp: answerSdp } = response;\n                    await this.pc.setRemoteDescription({\n                        type: 'answer',\n                        sdp: answerSdp\n                    });\n                } catch (err) {\n                    // negotiation failed, rollback to the previous state\n                    if (this.pc.signalingState === 'have-local-offer') {\n                        await this.pc.setLocalDescription({\n                            type: 'rollback'\n                        });\n                    }\n                    throw err;\n                } finally{\n                    this.isIceRestarting = false;\n                }\n                this.addTrickledIceCandidates();\n            });\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         */ this.getPublishedTracks = ()=>{\n            const tracks = [];\n            for (const { transceiver } of this.transceiverCache.items()){\n                const track = transceiver.sender.track;\n                if (track && track.readyState === 'live') tracks.push(track);\n            }\n            return tracks;\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         * @param sdp an optional SDP to extract the `mid` from.\n         */ this.getAnnouncedTracks = (sdp)=>{\n            const trackInfos = [];\n            for (const bundle of this.transceiverCache.items()){\n                const { transceiver, publishOption } = bundle;\n                const track = transceiver.sender.track;\n                if (!track) continue;\n                trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n            }\n            return trackInfos;\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         * This method shall be used for the reconnection flow.\n         * There we shouldn't announce the tracks that have been stopped due to a codec switch.\n         */ this.getAnnouncedTracksForReconnect = ()=>{\n            const sdp = this.pc.localDescription?.sdp;\n            const trackInfos = [];\n            for (const publishOption of this.publishOptions){\n                const transceiver = this.transceiverCache.get(publishOption);\n                if (!transceiver || !transceiver.sender.track) continue;\n                trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n            }\n            return trackInfos;\n        };\n        /**\n         * Converts the given transceiver to a `TrackInfo` object.\n         */ this.toTrackInfo = (transceiver, publishOption, sdp)=>{\n            const track = transceiver.sender.track;\n            const isTrackLive = track.readyState === 'live';\n            const layers = isTrackLive ? computeVideoLayers(track, publishOption) : this.transceiverCache.getLayers(publishOption);\n            this.transceiverCache.setLayers(publishOption, layers);\n            const isAudioTrack = isAudioTrackType(publishOption.trackType);\n            const isStereo = isAudioTrack && track.getSettings().channelCount === 2;\n            const transceiverIndex = this.transceiverCache.indexOf(transceiver);\n            const audioSettings = this.state.settings?.audio;\n            return {\n                trackId: track.id,\n                layers: toVideoLayers(layers),\n                trackType: publishOption.trackType,\n                mid: extractMid(transceiver, transceiverIndex, sdp),\n                stereo: isStereo,\n                dtx: isAudioTrack && !!audioSettings?.opus_dtx_enabled,\n                red: isAudioTrack && !!audioSettings?.redundant_coding_enabled,\n                muted: !isTrackLive,\n                codec: publishOption.codec,\n                publishOptionId: publishOption.id\n            };\n        };\n        this.cloneTrack = (track)=>{\n            const clone = track.clone();\n            this.clonedTracks.add(clone);\n            return clone;\n        };\n        this.stopTrack = (track)=>{\n            if (!track) return;\n            track.stop();\n            this.clonedTracks.delete(track);\n        };\n        this.publishOptions = publishOptions;\n        this.on('iceRestart', (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n            this.tryRestartIce();\n        });\n        this.on('changePublishQuality', async (event)=>{\n            for (const videoSender of event.videoSenders){\n                await this.changePublishQuality(videoSender);\n            }\n        });\n        this.on('changePublishOptions', (event)=>{\n            this.publishOptions = event.publishOptions;\n            return this.syncPublishOptions();\n        });\n    }\n    /**\n     * Disposes this Publisher instance.\n     */ dispose() {\n        super.dispose();\n        this.stopAllTracks();\n        this.clonedTracks.clear();\n    }\n}\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n *\n * @internal\n */ class Subscriber extends BasePeerConnection {\n    /**\n     * Constructs a new `Subscriber` instance.\n     */ constructor(opts){\n        super(PeerType.SUBSCRIBER, opts);\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            this.logger('debug', 'Restarting ICE connection');\n            if (this.pc.signalingState === 'have-remote-offer') {\n                this.logger('debug', 'ICE restart is already in progress');\n                return;\n            }\n            if (this.pc.connectionState === 'new') {\n                this.logger('debug', `ICE connection is not yet established, skipping restart.`);\n                return;\n            }\n            const previousIsIceRestarting = this.isIceRestarting;\n            this.isIceRestarting = true;\n            try {\n                const { response } = await this.sfuClient.iceRestart({\n                    peerType: PeerType.SUBSCRIBER\n                });\n                if (response.error) throw new NegotiationError(response.error);\n            } catch (e) {\n                // restore the previous state, as our intent for restarting ICE failed\n                this.isIceRestarting = previousIsIceRestarting;\n                throw e;\n            }\n        };\n        this.handleOnTrack = (e)=>{\n            const [primaryStream] = e.streams;\n            // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n            const [trackId, rawTrackType] = primaryStream.id.split(':');\n            const participantToUpdate = this.state.participants.find((p)=>p.trackLookupPrefix === trackId);\n            this.logger('debug', `[onTrack]: Got remote ${rawTrackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n            const trackDebugInfo = `${participantToUpdate?.userId} ${rawTrackType}:${trackId}`;\n            e.track.addEventListener('mute', ()=>{\n                this.logger('info', `[onTrack]: Track muted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener('unmute', ()=>{\n                this.logger('info', `[onTrack]: Track unmuted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener('ended', ()=>{\n                this.logger('info', `[onTrack]: Track ended: ${trackDebugInfo}`);\n                this.state.removeOrphanedTrack(primaryStream.id);\n            });\n            const trackType = toTrackType(rawTrackType);\n            if (!trackType) {\n                return this.logger('error', `Unknown track type: ${rawTrackType}`);\n            }\n            this.trackIdToTrackType.set(e.track.id, trackType);\n            if (!participantToUpdate) {\n                this.logger('warn', `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n                this.state.registerOrphanedTrack({\n                    id: primaryStream.id,\n                    trackLookupPrefix: trackId,\n                    track: primaryStream,\n                    trackType\n                });\n                return;\n            }\n            const streamKindProp = trackTypeToParticipantStreamKey(trackType);\n            if (!streamKindProp) {\n                this.logger('error', `Unknown track type: ${rawTrackType}`);\n                return;\n            }\n            // get the previous stream to dispose it later\n            // usually this happens during migration, when the stream is replaced\n            // with a new one but the old one is still in the state\n            const previousStream = participantToUpdate[streamKindProp];\n            // replace the previous stream with the new one, prevents flickering\n            this.state.updateParticipant(participantToUpdate.sessionId, {\n                [streamKindProp]: primaryStream\n            });\n            // now, dispose the previous stream if it exists\n            if (previousStream) {\n                this.logger('info', `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n                previousStream.getTracks().forEach((t)=>{\n                    t.stop();\n                    previousStream.removeTrack(t);\n                });\n            }\n        };\n        this.negotiate = async (subscriberOffer)=>{\n            await this.pc.setRemoteDescription({\n                type: 'offer',\n                sdp: subscriberOffer.sdp\n            });\n            this.addTrickledIceCandidates();\n            const answer = await this.pc.createAnswer();\n            if (answer.sdp) {\n                answer.sdp = enableStereo(subscriberOffer.sdp, answer.sdp);\n            }\n            await this.pc.setLocalDescription(answer);\n            await this.sfuClient.sendAnswer({\n                peerType: PeerType.SUBSCRIBER,\n                sdp: answer.sdp || ''\n            });\n            this.isIceRestarting = false;\n        };\n        this.pc.addEventListener('track', this.handleOnTrack);\n        this.on('subscriberOffer', async (subscriberOffer)=>{\n            return this.negotiate(subscriberOffer).catch((err)=>{\n                this.logger('error', `Negotiation failed.`, err);\n            });\n        });\n    }\n    /**\n     * Detaches the event handlers from the `RTCPeerConnection`.\n     * This is useful when we want to replace the `RTCPeerConnection`\n     * instance with a new one (in case of migration).\n     */ detachEventHandlers() {\n        super.detachEventHandlers();\n        this.pc.removeEventListener('track', this.handleOnTrack);\n    }\n}\nconst createWebSocketSignalChannel = (opts)=>{\n    const { endpoint, onMessage, tag, tracer } = opts;\n    const logger = getLogger([\n        'SfuClientWS',\n        tag\n    ]);\n    logger('debug', 'Creating signaling WS channel:', endpoint);\n    const ws = new WebSocket(endpoint);\n    ws.binaryType = 'arraybuffer'; // do we need this?\n    ws.addEventListener('error', (e)=>{\n        logger('error', 'Signaling WS channel error', e);\n        tracer?.trace('signal.ws.error', e);\n    });\n    ws.addEventListener('close', (e)=>{\n        logger('info', 'Signaling WS channel is closed', e);\n        tracer?.trace('signal.ws.close', e);\n    });\n    ws.addEventListener('open', (e)=>{\n        logger('info', 'Signaling WS channel is open', e);\n        tracer?.trace('signal.ws.open', e);\n    });\n    ws.addEventListener('message', (e)=>{\n        try {\n            const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n            onMessage(message);\n        } catch (err) {\n            const message = 'Failed to decode a message. Check whether the Proto models match.';\n            logger('error', message, {\n                event: e,\n                error: err\n            });\n            tracer?.trace('signal.ws.message.error', message);\n        }\n    });\n    return ws;\n};\nconst toRtcConfiguration = (config)=>{\n    return {\n        bundlePolicy: 'max-bundle',\n        iceServers: config.map((ice)=>({\n                urls: ice.urls,\n                username: ice.username,\n                credential: ice.password\n            }))\n    };\n};\n/**\n * Saving a long-lived reference to a promise that can reject can be unsafe,\n * since rejecting the promise causes an unhandled rejection error (even if the\n * rejection is handled everywhere promise result is expected).\n *\n * To avoid that, we add both resolution and rejection handlers to the promise.\n * That way, the saved promise never rejects. A callback is provided as return\n * value to build a *new* promise, that resolves and rejects along with\n * the original promise.\n * @param promise Promise to wrap, which possibly rejects\n * @returns Callback to build a new promise, which resolves and rejects along\n * with the original promise\n */ function makeSafePromise(promise) {\n    let isPending = true;\n    const safePromise = promise.then((result)=>({\n            status: 'resolved',\n            result\n        }), (error)=>({\n            status: 'rejected',\n            error\n        })).finally(()=>isPending = false);\n    const unwrapPromise = ()=>safePromise.then((fulfillment)=>{\n            if (fulfillment.status === 'rejected') throw fulfillment.error;\n            return fulfillment.result;\n        });\n    unwrapPromise.checkPending = ()=>isPending;\n    return unwrapPromise;\n}\n/**\n * Creates a new promise with resolvers.\n *\n * Based on:\n * - https://github.com/tc39/proposal-promise-with-resolvers/blob/main/polyfills.js\n */ const promiseWithResolvers = ()=>{\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    let isResolved = false;\n    let isRejected = false;\n    const resolver = (value)=>{\n        isResolved = true;\n        resolve(value);\n    };\n    const rejecter = (reason)=>{\n        isRejected = true;\n        reject(reason);\n    };\n    return {\n        promise,\n        resolve: resolver,\n        reject: rejecter,\n        isResolved: ()=>isResolved,\n        isRejected: ()=>isRejected\n    };\n};\nconst uninitialized = Symbol('uninitialized');\n/**\n * Lazily creates a value using a provided factory\n */ function lazy(factory) {\n    let value = uninitialized;\n    return (...args)=>{\n        if (value === uninitialized) {\n            value = factory(...args);\n        }\n        return value;\n    };\n}\n// Do not modify this file manually. Instead, edit worker.ts\n// and the run ./generate-timer-worker.sh\nconst timerWorker = {\n    src: `const timerIdMapping = new Map();\nself.addEventListener('message', (event) => {\n    const request = event.data;\n    switch (request.type) {\n        case 'setTimeout':\n        case 'setInterval':\n            timerIdMapping.set(request.id, (request.type === 'setTimeout' ? setTimeout : setInterval)(() => {\n                tick(request.id);\n                if (request.type === 'setTimeout') {\n                    timerIdMapping.delete(request.id);\n                }\n            }, request.timeout));\n            break;\n        case 'clearTimeout':\n        case 'clearInterval':\n            (request.type === 'clearTimeout' ? clearTimeout : clearInterval)(timerIdMapping.get(request.id));\n            timerIdMapping.delete(request.id);\n            break;\n    }\n});\nfunction tick(id) {\n    const message = { type: 'tick', id };\n    self.postMessage(message);\n}`\n};\nclass TimerWorker {\n    constructor(){\n        this.currentTimerId = 1;\n        this.callbacks = new Map();\n        this.fallback = false;\n    }\n    setup({ useTimerWorker = true } = {}) {\n        if (!useTimerWorker) {\n            this.fallback = true;\n            return;\n        }\n        try {\n            const source = timerWorker.src;\n            const blob = new Blob([\n                source\n            ], {\n                type: 'application/javascript; charset=utf-8'\n            });\n            const script = URL.createObjectURL(blob);\n            this.worker = new Worker(script, {\n                name: 'str-timer-worker'\n            });\n            this.worker.addEventListener('message', (event)=>{\n                const { type, id } = event.data;\n                if (type === 'tick') {\n                    this.callbacks.get(id)?.();\n                }\n            });\n        } catch (err) {\n            getLogger([\n                'timer-worker'\n            ])('error', err);\n            this.fallback = true;\n        }\n    }\n    destroy() {\n        this.callbacks.clear();\n        this.worker?.terminate();\n        this.worker = undefined;\n        this.fallback = false;\n    }\n    get ready() {\n        return this.fallback || Boolean(this.worker);\n    }\n    setInterval(callback, timeout) {\n        return this.setTimer('setInterval', callback, timeout);\n    }\n    clearInterval(id) {\n        this.clearTimer('clearInterval', id);\n    }\n    setTimeout(callback, timeout) {\n        return this.setTimer('setTimeout', callback, timeout);\n    }\n    clearTimeout(id) {\n        this.clearTimer('clearTimeout', id);\n    }\n    setTimer(type, callback, timeout) {\n        if (!this.ready) {\n            this.setup();\n        }\n        if (this.fallback) {\n            return (type === 'setTimeout' ? setTimeout : setInterval)(callback, timeout);\n        }\n        const id = this.getTimerId();\n        this.callbacks.set(id, ()=>{\n            callback();\n            // Timeouts are one-off operations, so no need to keep callback reference\n            // after timer has fired\n            if (type === 'setTimeout') {\n                this.callbacks.delete(id);\n            }\n        });\n        this.sendMessage({\n            type,\n            id,\n            timeout\n        });\n        return id;\n    }\n    clearTimer(type, id) {\n        if (!id) {\n            return;\n        }\n        if (!this.ready) {\n            this.setup();\n        }\n        if (this.fallback) {\n            (type === 'clearTimeout' ? clearTimeout : clearInterval)(id);\n            return;\n        }\n        this.callbacks.delete(id);\n        this.sendMessage({\n            type,\n            id\n        });\n    }\n    getTimerId() {\n        return this.currentTimerId++;\n    }\n    sendMessage(message) {\n        if (!this.worker) {\n            throw new Error(\"Cannot use timer worker before it's set up\");\n        }\n        this.worker.postMessage(message);\n    }\n}\nlet timerWorkerEnabled = false;\nconst enableTimerWorker = ()=>{\n    timerWorkerEnabled = true;\n};\nconst getTimers = lazy(()=>{\n    const instance = new TimerWorker();\n    instance.setup({\n        useTimerWorker: timerWorkerEnabled\n    });\n    return instance;\n});\n/**\n * The client used for exchanging information with the SFU.\n */ class StreamSfuClient {\n    /**\n     * Constructs a new SFU client.\n     */ constructor({ dispatcher, credentials, sessionId, cid, tag, joinResponseTimeout = 5000, onSignalClose, streamClient, enableTracing }){\n        /**\n         * A buffer for ICE Candidates that are received before\n         * the Publisher and Subscriber Peer Connections are ready to handle them.\n         */ this.iceTrickleBuffer = new IceTrickleBuffer();\n        /**\n         * Flag to indicate if the client is in the process of leaving the call.\n         * This is set to `true` when the user initiates the leave process.\n         */ this.isLeaving = false;\n        /**\n         * Flag to indicate if the client is in the process of clean closing the connection.\n         * When set to `true`, the client will not attempt to reconnect\n         * and will close the WebSocket connection gracefully.\n         * Otherwise, it will close the connection with an error code and\n         * trigger a reconnection attempt.\n         */ this.isClosingClean = false;\n        this.pingIntervalInMs = 5 * 1000;\n        this.unhealthyTimeoutInMs = 15 * 1000;\n        /**\n         * Promise that resolves when the JoinResponse is received.\n         * Rejects after a certain threshold if the response is not received.\n         */ this.joinResponseTask = promiseWithResolvers();\n        /**\n         * A controller to abort the current requests.\n         */ this.abortController = new AbortController();\n        this.createWebSocket = (params)=>{\n            const eventsToTrace = {\n                callEnded: true,\n                changePublishQuality: true,\n                changePublishOptions: true,\n                connectionQualityChanged: true,\n                error: true,\n                goAway: true,\n                inboundStateNotification: true\n            };\n            this.signalWs = createWebSocketSignalChannel({\n                tag: this.tag,\n                endpoint: `${this.credentials.server.ws_endpoint}?${new URLSearchParams(params).toString()}`,\n                tracer: this.tracer,\n                onMessage: (message)=>{\n                    this.lastMessageTimestamp = new Date();\n                    this.scheduleConnectionCheck();\n                    const eventKind = message.eventPayload.oneofKind;\n                    if (eventsToTrace[eventKind]) {\n                        this.tracer?.trace(eventKind, message);\n                    }\n                    this.dispatcher.dispatch(message, this.tag);\n                }\n            });\n            let timeoutId;\n            this.signalReady = makeSafePromise(Promise.race([\n                new Promise((resolve, reject)=>{\n                    let didOpen = false;\n                    const onOpen = ()=>{\n                        didOpen = true;\n                        clearTimeout(timeoutId);\n                        this.signalWs.removeEventListener('open', onOpen);\n                        resolve(this.signalWs);\n                    };\n                    this.signalWs.addEventListener('open', onOpen);\n                    this.signalWs.addEventListener('close', (e)=>{\n                        this.handleWebSocketClose(e);\n                        // Normally, this shouldn't have any effect, because WS should never emit 'close'\n                        // before emitting 'open'. However, stranger things have happened, and we don't\n                        // want to leave signalReady in a pending state.\n                        const message = didOpen ? `SFU WS closed: ${e.code} ${e.reason}` : `SFU WS connection can't be established: ${e.code} ${e.reason}`;\n                        this.tracer?.trace('signal.close', message);\n                        clearTimeout(timeoutId);\n                        reject(new Error(message));\n                    });\n                }),\n                new Promise((resolve, reject)=>{\n                    timeoutId = setTimeout(()=>{\n                        const message = `SFU WS connection failed to open after ${this.joinResponseTimeout}ms`;\n                        this.tracer?.trace('signal.timeout', message);\n                        reject(new Error(message));\n                    }, this.joinResponseTimeout);\n                })\n            ]));\n        };\n        this.handleWebSocketClose = (e)=>{\n            this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n            getTimers().clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n            this.onSignalClose?.(`${e.code} ${e.reason}`);\n        };\n        this.close = (code = StreamSfuClient.NORMAL_CLOSURE, reason)=>{\n            this.isClosingClean = code !== StreamSfuClient.ERROR_CONNECTION_UNHEALTHY;\n            if (this.signalWs.readyState === WebSocket.OPEN) {\n                this.logger('debug', `Closing SFU WS connection: ${code} - ${reason}`);\n                this.signalWs.close(code, `js-client: ${reason}`);\n                this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n            }\n            this.dispose();\n        };\n        this.dispose = ()=>{\n            this.logger('debug', 'Disposing SFU client');\n            this.unsubscribeIceTrickle();\n            this.unsubscribeNetworkChanged();\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n            clearTimeout(this.migrateAwayTimeout);\n            this.abortController.abort();\n            this.migrationTask?.resolve();\n            this.iceTrickleBuffer.dispose();\n        };\n        this.getTrace = ()=>{\n            return this.tracer?.take();\n        };\n        this.leaveAndClose = async (reason)=>{\n            try {\n                this.isLeaving = true;\n                await this.joinTask;\n                await this.notifyLeave(reason);\n            } catch (err) {\n                this.logger('debug', 'Error notifying SFU about leaving call', err);\n            }\n            this.close(StreamSfuClient.NORMAL_CLOSURE, reason.substring(0, 115));\n        };\n        this.updateSubscriptions = async (tracks)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.updateSubscriptions({\n                    sessionId: this.sessionId,\n                    tracks\n                }), this.abortController.signal);\n        };\n        this.setPublisher = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.setPublisher({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.sendAnswer = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.sendAnswer({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.iceTrickle = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.iceTrickle({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.iceRestart = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.iceRestart({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.updateMuteStates = async (muteStates)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.updateMuteStates({\n                    muteStates,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.sendStats = async (stats)=>{\n            await this.joinTask;\n            // NOTE: we don't retry sending stats\n            return this.rpc.sendStats({\n                ...stats,\n                sessionId: this.sessionId\n            });\n        };\n        this.startNoiseCancellation = async ()=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.startNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.stopNoiseCancellation = async ()=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.stopNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.enterMigration = async (opts = {})=>{\n            this.isLeaving = true;\n            const { timeout = 7 * 1000 } = opts;\n            this.migrationTask?.reject(new Error('Cancelled previous migration'));\n            const task = this.migrationTask = promiseWithResolvers();\n            const unsubscribe = this.dispatcher.on('participantMigrationComplete', ()=>{\n                unsubscribe();\n                clearTimeout(this.migrateAwayTimeout);\n                task.resolve();\n            });\n            this.migrateAwayTimeout = setTimeout(()=>{\n                unsubscribe();\n                task.reject(new Error(`Migration (${this.tag}) failed to complete in ${timeout}ms`));\n            }, timeout);\n            return task.promise;\n        };\n        this.join = async (data)=>{\n            // wait for the signal web socket to be ready before sending \"joinRequest\"\n            await this.signalReady();\n            if (this.joinResponseTask.isResolved() || this.joinResponseTask.isRejected()) {\n                // we need to lock the RPC requests until we receive a JoinResponse.\n                // that's why we have this primitive lock mechanism.\n                // the client starts with already initialized joinResponseTask,\n                // and this code creates a new one for the next join request.\n                this.joinResponseTask = promiseWithResolvers();\n            }\n            // capture a reference to the current joinResponseTask as it might\n            // be replaced with a new one in case a second join request is made\n            const current = this.joinResponseTask;\n            let timeoutId = undefined;\n            const unsubscribe = this.dispatcher.on('joinResponse', (joinResponse)=>{\n                clearTimeout(timeoutId);\n                unsubscribe();\n                this.keepAlive();\n                current.resolve(joinResponse);\n            });\n            timeoutId = setTimeout(()=>{\n                unsubscribe();\n                const message = `Waiting for \"joinResponse\" has timed out after ${this.joinResponseTimeout}ms`;\n                this.tracer?.trace('joinRequestTimeout', message);\n                current.reject(new Error(message));\n            }, this.joinResponseTimeout);\n            const joinRequest = SfuRequest.create({\n                requestPayload: {\n                    oneofKind: 'joinRequest',\n                    joinRequest: JoinRequest.create({\n                        ...data,\n                        sessionId: this.sessionId,\n                        token: this.credentials.token\n                    })\n                }\n            });\n            this.tracer?.trace('joinRequest', joinRequest);\n            await this.send(joinRequest);\n            return current.promise;\n        };\n        this.ping = async ()=>{\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: 'healthCheckRequest',\n                    healthCheckRequest: {}\n                }\n            }));\n        };\n        this.notifyLeave = async (reason)=>{\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: 'leaveCallRequest',\n                    leaveCallRequest: {\n                        sessionId: this.sessionId,\n                        reason\n                    }\n                }\n            }));\n        };\n        this.send = async (message)=>{\n            await this.signalReady(); // wait for the signal ws to be open\n            const msgJson = SfuRequest.toJson(message);\n            if (this.signalWs.readyState !== WebSocket.OPEN) {\n                this.logger('debug', 'Signal WS is not open. Skipping message', msgJson);\n                return;\n            }\n            this.logger('debug', `Sending message to: ${this.edgeName}`, msgJson);\n            this.signalWs.send(SfuRequest.toBinary(message));\n        };\n        this.keepAlive = ()=>{\n            const timers = getTimers();\n            timers.clearInterval(this.keepAliveInterval);\n            this.keepAliveInterval = timers.setInterval(()=>{\n                this.ping().catch((e)=>{\n                    this.logger('error', 'Error sending healthCheckRequest to SFU', e);\n                });\n            }, this.pingIntervalInMs);\n        };\n        this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeout);\n            this.connectionCheckTimeout = setTimeout(()=>{\n                if (this.lastMessageTimestamp) {\n                    const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n                    if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n                        this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n                    }\n                }\n            }, this.unhealthyTimeoutInMs);\n        };\n        this.dispatcher = dispatcher;\n        this.sessionId = sessionId || generateUUIDv4();\n        this.onSignalClose = onSignalClose;\n        this.credentials = credentials;\n        const { server, token } = credentials;\n        this.edgeName = server.edge_name;\n        this.joinResponseTimeout = joinResponseTimeout;\n        this.tag = tag;\n        this.logger = getLogger([\n            'SfuClient',\n            tag\n        ]);\n        this.tracer = enableTracing ? new Tracer(`${tag}-${this.edgeName}`) : undefined;\n        this.rpc = createSignalClient({\n            baseUrl: server.url,\n            interceptors: [\n                withHeaders({\n                    Authorization: `Bearer ${token}`\n                }),\n                this.tracer && withRequestTracer(this.tracer.trace),\n                getLogLevel() === 'trace' && withRequestLogger(this.logger, 'trace')\n            ].filter((v)=>!!v)\n        });\n        // Special handling for the ICETrickle kind of events.\n        // The SFU might trigger these events before the initial RTC\n        // connection is established or \"JoinResponse\" received.\n        // In that case, those events (ICE candidates) need to be buffered\n        // and later added to the appropriate PeerConnection\n        // once the remoteDescription is known and set.\n        this.unsubscribeIceTrickle = dispatcher.on('iceTrickle', (iceTrickle)=>{\n            this.iceTrickleBuffer.push(iceTrickle);\n        });\n        // listen to network changes to handle offline state\n        // we shouldn't attempt to recover websocket connection when offline\n        this.unsubscribeNetworkChanged = streamClient.on('network.changed', (e)=>{\n            if (!e.online) {\n                this.networkAvailableTask = promiseWithResolvers();\n            } else {\n                this.networkAvailableTask?.resolve();\n            }\n        });\n        this.createWebSocket({\n            attempt: tag,\n            user_id: streamClient.user?.id || '',\n            api_key: streamClient.key,\n            user_session_id: this.sessionId,\n            cid\n        });\n    }\n    get isHealthy() {\n        return this.signalWs.readyState === WebSocket.OPEN && this.joinResponseTask.isResolved();\n    }\n    get joinTask() {\n        return this.joinResponseTask.promise;\n    }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */ StreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */ StreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is disposed because a new\n * connection is established or is about to be established.\n * Here, we don't use 1000 (normal closure) because we don't want the\n * SFU to clean up the resources associated with the current participant.\n */ StreamSfuClient.DISPOSE_OLD_SOCKET = 4100;\n/**\n * The close code used when the client fails to join the call (on the SFU).\n */ StreamSfuClient.JOIN_FAILED = 4101;\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */ const watchCallAccepted = (call)=>{\n    return async function onCallAccepted(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { state } = call;\n        if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n            await call.join();\n        }\n    };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */ const watchCallRejected = (call)=>{\n    return async function onCallRejected(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { call: eventCall } = event;\n        const { session: callSession } = eventCall;\n        if (!callSession) {\n            call.logger('warn', 'No call session provided. Ignoring call.rejected event.', event);\n            return;\n        }\n        const rejectedBy = callSession.rejected_by;\n        const { members, callingState } = call.state;\n        if (callingState !== CallingState.RINGING) {\n            call.logger('info', 'Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.', event);\n            return;\n        }\n        if (call.isCreatedByMe) {\n            const everyoneElseRejected = members.filter((m)=>m.user_id !== call.currentUserId).every((m)=>rejectedBy[m.user_id]);\n            if (everyoneElseRejected) {\n                call.logger('info', 'everyone rejected, leaving the call');\n                await call.leave({\n                    reject: true,\n                    reason: 'cancel',\n                    message: 'ring: everyone rejected'\n                });\n            }\n        } else {\n            if (rejectedBy[eventCall.created_by.id]) {\n                call.logger('info', 'call creator rejected, leaving call');\n                await call.leave({\n                    message: 'ring: creator rejected'\n                });\n            }\n        }\n    };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */ const watchCallEnded = (call)=>{\n    return function onCallEnded() {\n        const { callingState } = call.state;\n        if (callingState !== CallingState.IDLE && callingState !== CallingState.LEFT) {\n            call.leave({\n                message: 'call.ended event received',\n                reject: false\n            }).catch((err)=>{\n                call.logger('error', 'Failed to leave call after call.ended ', err);\n            });\n        }\n    };\n};\n/**\n * Watches for `callEnded` events.\n */ const watchSfuCallEnded = (call)=>{\n    return call.on('callEnded', async (e)=>{\n        if (call.state.callingState === CallingState.LEFT) return;\n        try {\n            if (e.reason === CallEndedReason.LIVE_ENDED) {\n                call.state.setBackstage(true);\n                // don't leave the call if the user has permission to join backstage\n                const { hasPermission } = call.permissionsContext;\n                if (hasPermission(OwnCapability.JOIN_BACKSTAGE)) return;\n            }\n            // `call.ended` event arrived after the call is already left\n            // and all event handlers are detached. We need to manually\n            // update the call state to reflect the call has ended.\n            call.state.setEndedAt(new Date());\n            const reason = CallEndedReason[e.reason];\n            await call.leave({\n                message: `callEnded received: ${reason}`\n            });\n        } catch (err) {\n            call.logger('error', 'Failed to leave call after being ended by the SFU', err);\n        }\n    });\n};\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */ const watchCallGrantsUpdated = (state)=>{\n    return function onCallGrantsUpdated(event) {\n        const { currentGrants } = event;\n        if (currentGrants) {\n            const { canPublishAudio, canPublishVideo, canScreenshare } = currentGrants;\n            const update = {\n                [OwnCapability.SEND_AUDIO]: canPublishAudio,\n                [OwnCapability.SEND_VIDEO]: canPublishVideo,\n                [OwnCapability.SCREENSHARE]: canScreenshare\n            };\n            const nextCapabilities = state.ownCapabilities.filter((capability)=>update[capability] !== false);\n            Object.entries(update).forEach(([capability, value])=>{\n                if (value && !nextCapabilities.includes(capability)) {\n                    nextCapabilities.push(capability);\n                }\n            });\n            state.setOwnCapabilities(nextCapabilities);\n        }\n    };\n};\n/**\n * Adds unique values to an array.\n *\n * @param arr the array to add to.\n * @param values the values to add.\n */ const pushToIfMissing = (arr, ...values)=>{\n    for (const v of values){\n        if (!arr.includes(v)) {\n            arr.push(v);\n        }\n    }\n    return arr;\n};\n/**\n * Removes values from an array if they are present.\n *\n * @param arr the array to remove from.\n * @param values the values to remove.\n */ const removeFromIfPresent = (arr, ...values)=>{\n    for (const v of values){\n        const index = arr.indexOf(v);\n        if (index !== -1) {\n            arr.splice(index, 1);\n        }\n    }\n    return arr;\n};\nconst watchConnectionQualityChanged = (dispatcher, state)=>{\n    return dispatcher.on('connectionQualityChanged', (e)=>{\n        const { connectionQualityUpdates } = e;\n        if (!connectionQualityUpdates) return;\n        state.updateParticipants(connectionQualityUpdates.reduce((patches, update)=>{\n            const { sessionId, connectionQuality } = update;\n            patches[sessionId] = {\n                connectionQuality\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */ const watchParticipantCountChanged = (dispatcher, state)=>{\n    return dispatcher.on('healthCheckResponse', (e)=>{\n        const { participantCount } = e;\n        if (participantCount) {\n            state.setParticipantCount(participantCount.total);\n            state.setAnonymousParticipantCount(participantCount.anonymous);\n        }\n    });\n};\nconst watchLiveEnded = (dispatcher, call)=>{\n    return dispatcher.on('error', (e)=>{\n        if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n        call.state.setBackstage(true);\n        if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n            call.leave({\n                message: 'live ended'\n            }).catch((err)=>{\n                call.logger('error', 'Failed to leave call after live ended', err);\n            });\n        }\n    });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */ const watchSfuErrorReports = (dispatcher)=>{\n    return dispatcher.on('error', (e)=>{\n        if (!e.error) return;\n        const logger = getLogger([\n            'SfuClient'\n        ]);\n        const { error, reconnectStrategy } = e;\n        logger('error', 'SFU reported error', {\n            code: ErrorCode[error.code],\n            reconnectStrategy: WebsocketReconnectStrategy[reconnectStrategy],\n            message: error.message,\n            shouldRetry: error.shouldRetry\n        });\n    });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */ const watchPinsUpdated = (state)=>{\n    return function onPinsUpdated(e) {\n        const { pins } = e;\n        state.setServerSidePins(pins);\n    };\n};\n/**\n * Watches for inbound state notifications and updates the paused tracks\n *\n * @param state the call state to update.\n */ const watchInboundStateNotification = (state)=>{\n    return function onInboundStateNotification(e) {\n        const { inboundVideoStates } = e;\n        const current = state.getParticipantLookupBySessionId();\n        const patches = {};\n        for (const { sessionId, trackType, paused } of inboundVideoStates){\n            const pausedTracks = [\n                ...current[sessionId]?.pausedTracks ?? []\n            ];\n            if (paused) {\n                pushToIfMissing(pausedTracks, trackType);\n            } else {\n                removeFromIfPresent(pausedTracks, trackType);\n            }\n            patches[sessionId] = {\n                pausedTracks\n            };\n        }\n        state.updateParticipants(patches);\n    };\n};\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */ const handleRemoteSoftMute = (call)=>{\n    return call.on('trackUnpublished', async (event)=>{\n        const { cause, type, sessionId } = event;\n        const { localParticipant } = call.state;\n        if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n            const logger = call.logger;\n            logger('info', `Local participant's ${TrackType[type]} track is muted remotely`);\n            try {\n                if (type === TrackType.VIDEO) {\n                    await call.camera.disable();\n                } else if (type === TrackType.AUDIO) {\n                    await call.microphone.disable();\n                } else if (type === TrackType.SCREEN_SHARE || type === TrackType.SCREEN_SHARE_AUDIO) {\n                    await call.screenShare.disable();\n                } else {\n                    logger('warn', 'Unsupported track type to soft mute', TrackType[type]);\n                }\n            } catch (error) {\n                logger('error', 'Failed to stop publishing', error);\n            }\n        }\n    });\n};\n/**\n * An event responder which handles the `participantJoined` event.\n */ const watchParticipantJoined = (state)=>{\n    return function onParticipantJoined(e) {\n        const { participant } = e;\n        if (!participant) return;\n        // `state.updateOrAddParticipant` acts as a safeguard against\n        // potential duplicate events from the SFU.\n        //\n        // Although the SFU should not send duplicate events, we have seen\n        // some race conditions in the past during the `join-flow`.\n        // The SFU would send participant info as part of the `join`\n        // response and then follow up with a `participantJoined` event for\n        // already announced participants.\n        const orphanedTracks = reconcileOrphanedTracks(state, participant);\n        state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, orphanedTracks, {\n            viewportVisibilityState: {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN\n            }\n        }));\n    };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */ const watchParticipantLeft = (state)=>{\n    return function onParticipantLeft(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.setParticipants((participants)=>participants.filter((p)=>p.sessionId !== participant.sessionId));\n    };\n};\n/**\n * An event responder which handles the `participantUpdated` event.\n */ const watchParticipantUpdated = (state)=>{\n    return function onParticipantUpdated(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.updateParticipant(participant.sessionId, participant);\n    };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */ const watchTrackPublished = (state)=>{\n    return function onTrackPublished(e) {\n        const { type, sessionId } = e;\n        // An optimization for large calls.\n        // After a certain threshold, the SFU would stop emitting `participantJoined`\n        // events, and instead, it would only provide the participant's information\n        // once they start publishing a track.\n        if (e.participant) {\n            const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n            const participant = Object.assign(e.participant, orphanedTracks);\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: pushToIfMissing([\n                        ...p.publishedTracks\n                    ], type)\n                }));\n        }\n    };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */ const watchTrackUnpublished = (state)=>{\n    return function onTrackUnpublished(e) {\n        const { type, sessionId } = e;\n        // An optimization for large calls. See `watchTrackPublished`.\n        if (e.participant) {\n            const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n            const participant = Object.assign(e.participant, orphanedTracks);\n            state.updateOrAddParticipant(sessionId, participant, (p)=>({\n                    pausedTracks: p.pausedTracks?.filter((t)=>t !== type)\n                }));\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: p.publishedTracks.filter((t)=>t !== type),\n                    pausedTracks: p.pausedTracks?.filter((t)=>t !== type)\n                }));\n        }\n    };\n};\n/**\n * Reconciles orphaned tracks (if any) for the given participant.\n *\n * @param state the call state.\n * @param participant the participant.\n */ const reconcileOrphanedTracks = (state, participant)=>{\n    const orphanTracks = state.takeOrphanedTracks(participant.trackLookupPrefix);\n    if (!orphanTracks.length) return;\n    const reconciledTracks = {};\n    for (const orphan of orphanTracks){\n        const key = trackTypeToParticipantStreamKey(orphan.trackType);\n        if (!key) continue;\n        reconciledTracks[key] = orphan.track;\n    }\n    return reconciledTracks;\n};\n/**\n * Watches for `dominantSpeakerChanged` events.\n */ const watchDominantSpeakerChanged = (dispatcher, state)=>{\n    return dispatcher.on('dominantSpeakerChanged', (e)=>{\n        const { sessionId } = e;\n        if (sessionId === state.dominantSpeaker?.sessionId) return;\n        state.setParticipants((participants)=>participants.map((participant)=>{\n                // mark the new dominant speaker\n                if (participant.sessionId === sessionId) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: true\n                    };\n                }\n                // unmark the old dominant speaker\n                if (participant.isDominantSpeaker) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: false\n                    };\n                }\n                return participant; // no change\n            }));\n    });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */ const watchAudioLevelChanged = (dispatcher, state)=>{\n    return dispatcher.on('audioLevelChanged', (e)=>{\n        const { audioLevels } = e;\n        state.updateParticipants(audioLevels.reduce((patches, current)=>{\n            patches[current.sessionId] = {\n                audioLevel: current.level,\n                isSpeaking: current.isSpeaking\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param dispatcher the dispatcher.\n */ const registerEventHandlers = (call, dispatcher)=>{\n    const state = call.state;\n    const eventHandlers = [\n        call.on('call.ended', watchCallEnded(call)),\n        watchSfuCallEnded(call),\n        watchLiveEnded(dispatcher, call),\n        watchSfuErrorReports(dispatcher),\n        watchConnectionQualityChanged(dispatcher, state),\n        watchParticipantCountChanged(dispatcher, state),\n        call.on('participantJoined', watchParticipantJoined(state)),\n        call.on('participantLeft', watchParticipantLeft(state)),\n        call.on('participantUpdated', watchParticipantUpdated(state)),\n        call.on('trackPublished', watchTrackPublished(state)),\n        call.on('trackUnpublished', watchTrackUnpublished(state)),\n        watchAudioLevelChanged(dispatcher, state),\n        watchDominantSpeakerChanged(dispatcher, state),\n        call.on('callGrantsUpdated', watchCallGrantsUpdated(state)),\n        call.on('pinsUpdated', watchPinsUpdated(state)),\n        call.on('inboundStateNotification', watchInboundStateNotification(state)),\n        handleRemoteSoftMute(call)\n    ];\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */ const registerRingingCallEventHandlers = (call)=>{\n    const coordinatorRingEvents = {\n        'call.accepted': watchCallAccepted(call),\n        'call.rejected': watchCallRejected(call)\n    };\n    const eventHandlers = Object.keys(coordinatorRingEvents).map((event)=>{\n        const eventName = event;\n        return call.on(eventName, coordinatorRingEvents[eventName]);\n    });\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n    constructor(){\n        /**\n         * @private\n         */ this.elementHandlerMap = new Map();\n        /**\n         * @private\n         */ this.observer = null;\n        // in React children render before viewport is set, add\n        // them to the queue and observe them once the observer is ready\n        /**\n         * @private\n         */ this.queueSet = new Set();\n        /**\n         * Method to set scrollable viewport as root for the IntersectionObserver, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param viewportElement\n         * @param options\n         * @returns Unobserve\n         */ this.setViewport = (viewportElement, options)=>{\n            const cleanup = ()=>{\n                this.observer?.disconnect();\n                this.observer = null;\n                this.elementHandlerMap.clear();\n            };\n            this.observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    const handler = this.elementHandlerMap.get(entry.target);\n                    handler?.(entry);\n                });\n            }, {\n                root: viewportElement,\n                ...options,\n                threshold: options?.threshold ?? DEFAULT_THRESHOLD\n            });\n            if (this.queueSet.size) {\n                this.queueSet.forEach(([queueElement, queueHandler])=>{\n                    // check if element which requested observation is\n                    // a child of a viewport element, skip if isn't\n                    if (!viewportElement.contains(queueElement)) return;\n                    this.observer.observe(queueElement);\n                    this.elementHandlerMap.set(queueElement, queueHandler);\n                });\n                this.queueSet.clear();\n            }\n            return cleanup;\n        };\n        /**\n         * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n         * detects a possible change in element's visibility within specified viewport, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param element\n         * @param handler\n         * @returns Unobserve\n         */ this.observe = (element, handler)=>{\n            const queueItem = [\n                element,\n                handler\n            ];\n            const cleanup = ()=>{\n                this.elementHandlerMap.delete(element);\n                this.observer?.unobserve(element);\n                this.queueSet.delete(queueItem);\n            };\n            if (this.elementHandlerMap.has(element)) return cleanup;\n            if (!this.observer) {\n                this.queueSet.add(queueItem);\n                return cleanup;\n            }\n            if (this.observer.root.contains(element)) {\n                this.elementHandlerMap.set(element, handler);\n                this.observer.observe(element);\n            }\n            return cleanup;\n        };\n    }\n}\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n    videoTrack: VisibilityState.UNKNOWN,\n    screenShareTrack: VisibilityState.UNKNOWN\n};\nconst globalOverrideKey = Symbol('globalOverrideKey');\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */ class DynascaleManager {\n    /**\n     * Creates a new DynascaleManager instance.\n     */ constructor(callState, speaker){\n        /**\n         * The viewport tracker instance.\n         */ this.viewportTracker = new ViewportTracker();\n        this.logger = getLogger([\n            'DynascaleManager'\n        ]);\n        this.pendingSubscriptionsUpdate = null;\n        this.videoTrackSubscriptionOverridesSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject({});\n        this.videoTrackSubscriptionOverrides$ = this.videoTrackSubscriptionOverridesSubject.asObservable();\n        this.incomingVideoSettings$ = this.videoTrackSubscriptionOverrides$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((overrides)=>{\n            const { [globalOverrideKey]: globalSettings, ...participants } = overrides;\n            return {\n                enabled: globalSettings?.enabled !== false,\n                preferredResolution: globalSettings?.enabled ? globalSettings.dimension : undefined,\n                participants: Object.fromEntries(Object.entries(participants).map(([sessionId, participantOverride])=>[\n                        sessionId,\n                        {\n                            enabled: participantOverride?.enabled !== false,\n                            preferredResolution: participantOverride?.enabled ? participantOverride.dimension : undefined\n                        }\n                    ])),\n                isParticipantVideoEnabled: (sessionId)=>overrides[sessionId]?.enabled ?? overrides[globalOverrideKey]?.enabled ?? true\n            };\n        }), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1));\n        /**\n         * Disposes the allocated resources and closes the audio context if it was created.\n         */ this.dispose = async ()=>{\n            if (this.pendingSubscriptionsUpdate) {\n                clearTimeout(this.pendingSubscriptionsUpdate);\n            }\n            const context = this.getOrCreateAudioContext();\n            if (context && context.state !== 'closed') {\n                document.removeEventListener('click', this.resumeAudioContext);\n                await context.close();\n                this.audioContext = undefined;\n            }\n        };\n        this.setVideoTrackSubscriptionOverrides = (override, sessionIds)=>{\n            if (!sessionIds) {\n                return setCurrentValue(this.videoTrackSubscriptionOverridesSubject, override ? {\n                    [globalOverrideKey]: override\n                } : {});\n            }\n            return setCurrentValue(this.videoTrackSubscriptionOverridesSubject, (overrides)=>({\n                    ...overrides,\n                    ...Object.fromEntries(sessionIds.map((id)=>[\n                            id,\n                            override\n                        ]))\n                }));\n        };\n        this.applyTrackSubscriptions = (debounceType = DebounceType.SLOW)=>{\n            if (this.pendingSubscriptionsUpdate) {\n                clearTimeout(this.pendingSubscriptionsUpdate);\n            }\n            const updateSubscriptions = ()=>{\n                this.pendingSubscriptionsUpdate = null;\n                this.sfuClient?.updateSubscriptions(this.trackSubscriptions).catch((err)=>{\n                    this.logger('debug', `Failed to update track subscriptions`, err);\n                });\n            };\n            if (debounceType) {\n                this.pendingSubscriptionsUpdate = setTimeout(updateSubscriptions, debounceType);\n            } else {\n                updateSubscriptions();\n            }\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         * @returns Untrack.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            const cleanup = this.viewportTracker.observe(element, (entry)=>{\n                this.callState.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    // observer triggers when the element is \"moved\" to be a fullscreen element\n                    // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n                    const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: isVisible\n                        }\n                    };\n                });\n            });\n            return ()=>{\n                cleanup();\n                // reset visibility state to UNKNOWN upon cleanup\n                // so that the layouts that are not actively observed\n                // can still function normally (runtime layout switching)\n                this.callState.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: VisibilityState.UNKNOWN\n                        }\n                    };\n                });\n            };\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.viewportTracker.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const boundParticipant = this.callState.findParticipantBySessionId(sessionId);\n            if (!boundParticipant) return;\n            const requestTrackWithDimensions = (debounceType, dimension)=>{\n                if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n                    // ignore 0x0 dimensions. this can happen when the video element\n                    // is not visible (e.g., has display: none).\n                    // we treat this as \"unsubscription\" as we don't want to keep\n                    // consuming bandwidth for a video that is not visible on the screen.\n                    this.logger('debug', `Ignoring 0x0 dimension`, boundParticipant);\n                    dimension = undefined;\n                }\n                this.callState.updateParticipantTracks(trackType, {\n                    [sessionId]: {\n                        dimension\n                    }\n                });\n                this.applyTrackSubscriptions(debounceType);\n            };\n            const participant$ = this.callState.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((ps)=>ps.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.takeWhile)((participant)=>!!participant), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            /**\n             * Since the video elements are now being removed from the DOM (React SDK) upon\n             * visibility change, this subscription is not in use an stays here only for the\n             * plain JS integrations where integrators might choose not to remove the video\n             * elements from the DOM.\n             */ // keep copy for resize observer handler\n            let viewportVisibilityState;\n            const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((p)=>p.viewportVisibilityState?.[trackType]), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)()).subscribe((nextViewportVisibilityState)=>{\n                // skip initial trigger\n                if (!viewportVisibilityState) {\n                    viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                    return;\n                }\n                viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n                }\n                requestTrackWithDimensions(DebounceType.MEDIUM, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n            });\n            let lastDimensions;\n            const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(()=>{\n                const currentDimensions = {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                };\n                // skip initial trigger\n                if (!lastDimensions) {\n                    lastDimensions = currentDimensions;\n                    return;\n                }\n                if (lastDimensions.width === currentDimensions.width && lastDimensions.height === currentDimensions.height || viewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return;\n                }\n                const relativeDelta = Math.max(currentDimensions.width / lastDimensions.width, currentDimensions.height / lastDimensions.height);\n                // Low quality video in an upscaled video element is very noticable.\n                // We try to upscale faster, and downscale slower. We also update debounce\n                // more if the size change is not significant, gurading against fast-firing\n                // resize events.\n                const debounceType = relativeDelta > 1.2 ? DebounceType.IMMEDIATE : DebounceType.MEDIUM;\n                requestTrackWithDimensions(debounceType, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n                lastDimensions = currentDimensions;\n            });\n            resizeObserver?.observe(videoElement);\n            // element renders and gets bound - track subscription gets\n            // triggered first other ones get skipped on initial subscriptions\n            const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilKeyChanged)('publishedTracks'), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((p)=>trackType === 'videoTrack' ? hasVideo(p) : hasScreenShare(p)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)()).subscribe((isPublishing)=>{\n                if (isPublishing) {\n                    // the participant just started to publish a track\n                    requestTrackWithDimensions(DebounceType.IMMEDIATE, {\n                        width: videoElement.clientWidth,\n                        height: videoElement.clientHeight\n                    });\n                } else {\n                    // the participant just stopped publishing a track\n                    requestTrackWithDimensions(DebounceType.FAST, undefined);\n                }\n            });\n            videoElement.autoplay = true;\n            videoElement.playsInline = true;\n            // explicitly marking the element as muted will allow autoplay to work\n            // without prior user interaction:\n            // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n            videoElement.muted = true;\n            const streamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilKeyChanged)(trackType === 'videoTrack' ? 'videoStream' : 'screenShareStream')).subscribe((p)=>{\n                const source = trackType === 'videoTrack' ? p.videoStream : p.screenShareStream;\n                if (videoElement.srcObject === source) return;\n                videoElement.srcObject = source ?? null;\n                if (isSafari() || isFirefox()) {\n                    setTimeout(()=>{\n                        videoElement.srcObject = source ?? null;\n                        videoElement.play().catch((e)=>{\n                            this.logger('warn', `Failed to play stream`, e);\n                        });\n                    // we add extra delay until we attempt to force-play\n                    // the participant's media stream in Firefox and Safari,\n                    // as they seem to have some timing issues\n                    }, 25);\n                }\n            });\n            return ()=>{\n                requestTrackWithDimensions(DebounceType.FAST, undefined);\n                viewportVisibilityStateSubscription?.unsubscribe();\n                publishedTracksSubscription?.unsubscribe();\n                streamSubscription.unsubscribe();\n                resizeObserver?.disconnect();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         * @returns a cleanup function that will unbind the audio element.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType)=>{\n            const participant = this.callState.findParticipantBySessionId(sessionId);\n            if (!participant || participant.isLocalParticipant) return;\n            const participant$ = this.callState.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((ps)=>ps.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.takeWhile)((p)=>!!p), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            const updateSinkId = (deviceId, audioContext)=>{\n                if (!deviceId) return;\n                if ('setSinkId' in audioElement) {\n                    audioElement.setSinkId(deviceId).catch((e)=>{\n                        this.logger('warn', `Can't to set AudioElement sinkId`, e);\n                    });\n                }\n                if (audioContext && 'setSinkId' in audioContext) {\n                    // @ts-expect-error setSinkId is not available in all browsers\n                    audioContext.setSinkId(deviceId).catch((e)=>{\n                        this.logger('warn', `Can't to set AudioContext sinkId`, e);\n                    });\n                }\n            };\n            let sourceNode = undefined;\n            let gainNode = undefined;\n            const updateMediaStreamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilKeyChanged)(trackType === 'screenShareAudioTrack' ? 'screenShareAudioStream' : 'audioStream')).subscribe((p)=>{\n                const source = trackType === 'screenShareAudioTrack' ? p.screenShareAudioStream : p.audioStream;\n                if (audioElement.srcObject === source) return;\n                setTimeout(()=>{\n                    audioElement.srcObject = source ?? null;\n                    if (!source) return;\n                    // Safari has a special quirk that prevents playing audio until the user\n                    // interacts with the page or focuses on the tab where the call happens.\n                    // This is a workaround for the issue where:\n                    // - A and B are in a call\n                    // - A switches to another tab\n                    // - B mutes their microphone and unmutes it\n                    // - A does not hear B's unmuted audio until they focus the tab\n                    const audioContext = this.getOrCreateAudioContext();\n                    if (audioContext) {\n                        // we will play audio through the audio context in Safari\n                        audioElement.muted = true;\n                        sourceNode?.disconnect();\n                        sourceNode = audioContext.createMediaStreamSource(source);\n                        gainNode ?? (gainNode = audioContext.createGain());\n                        gainNode.gain.value = p.audioVolume ?? this.speaker.state.volume;\n                        sourceNode.connect(gainNode).connect(audioContext.destination);\n                        this.resumeAudioContext();\n                    } else {\n                        // we will play audio directly through the audio element in other browsers\n                        audioElement.muted = false;\n                        audioElement.play().catch((e)=>{\n                            this.logger('warn', `Failed to play audio stream`, e);\n                        });\n                    }\n                    const { selectedDevice } = this.speaker.state;\n                    if (selectedDevice) updateSinkId(selectedDevice, audioContext);\n                });\n            });\n            const sinkIdSubscription = !('setSinkId' in audioElement) ? null : this.speaker.state.selectedDevice$.subscribe((deviceId)=>{\n                const audioContext = this.getOrCreateAudioContext();\n                updateSinkId(deviceId, audioContext);\n            });\n            const volumeSubscription = (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n                this.speaker.state.volume$,\n                participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilKeyChanged)('audioVolume'))\n            ]).subscribe(([volume, p])=>{\n                const participantVolume = p.audioVolume ?? volume;\n                audioElement.volume = participantVolume;\n                if (gainNode) gainNode.gain.value = participantVolume;\n            });\n            audioElement.autoplay = true;\n            return ()=>{\n                sinkIdSubscription?.unsubscribe();\n                volumeSubscription.unsubscribe();\n                updateMediaStreamSubscription.unsubscribe();\n                audioElement.srcObject = null;\n                sourceNode?.disconnect();\n                gainNode?.disconnect();\n            };\n        };\n        this.getOrCreateAudioContext = ()=>{\n            if (this.audioContext || !isSafari()) return this.audioContext;\n            const context = new AudioContext();\n            if (context.state === 'suspended') {\n                document.addEventListener('click', this.resumeAudioContext);\n            }\n            // @ts-expect-error audioSession is available in Safari only\n            const audioSession = navigator.audioSession;\n            if (audioSession) {\n                // https://github.com/w3c/audio-session/blob/main/explainer.md\n                audioSession.type = 'play-and-record';\n            }\n            return this.audioContext = context;\n        };\n        this.resumeAudioContext = ()=>{\n            if (this.audioContext?.state === 'suspended') {\n                this.audioContext.resume().catch((err)=>this.logger('warn', `Can't resume audio context`, err)).then(()=>{\n                    document.removeEventListener('click', this.resumeAudioContext);\n                });\n            }\n        };\n        this.callState = callState;\n        this.speaker = speaker;\n    }\n    setSfuClient(sfuClient) {\n        this.sfuClient = sfuClient;\n    }\n    get trackSubscriptions() {\n        const subscriptions = [];\n        for (const p of this.callState.remoteParticipants){\n            // NOTE: audio tracks don't have to be requested explicitly\n            // as the SFU will implicitly subscribe us to all of them,\n            // once they become available.\n            if (p.videoDimension && hasVideo(p)) {\n                const override = this.videoTrackSubscriptionOverrides[p.sessionId] ?? this.videoTrackSubscriptionOverrides[globalOverrideKey];\n                if (override?.enabled !== false) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.VIDEO,\n                        dimension: override?.dimension ?? p.videoDimension\n                    });\n                }\n            }\n            if (p.screenShareDimension && hasScreenShare(p)) {\n                subscriptions.push({\n                    userId: p.userId,\n                    sessionId: p.sessionId,\n                    trackType: TrackType.SCREEN_SHARE,\n                    dimension: p.screenShareDimension\n                });\n            }\n            if (hasScreenShareAudio(p)) {\n                subscriptions.push({\n                    userId: p.userId,\n                    sessionId: p.sessionId,\n                    trackType: TrackType.SCREEN_SHARE_AUDIO\n                });\n            }\n        }\n        return subscriptions;\n    }\n    get videoTrackSubscriptionOverrides() {\n        return getCurrentValue(this.videoTrackSubscriptionOverrides$);\n    }\n}\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */ class PermissionsContext {\n    constructor(){\n        this.permissions = [];\n        /**\n         * Sets the permissions for the current user.\n         *\n         * @param permissions the permissions to set.\n         */ this.setPermissions = (permissions)=>{\n            this.permissions = permissions || [];\n        };\n        /**\n         * Sets the settings for the bound call.\n         * @param settings\n         */ this.setCallSettings = (settings)=>{\n            this.settings = settings;\n        };\n        /**\n         * Checks if the current user has a specific permission.\n         *\n         * @param permission the permission to check for.\n         */ this.hasPermission = (permission)=>{\n            return this.permissions.includes(permission);\n        };\n        /**\n         * Helper method that checks whether the current user has the permission\n         * to publish the given track type.\n         */ this.canPublish = (trackType)=>{\n            switch(trackType){\n                case TrackType.AUDIO:\n                    return this.hasPermission(OwnCapability.SEND_AUDIO);\n                case TrackType.VIDEO:\n                    return this.hasPermission(OwnCapability.SEND_VIDEO);\n                case TrackType.SCREEN_SHARE:\n                case TrackType.SCREEN_SHARE_AUDIO:\n                    return this.hasPermission(OwnCapability.SCREENSHARE);\n                case TrackType.UNSPECIFIED:\n                    return false;\n                default:\n                    ensureExhausted(trackType, 'Unknown track type');\n            }\n        };\n        /**\n         * Checks if the current user can request a specific permission\n         * within the call.\n         *\n         * @param permission the permission to check for.\n         * @param settings the call settings to check against (optional).\n         */ this.canRequest = (permission, settings = this.settings)=>{\n            if (!settings) return false;\n            const { audio, video, screensharing } = settings;\n            switch(permission){\n                case OwnCapability.SEND_AUDIO:\n                    return audio.access_request_enabled;\n                case OwnCapability.SEND_VIDEO:\n                    return video.access_request_enabled;\n                case OwnCapability.SCREENSHARE:\n                    return screensharing.access_request_enabled;\n                default:\n                    return false;\n            }\n        };\n    }\n}\n/**\n * Represents a call type.\n */ class CallType {\n    /**\n     * Constructs a new CallType.\n     *\n     * @param name the name of the call type.\n     * @param options the options for the call type.\n     */ constructor(name, options = {\n        sortParticipantsBy: defaultSortPreset\n    }){\n        this.name = name;\n        this.options = options;\n    }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */ class CallTypesRegistry {\n    /**\n     * Constructs a new CallTypesRegistry.\n     *\n     * @param callTypes the initial call types to register.\n     */ constructor(callTypes){\n        /**\n         * Registers a new call type.\n         *\n         * @param callType the call type to register.\n         */ this.register = (callType)=>{\n            this.callTypes[callType.name] = callType;\n        };\n        /**\n         * Unregisters a call type.\n         *\n         * @param name the name of the call type to unregister.\n         */ this.unregister = (name)=>{\n            delete this.callTypes[name];\n        };\n        /**\n         * Gets a call type by name.\n         *\n         * @param name the name of the call type to get.\n         */ this.get = (name)=>{\n            if (!this.callTypes[name]) {\n                this.register(new CallType(name));\n            }\n            return this.callTypes[name];\n        };\n        this.callTypes = callTypes.reduce((acc, callType)=>{\n            acc[callType.name] = callType;\n            return acc;\n        }, {});\n    }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */ const CallTypes = new CallTypesRegistry([\n    new CallType('default', {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType('development', {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType('livestream', {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    }),\n    new CallType('audio_room', {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    })\n]);\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */ const disposeOfMediaStream = (stream)=>{\n    if (!stream.active) return;\n    stream.getTracks().forEach((track)=>{\n        track.stop();\n    });\n    // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n    if (typeof stream.release === 'function') {\n        // @ts-expect-error - release() is present in react-native-webrtc\n        stream.release();\n    }\n};\nclass BrowserPermission {\n    constructor(permission){\n        this.permission = permission;\n        this.disposeController = new AbortController();\n        this.wasPrompted = false;\n        this.listeners = new Set();\n        this.logger = getLogger([\n            'permissions'\n        ]);\n        const signal = this.disposeController.signal;\n        this.ready = (async ()=>{\n            const assumeGranted = ()=>{\n                if (isReactNative()) {\n                    this.setState('granted');\n                } else {\n                    this.setState('prompt');\n                }\n            };\n            if (!canQueryPermissions()) {\n                return assumeGranted();\n            }\n            try {\n                const status = await navigator.permissions.query({\n                    name: permission.queryName\n                });\n                if (!signal.aborted) {\n                    this.setState(status.state);\n                    status.addEventListener('change', ()=>this.setState(status.state), {\n                        signal\n                    });\n                }\n            } catch (err) {\n                this.logger('debug', 'Failed to query permission status', err);\n                assumeGranted();\n            }\n        })();\n    }\n    dispose() {\n        this.state = undefined;\n        this.disposeController.abort();\n    }\n    async getState() {\n        await this.ready;\n        if (!this.state) {\n            throw new Error('BrowserPermission instance possibly disposed');\n        }\n        return this.state;\n    }\n    async prompt({ forcePrompt = false, throwOnNotAllowed = false } = {}) {\n        return await withoutConcurrency(`permission-prompt-${this.permission.queryName}`, async ()=>{\n            if (await this.getState() !== 'prompt' || this.wasPrompted && !forcePrompt) {\n                const isGranted = this.state === 'granted';\n                if (!isGranted && throwOnNotAllowed) {\n                    throw new Error('Permission was not granted previously, and prompting again is not allowed');\n                }\n                return isGranted;\n            }\n            try {\n                this.wasPrompted = true;\n                this.setState('prompting');\n                const stream = await navigator.mediaDevices.getUserMedia(this.permission.constraints);\n                disposeOfMediaStream(stream);\n                this.setState('granted');\n                return true;\n            } catch (e) {\n                if (e && typeof e === 'object' && 'name' in e && (e.name === 'NotAllowedError' || e.name === 'SecurityError')) {\n                    this.logger('info', 'Browser permission was not granted', {\n                        permission: this.permission\n                    });\n                    this.setState('denied');\n                    if (throwOnNotAllowed) {\n                        throw e;\n                    }\n                    return false;\n                }\n                this.logger('error', `Failed to getUserMedia`, {\n                    error: e,\n                    permission: this.permission\n                });\n                this.setState('prompt');\n                throw e;\n            }\n        });\n    }\n    listen(cb) {\n        this.listeners.add(cb);\n        if (this.state) cb(this.state);\n        return ()=>this.listeners.delete(cb);\n    }\n    asObservable() {\n        return this.getStateObservable().pipe(// In some browsers, the 'change' event doesn't reliably emit and hence,\n        // permissionState stays in 'prompt' state forever.\n        // Typically, this happens when a user grants one-time permission.\n        // Instead of checking if a permission is granted, we check if it isn't denied\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((state)=>state !== 'denied'));\n    }\n    asStateObservable() {\n        return this.getStateObservable();\n    }\n    getIsPromptingObservable() {\n        return this.getStateObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)((state)=>state === 'prompting'));\n    }\n    getStateObservable() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.fromEventPattern)((handler)=>this.listen(handler), (handler, unlisten)=>unlisten());\n    }\n    setState(state) {\n        if (this.state !== state) {\n            this.state = state;\n            this.listeners.forEach((listener)=>listener(state));\n        }\n    }\n}\nfunction canQueryPermissions() {\n    return !isReactNative() && typeof navigator !== 'undefined' && !!navigator.permissions?.query;\n}\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param permission a BrowserPermission instance.\n * @param kind the kind of devices to enumerate.\n * @param tracer the tracer to use for tracing the device enumeration.\n */ const getDevices = (permission, kind, tracer)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.from)((async ()=>{\n        let devices = await navigator.mediaDevices.enumerateDevices();\n        // for privacy reasons, most browsers don't give you device labels\n        // unless you have a corresponding camera or microphone permission\n        const shouldPromptForBrowserPermission = devices.some((device)=>device.kind === kind && device.label === '');\n        if (shouldPromptForBrowserPermission && await permission.prompt()) {\n            devices = await navigator.mediaDevices.enumerateDevices();\n        }\n        tracer?.traceOnce('device-enumeration', 'navigator.mediaDevices.enumerateDevices', devices);\n        return devices.filter((device)=>device.kind === kind && device.label !== '' && device.deviceId !== 'default');\n    })());\n};\n/**\n * Tells if the browser supports audio output change on 'audio' elements,\n * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId.\n */ const checkIfAudioOutputChangeSupported = ()=>{\n    if (typeof document === 'undefined') return false;\n    const element = document.createElement('audio');\n    return 'setSinkId' in element;\n};\n/**\n * The default constraints used to request audio devices.\n */ const audioDeviceConstraints = {\n    audio: {\n        autoGainControl: true,\n        noiseSuppression: true,\n        echoCancellation: true\n    }\n};\n/**\n * The default constraints used to request video devices.\n */ const videoDeviceConstraints = {\n    video: {\n        width: 1280,\n        height: 720\n    }\n};\n/**\n * Keeps track of the browser permission to use microphone. This permission also\n * affects an ability to enumerate audio devices.\n */ const getAudioBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: audioDeviceConstraints,\n        queryName: 'microphone'\n    }));\n/**\n * Keeps track of the browser permission to use camera. This permission also\n * affects an ability to enumerate video devices.\n */ const getVideoBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: videoDeviceConstraints,\n        queryName: 'camera'\n    }));\nconst getDeviceChangeObserver = lazy((tracer)=>{\n    // 'addEventListener' is not available in React Native, returning\n    // an observable that will never fire\n    if (!navigator.mediaDevices.addEventListener) return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.from)([]);\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.fromEvent)(navigator.mediaDevices, 'devicechange').pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.tap)(()=>tracer?.resetTrace('device-enumeration')), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.map)(()=>undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.debounceTime)(500));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted\n * and was not prompted before) and lists the available 'audioinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioDevices = lazy((tracer)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.merge)(getDeviceChangeObserver(tracer), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.concatMap)(()=>getDevices(getAudioBrowserPermission(), 'audioinput', tracer)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'videoinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getVideoDevices = lazy((tracer)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.merge)(getDeviceChangeObserver(tracer), getVideoBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.concatMap)(()=>getDevices(getVideoBrowserPermission(), 'videoinput', tracer)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'audiooutput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioOutputDevices = lazy((tracer)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.merge)(getDeviceChangeObserver(tracer), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.concatMap)(()=>getDevices(getAudioBrowserPermission(), 'audiooutput', tracer)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1));\n});\nlet getUserMediaExecId = 0;\nconst getStream = async (constraints, tracer)=>{\n    const tag = `navigator.mediaDevices.getUserMedia.${getUserMediaExecId++}.`;\n    try {\n        tracer?.trace(tag, constraints);\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        tracer?.trace(`${tag}OnSuccess`, dumpStream(stream));\n        if (isFirefox()) {\n            // When enumerating devices, Firefox will hide device labels unless there's been\n            // an active user media stream on the page. So we force device list updates after\n            // every successful getUserMedia call.\n            navigator.mediaDevices.dispatchEvent(new Event('devicechange'));\n        }\n        if (constraints.video) {\n            const [videoTrack] = stream.getVideoTracks();\n            if (videoTrack) {\n                const { width, height } = videoTrack.getSettings();\n                const target = constraints.video;\n                if (width !== target.width || height !== target.height) {\n                    tracer?.trace(`${tag}Warn`, `Requested resolution ${target.width}x${target.height} but got ${width}x${height}`);\n                }\n            }\n        }\n        return stream;\n    } catch (error) {\n        tracer?.trace(`${tag}OnFailure`, error.name);\n        throw error;\n    }\n};\nfunction isNotFoundOrOverconstrainedError(error) {\n    if (!error || typeof error !== 'object') {\n        return false;\n    }\n    if ('name' in error && typeof error.name === 'string') {\n        const name = error.name;\n        if ([\n            'OverconstrainedError',\n            'NotFoundError'\n        ].includes(name)) {\n            return true;\n        }\n    }\n    if ('message' in error && typeof error.message === 'string') {\n        const message = error.message;\n        if (message.startsWith('OverconstrainedError')) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @param trackConstraints the constraints to use when requesting the stream.\n * @param tracer the tracer to use for tracing the stream creation.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getAudioStream = async (trackConstraints, tracer)=>{\n    const constraints = {\n        audio: {\n            ...audioDeviceConstraints.audio,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getAudioBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return await getStream(constraints, tracer);\n    } catch (error) {\n        if (isNotFoundOrOverconstrainedError(error) && trackConstraints?.deviceId) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { deviceId, ...relaxedConstraints } = trackConstraints;\n            getLogger([\n                'devices'\n            ])('warn', 'Failed to get audio stream, will try again with relaxed constraints', {\n                error,\n                constraints,\n                relaxedConstraints\n            });\n            return getAudioStream(relaxedConstraints);\n        }\n        getLogger([\n            'devices'\n        ])('error', 'Failed to get audio stream', {\n            error,\n            constraints\n        });\n        throw error;\n    }\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @param trackConstraints the constraints to use when requesting the stream.\n * @param tracer the tracer to use for tracing the stream creation.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getVideoStream = async (trackConstraints, tracer)=>{\n    const constraints = {\n        video: {\n            ...videoDeviceConstraints.video,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getVideoBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return await getStream(constraints, tracer);\n    } catch (error) {\n        if (isNotFoundOrOverconstrainedError(error) && trackConstraints?.deviceId) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const { deviceId, ...relaxedConstraints } = trackConstraints;\n            getLogger([\n                'devices'\n            ])('warn', 'Failed to get video stream, will try again with relaxed constraints', {\n                error,\n                constraints,\n                relaxedConstraints\n            });\n            return getVideoStream(relaxedConstraints);\n        }\n        getLogger([\n            'devices'\n        ])('error', 'Failed to get video stream', {\n            error,\n            constraints\n        });\n        throw error;\n    }\n};\nlet getDisplayMediaExecId = 0;\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n * @param tracer the tracer to use for tracing the stream creation.\n */ const getScreenShareStream = async (options, tracer)=>{\n    const tag = `navigator.mediaDevices.getDisplayMedia.${getDisplayMediaExecId++}.`;\n    try {\n        const constraints = {\n            // @ts-expect-error - not present in types yet\n            systemAudio: 'include',\n            ...options,\n            video: typeof options?.video === 'boolean' ? options.video // must be 'true'\n             : {\n                width: {\n                    max: 2560\n                },\n                height: {\n                    max: 1440\n                },\n                frameRate: {\n                    ideal: 30\n                },\n                ...options?.video\n            },\n            audio: typeof options?.audio === 'boolean' ? options.audio : {\n                channelCount: {\n                    ideal: 2\n                },\n                echoCancellation: false,\n                autoGainControl: false,\n                noiseSuppression: false,\n                ...options?.audio\n            }\n        };\n        tracer?.trace(tag, constraints);\n        const stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n        tracer?.trace(`${tag}OnSuccess`, dumpStream(stream));\n        return stream;\n    } catch (e) {\n        tracer?.trace(`${tag}OnFailure`, e.name);\n        getLogger([\n            'devices'\n        ])('error', 'Failed to get screen share stream', e);\n        throw e;\n    }\n};\nconst deviceIds$ = typeof navigator !== 'undefined' && typeof navigator.mediaDevices !== 'undefined' ? getDeviceChangeObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.concatMap)(()=>navigator.mediaDevices.enumerateDevices()), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1)) : undefined;\n/**\n * Resolves `default` device id into the real device id. Some browsers (notably,\n * Chromium-based) report device with id `default` among audio input and output\n * devices. Since not every browser does that, we never want `default` id to be\n * used within our SDK. This function tries to find the real id for the `default`\n * device.\n */ function resolveDeviceId(deviceId, kind) {\n    if (deviceId !== 'default') return deviceId;\n    const devices = deviceIds$ && getCurrentValue(deviceIds$);\n    if (!devices) return deviceId;\n    const defaultDeviceInfo = devices.find((d)=>d.deviceId === deviceId);\n    if (!defaultDeviceInfo) return deviceId;\n    const groupId = defaultDeviceInfo.groupId;\n    const candidates = devices.filter((d)=>d.kind === kind && d.deviceId !== 'default' && d.groupId === groupId);\n    return candidates.length === 1 ? candidates[0].deviceId : deviceId;\n}\n/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */ const isMobile = ()=>/Mobi/i.test(navigator.userAgent);\nclass InputMediaDeviceManager {\n    constructor(call, state, trackType){\n        /**\n         * if true, stops the media stream when call is left\n         */ this.stopOnLeave = true;\n        this.subscriptions = [];\n        this.areSubscriptionsSetUp = false;\n        this.isTrackStoppedDueToTrackEnd = false;\n        this.filters = [];\n        this.statusChangeConcurrencyTag = Symbol('statusChangeConcurrencyTag');\n        this.filterRegistrationConcurrencyTag = Symbol('filterRegistrationConcurrencyTag');\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s());\n            this.subscriptions = [];\n            this.areSubscriptionsSetUp = false;\n        };\n        this.call = call;\n        this.state = state;\n        this.trackType = trackType;\n        this.logger = getLogger([\n            `${TrackType[trackType].toLowerCase()} manager`\n        ]);\n        this.setup();\n    }\n    setup() {\n        if (this.areSubscriptionsSetUp) {\n            return;\n        }\n        this.areSubscriptionsSetUp = true;\n        if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n            this.handleDisconnectedOrReplacedDevices();\n        }\n    }\n    /**\n     * Lists the available audio/video devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        return this.getDevices();\n    }\n    /**\n     * Returns `true` when this device is in enabled state.\n     */ get enabled() {\n        return this.state.status === 'enabled';\n    }\n    /**\n     * Starts stream.\n     */ async enable() {\n        this.state.prevStatus = this.state.optimisticStatus;\n        if (this.state.optimisticStatus === 'enabled') {\n            return;\n        }\n        this.state.setPendingStatus('enabled');\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                await this.unmuteStream();\n                this.state.setStatus('enabled');\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Stops or pauses the stream based on state.disableMode\n     * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n     */ async disable(forceStop = false) {\n        this.state.prevStatus = this.state.optimisticStatus;\n        if (!forceStop && this.state.optimisticStatus === 'disabled') {\n            return;\n        }\n        this.state.setPendingStatus('disabled');\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                const stopTracks = forceStop || this.state.disableMode === 'stop-tracks';\n                await this.muteStream(stopTracks);\n                this.state.setStatus('disabled');\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Returns a promise that resolves when all pe\n     */ async statusChangeSettled() {\n        await settled(this.statusChangeConcurrencyTag);\n    }\n    /**\n     * If status was previously enabled, it will re-enable the device.\n     */ async resume() {\n        if (this.state.prevStatus === 'enabled' && this.state.status !== 'enabled') {\n            await this.enable();\n        }\n    }\n    /**\n     * If the current device status is disabled, it will enable the device,\n     * else it will disable it.\n     */ async toggle() {\n        if (this.state.optimisticStatus === 'enabled') {\n            return await this.disable();\n        } else {\n            return await this.enable();\n        }\n    }\n    /**\n     * Registers a filter that will be applied to the stream.\n     *\n     * The registered filter will get the existing stream, and it should return\n     * a new stream with the applied filter.\n     *\n     * @param filter the filter to register.\n     * @returns MediaStreamFilterRegistrationResult\n     */ registerFilter(filter) {\n        const entry = {\n            start: filter,\n            stop: undefined\n        };\n        this.call.tracer.trace(`registerFilter.${TrackType[this.trackType]}`, null);\n        const registered = withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n            await settled(this.statusChangeConcurrencyTag);\n            this.filters.push(entry);\n            await this.applySettingsToStream();\n        });\n        return {\n            registered,\n            unregister: ()=>withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n                    await settled(this.statusChangeConcurrencyTag);\n                    entry.stop?.();\n                    this.filters = this.filters.filter((f)=>f !== entry);\n                    await this.applySettingsToStream();\n                    this.call.tracer.trace(`unregisterFilter.${TrackType[this.trackType]}`, null);\n                })\n        };\n    }\n    /**\n     * Will set the default constraints for the device.\n     *\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.state.setDefaultConstraints(constraints);\n    }\n    /**\n     * Selects a device.\n     *\n     * Note: This method is not supported in React Native\n     * @param deviceId the device id to select.\n     */ async select(deviceId) {\n        if (isReactNative()) {\n            throw new Error('This method is not supported in React Native.');\n        }\n        const prevDeviceId = this.state.selectedDevice;\n        if (deviceId === prevDeviceId) {\n            return;\n        }\n        try {\n            this.state.setDevice(deviceId);\n            await this.applySettingsToStream();\n        } catch (error) {\n            this.state.setDevice(prevDeviceId);\n            throw error;\n        }\n    }\n    async applySettingsToStream() {\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            if (this.enabled) {\n                try {\n                    await this.muteStream();\n                    this.state.setStatus('disabled');\n                    if (signal.aborted) {\n                        return;\n                    }\n                    await this.unmuteStream();\n                    this.state.setStatus('enabled');\n                } finally{\n                    if (!signal.aborted) {\n                        this.state.setPendingStatus(this.state.status);\n                    }\n                }\n            }\n        });\n    }\n    publishStream(stream) {\n        return this.call.publish(stream, this.trackType);\n    }\n    stopPublishStream() {\n        return this.call.stopPublish(this.trackType);\n    }\n    getTracks() {\n        return this.state.mediaStream?.getTracks() ?? [];\n    }\n    async muteStream(stopTracks = true) {\n        const mediaStream = this.state.mediaStream;\n        if (!mediaStream) return;\n        this.logger('debug', `${stopTracks ? 'Stopping' : 'Disabling'} stream`);\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.stopPublishStream();\n        }\n        this.muteLocalStream(stopTracks);\n        const allEnded = this.getTracks().every((t)=>t.readyState === 'ended');\n        if (allEnded) {\n            // @ts-expect-error release() is present in react-native-webrtc\n            if (typeof mediaStream.release === 'function') {\n                // @ts-expect-error called to dispose the stream in RN\n                mediaStream.release();\n            }\n            this.state.setMediaStream(undefined, undefined);\n            this.filters.forEach((entry)=>entry.stop?.());\n        }\n    }\n    disableTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.enabled) track.enabled = false;\n        });\n    }\n    enableTracks() {\n        this.getTracks().forEach((track)=>{\n            if (!track.enabled) track.enabled = true;\n        });\n    }\n    stopTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.readyState === 'live') track.stop();\n        });\n    }\n    muteLocalStream(stopTracks) {\n        if (!this.state.mediaStream) {\n            return;\n        }\n        if (stopTracks) {\n            this.stopTracks();\n        } else {\n            this.disableTracks();\n        }\n    }\n    async unmuteStream() {\n        this.logger('debug', 'Starting stream');\n        let stream;\n        let rootStream;\n        if (this.state.mediaStream && this.getTracks().every((t)=>t.readyState === 'live')) {\n            stream = this.state.mediaStream;\n            this.enableTracks();\n        } else {\n            const defaultConstraints = this.state.defaultConstraints;\n            const constraints = {\n                ...defaultConstraints,\n                deviceId: this.state.selectedDevice ? {\n                    exact: this.state.selectedDevice\n                } : undefined\n            };\n            /**\n             * Chains two media streams together.\n             *\n             * In our case, filters MediaStreams are derived from their parent MediaStream.\n             * However, once a child filter's track is stopped,\n             * the tracks of the parent MediaStream aren't automatically stopped.\n             * This leads to a situation where the camera indicator light is still on\n             * even though the user stopped publishing video.\n             *\n             * This function works around this issue by stopping the parent MediaStream's tracks\n             * as well once the child filter's tracks are stopped.\n             *\n             * It works by patching the stop() method of the child filter's tracks to also stop\n             * the parent MediaStream's tracks of the same type. Here we assume that\n             * the parent MediaStream has only one track of each type.\n             *\n             * @param parentStream the parent MediaStream. Omit for the root stream.\n             */ const chainWith = (parentStream)=>async (filterStream)=>{\n                    if (!parentStream) return filterStream;\n                    // TODO OL: take care of track.enabled property as well\n                    const parent = await parentStream;\n                    filterStream.getTracks().forEach((track)=>{\n                        const originalStop = track.stop;\n                        track.stop = function stop() {\n                            originalStop.call(track);\n                            parent.getTracks().forEach((parentTrack)=>{\n                                if (parentTrack.kind === track.kind) {\n                                    parentTrack.stop();\n                                }\n                            });\n                        };\n                    });\n                    parent.getTracks().forEach((parentTrack)=>{\n                        // When the parent stream abruptly ends, we propagate the event\n                        // to the filter stream.\n                        // This usually happens when the camera/microphone permissions\n                        // are revoked or when the device is disconnected.\n                        const handleParentTrackEnded = ()=>{\n                            filterStream.getTracks().forEach((track)=>{\n                                if (parentTrack.kind !== track.kind) return;\n                                track.stop();\n                                track.dispatchEvent(new Event('ended')); // propagate the event\n                            });\n                        };\n                        parentTrack.addEventListener('ended', handleParentTrackEnded);\n                        this.subscriptions.push(()=>{\n                            parentTrack.removeEventListener('ended', handleParentTrackEnded);\n                        });\n                    });\n                    return filterStream;\n                };\n            // the rootStream represents the stream coming from the actual device\n            // e.g. camera or microphone stream\n            rootStream = this.getStream(constraints);\n            // we publish the last MediaStream of the chain\n            stream = await this.filters.reduce((parent, entry)=>parent.then((inputStream)=>{\n                    const { stop, output } = entry.start(inputStream);\n                    entry.stop = stop;\n                    return output;\n                }).then(chainWith(parent), (error)=>{\n                    this.logger('warn', 'Filter failed to start and will be ignored', error);\n                    return parent;\n                }), rootStream);\n        }\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.publishStream(stream);\n        }\n        if (this.state.mediaStream !== stream) {\n            this.state.setMediaStream(stream, await rootStream);\n            const handleTrackEnded = async ()=>{\n                await this.statusChangeSettled();\n                if (this.enabled) {\n                    this.isTrackStoppedDueToTrackEnd = true;\n                    setTimeout(()=>{\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    }, 2000);\n                    await this.disable();\n                }\n            };\n            const createTrackMuteHandler = (muted)=>()=>{\n                    if (!isMobile() || this.trackType !== TrackType.VIDEO) return;\n                    this.call.notifyTrackMuteState(muted, this.trackType).catch((err)=>{\n                        this.logger('warn', 'Error while notifying track mute state', err);\n                    });\n                };\n            stream.getTracks().forEach((track)=>{\n                const muteHandler = createTrackMuteHandler(true);\n                const unmuteHandler = createTrackMuteHandler(false);\n                track.addEventListener('mute', muteHandler);\n                track.addEventListener('unmute', unmuteHandler);\n                track.addEventListener('ended', handleTrackEnded);\n                this.subscriptions.push(()=>{\n                    track.removeEventListener('mute', muteHandler);\n                    track.removeEventListener('unmute', unmuteHandler);\n                    track.removeEventListener('ended', handleTrackEnded);\n                });\n            });\n        }\n    }\n    get mediaDeviceKind() {\n        if (this.trackType === TrackType.AUDIO) {\n            return 'audioinput';\n        }\n        if (this.trackType === TrackType.VIDEO) {\n            return 'videoinput';\n        }\n        return '';\n    }\n    handleDisconnectedOrReplacedDevices() {\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n            deviceIds$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.pairwise)()),\n            this.state.selectedDevice$\n        ]), async ([[prevDevices, currentDevices], deviceId])=>{\n            try {\n                if (!deviceId) return;\n                await this.statusChangeSettled();\n                let isDeviceDisconnected = false;\n                let isDeviceReplaced = false;\n                const currentDevice = this.findDevice(currentDevices, deviceId);\n                const prevDevice = this.findDevice(prevDevices, deviceId);\n                if (!currentDevice && prevDevice) {\n                    isDeviceDisconnected = true;\n                } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n                    isDeviceReplaced = true;\n                }\n                if (isDeviceDisconnected) {\n                    await this.disable();\n                    await this.select(undefined);\n                }\n                if (isDeviceReplaced) {\n                    if (this.isTrackStoppedDueToTrackEnd && this.state.status === 'disabled') {\n                        await this.enable();\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    } else {\n                        await this.applySettingsToStream();\n                    }\n                }\n            } catch (err) {\n                this.logger('warn', 'Unexpected error while handling disconnected or replaced device', err);\n            }\n        }));\n    }\n    findDevice(devices, deviceId) {\n        const kind = this.mediaDeviceKind;\n        return devices.find((d)=>d.deviceId === deviceId && d.kind === kind);\n    }\n}\nclass InputMediaDeviceManagerState {\n    /**\n     * Constructs new InputMediaDeviceManagerState instance.\n     *\n     * @param disableMode the disable mode to use.\n     * @param permission the BrowserPermission to use for querying.\n     * `undefined` means no permission is required.\n     */ constructor(disableMode = 'stop-tracks', permission){\n        this.disableMode = disableMode;\n        this.statusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.optimisticStatusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.mediaStreamSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.defaultConstraintsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n         *\n         */ this.mediaStream$ = this.mediaStreamSubject.asObservable();\n        /**\n         * An Observable that emits the currently selected device\n         */ this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the device status\n         */ this.status$ = this.statusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n        /**\n         * An Observable the reflects the requested device status. Useful for optimistic UIs\n         */ this.optimisticStatus$ = this.optimisticStatusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n        /**\n         * The default constraints for the device.\n         */ this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n        this.hasBrowserPermission$ = permission ? permission.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1)) : (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(true);\n        this.browserPermissionState$ = permission ? permission.asStateObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1)) : (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.of)('prompt');\n        this.isPromptingPermission$ = permission ? permission.getIsPromptingObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.shareReplay)(1)) : (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.of)(false);\n    }\n    /**\n     * The device status\n     */ get status() {\n        return getCurrentValue(this.status$);\n    }\n    /**\n     * The requested device status. Useful for optimistic UIs\n     */ get optimisticStatus() {\n        return getCurrentValue(this.optimisticStatus$);\n    }\n    /**\n     * The currently selected device\n     */ get selectedDevice() {\n        return getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The current media stream, or `undefined` if the device is currently disabled.\n     */ get mediaStream() {\n        return getCurrentValue(this.mediaStream$);\n    }\n    /**\n     * @internal\n     * @param status\n     */ setStatus(status) {\n        setCurrentValue(this.statusSubject, status);\n    }\n    /**\n     * @internal\n     * @param pendingStatus\n     */ setPendingStatus(pendingStatus) {\n        setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n    }\n    /**\n     * Updates the `mediaStream` state variable.\n     *\n     * @internal\n     * @param stream the stream to set.\n     * @param rootStream the root stream, applicable when filters are used\n     * as this is the stream that holds the actual deviceId information.\n     */ setMediaStream(stream, rootStream) {\n        setCurrentValue(this.mediaStreamSubject, stream);\n        if (rootStream) {\n            this.setDevice(this.getDeviceIdFromStream(rootStream));\n        }\n    }\n    /**\n     * @internal\n     * @param deviceId the device id to set.\n     */ setDevice(deviceId) {\n        setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * Gets the default constraints for the device.\n     */ get defaultConstraints() {\n        return getCurrentValue(this.defaultConstraints$);\n    }\n    /**\n     * Sets the default constraints for the device.\n     *\n     * @internal\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        setCurrentValue(this.defaultConstraintsSubject, constraints);\n    }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super('stop-tracks', getVideoBrowserPermission());\n        this.directionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        this.direction$ = this.directionSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n    }\n    /**\n     * The preferred camera direction\n     * front - means the camera facing the user\n     * back - means the camera facing the environment\n     */ get direction() {\n        return getCurrentValue(this.direction$);\n    }\n    /**\n     * @internal\n     */ setDirection(direction) {\n        setCurrentValue(this.directionSubject, direction);\n    }\n    /**\n     * @internal\n     */ setMediaStream(stream, rootStream) {\n        super.setMediaStream(stream, rootStream);\n        if (stream) {\n            // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n            const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === 'environment' ? 'back' : 'front';\n            this.setDirection(direction);\n        }\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getVideoTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nclass CameraManager extends InputMediaDeviceManager {\n    /**\n     * Constructs a new CameraManager.\n     *\n     * @param call the call instance.\n     */ constructor(call){\n        super(call, new CameraManagerState(), TrackType.VIDEO);\n        this.targetResolution = {\n            width: 1280,\n            height: 720\n        };\n    }\n    isDirectionSupportedByDevice() {\n        return isReactNative() || isMobile();\n    }\n    /**\n     * Select the camera direction.\n     *\n     * @param direction the direction of the camera to select.\n     */ async selectDirection(direction) {\n        if (!this.isDirectionSupportedByDevice()) {\n            this.logger('warn', 'Setting direction is not supported on this device');\n            return;\n        }\n        // providing both device id and direction doesn't work, so we deselect the device\n        this.state.setDirection(direction);\n        this.state.setDevice(undefined);\n        if (isReactNative()) {\n            const videoTrack = this.getTracks()[0];\n            await videoTrack?.applyConstraints({\n                facingMode: direction === 'front' ? 'user' : 'environment'\n            });\n            return;\n        }\n        this.getTracks().forEach((track)=>track.stop());\n        try {\n            await this.unmuteStream();\n        } catch (error) {\n            if (error instanceof Error && error.name === 'NotReadableError') {\n                // the camera is already in use, and the device can't use it unless it's released.\n                // in that case, we need to stop the stream and start it again.\n                await this.muteStream();\n                await this.unmuteStream();\n            }\n            throw error;\n        }\n    }\n    /**\n     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n     *\n     * Note: if there is no available camera with the desired direction, this method will do nothing.\n     * @returns\n     */ async flip() {\n        const newDirection = this.state.direction === 'front' ? 'back' : 'front';\n        await this.selectDirection(newDirection);\n    }\n    /**\n     * @internal\n     */ async selectTargetResolution(resolution) {\n        this.targetResolution.height = resolution.height;\n        this.targetResolution.width = resolution.width;\n        if (this.state.optimisticStatus === 'enabled') {\n            try {\n                await this.statusChangeSettled();\n            } catch (error) {\n                // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n                this.logger('warn', 'could not apply target resolution', error);\n            }\n        }\n        if (this.enabled && this.state.mediaStream) {\n            const [videoTrack] = this.state.mediaStream.getVideoTracks();\n            if (!videoTrack) return;\n            const { width, height } = videoTrack.getSettings();\n            if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n                await this.applySettingsToStream();\n                this.logger('debug', `${width}x${height} target resolution applied to media stream`);\n            }\n        }\n    }\n    /**\n     * Applies the video settings to the camera.\n     *\n     * @param settings the video settings to apply.\n     * @param publish whether to publish the stream after applying the settings.\n     */ async apply(settings, publish) {\n        const hasPublishedVideo = !!this.call.state.localParticipant?.videoStream;\n        const hasPermission = this.call.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO);\n        if (hasPublishedVideo || !hasPermission) return;\n        // Wait for any in progress camera operation\n        await this.statusChangeSettled();\n        const { target_resolution, camera_facing, camera_default_on } = settings;\n        // normalize target resolution to landscape format.\n        // on mobile devices, the device itself adjusts the resolution to portrait or landscape\n        // depending on the orientation of the device. using portrait resolution\n        // will result in falling back to the default resolution (640x480).\n        let { width, height } = target_resolution;\n        if (width < height) [width, height] = [\n            height,\n            width\n        ];\n        await this.selectTargetResolution({\n            width,\n            height\n        });\n        // Set camera direction if it's not yet set\n        if (!this.state.direction && !this.state.selectedDevice) {\n            this.state.setDirection(camera_facing === 'front' ? 'front' : 'back');\n        }\n        if (!publish) return;\n        const { mediaStream } = this.state;\n        if (this.enabled && mediaStream) {\n            // The camera is already enabled (e.g. lobby screen). Publish the stream\n            await this.publishStream(mediaStream);\n        } else if (this.state.status === undefined && camera_default_on) {\n            // Start camera if backend config specifies, and there is no local setting\n            await this.enable();\n        }\n    }\n    getDevices() {\n        return getVideoDevices(this.call.tracer);\n    }\n    getStream(constraints) {\n        constraints.width = this.targetResolution.width;\n        constraints.height = this.targetResolution.height;\n        // We can't set both device id and facing mode\n        // Device id has higher priority\n        if (!constraints.deviceId && this.state.direction && this.isDirectionSupportedByDevice()) {\n            constraints.facingMode = this.state.direction === 'front' ? 'user' : 'environment';\n        }\n        return getVideoStream(constraints, this.call.tracer);\n    }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n    constructor(disableMode){\n        super(disableMode, getAudioBrowserPermission());\n        this.speakingWhileMutedSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(false);\n        this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n    }\n    /**\n     * `true` if the user's microphone is muted but they'are speaking.\n     *\n     * This feature is not available in the React Native SDK.\n     */ get speakingWhileMuted() {\n        return getCurrentValue(this.speakingWhileMuted$);\n    }\n    /**\n     * @internal\n     */ setSpeakingWhileMuted(isSpeaking) {\n        setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getAudioTracks();\n        const unresolvedDeviceId = track?.getSettings().deviceId;\n        return resolveDeviceId(unresolvedDeviceId, 'audioinput');\n    }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */ const createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {})=>{\n    const { detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS, audioLevelThreshold = AUDIO_LEVEL_THRESHOLD, fftSize = FFT_SIZE, destroyStreamOnStop = true } = options;\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = fftSize;\n    const microphone = audioContext.createMediaStreamSource(audioStream);\n    microphone.connect(analyser);\n    const intervalId = setInterval(()=>{\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        const isSoundDetected = data.some((value)=>value >= audioLevelThreshold);\n        const averagedDataValue = data.reduce((pv, cv)=>pv + cv, 0) / data.length;\n        const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n        // When the track is disabled, it takes time for the buffer to empty\n        // This check will ensure that we don't send anything if the track is disabled\n        if (audioStream.getAudioTracks()[0]?.enabled) {\n            onSoundDetectedStateChanged({\n                isSoundDetected,\n                audioLevel: percentage\n            });\n        } else {\n            onSoundDetectedStateChanged({\n                isSoundDetected: false,\n                audioLevel: 0\n            });\n        }\n    }, detectionFrequencyInMs);\n    return async function stop() {\n        clearInterval(intervalId);\n        // clean-up the AudioContext elements\n        microphone.disconnect();\n        analyser.disconnect();\n        if (audioContext.state !== 'closed') {\n            await audioContext.close();\n        }\n        // stop the stream\n        if (destroyStreamOnStop) {\n            audioStream.getTracks().forEach((track)=>{\n                track.stop();\n                audioStream.removeTrack(track);\n            });\n        }\n    };\n};\nclass RNSpeechDetector {\n    constructor(externalAudioStream){\n        this.pc1 = new RTCPeerConnection({});\n        this.pc2 = new RTCPeerConnection({});\n        this.externalAudioStream = externalAudioStream;\n    }\n    /**\n     * Starts the speech detection.\n     */ async start(onSoundDetectedStateChanged) {\n        try {\n            let audioStream;\n            if (this.externalAudioStream != null) {\n                audioStream = this.externalAudioStream;\n            } else {\n                audioStream = await navigator.mediaDevices.getUserMedia({\n                    audio: true\n                });\n                this.audioStream = audioStream;\n            }\n            this.pc1.addEventListener('icecandidate', async (e)=>{\n                await this.pc2.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener('icecandidate', async (e)=>{\n                await this.pc1.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener('track', (e)=>{\n                e.streams[0].getTracks().forEach((track)=>{\n                    // In RN, the remote track is automatically added to the audio output device\n                    // so we need to mute it to avoid hearing the audio back\n                    // @ts-expect-error _setVolume is a private method in react-native-webrtc\n                    track._setVolume(0);\n                });\n            });\n            audioStream.getTracks().forEach((track)=>this.pc1.addTrack(track, audioStream));\n            const offer = await this.pc1.createOffer({});\n            await this.pc2.setRemoteDescription(offer);\n            await this.pc1.setLocalDescription(offer);\n            const answer = await this.pc2.createAnswer();\n            await this.pc1.setRemoteDescription(answer);\n            await this.pc2.setLocalDescription(answer);\n            const unsub = this.onSpeakingDetectedStateChange(onSoundDetectedStateChanged);\n            return ()=>{\n                unsub();\n                this.stop();\n            };\n        } catch (error) {\n            const logger = getLogger([\n                'RNSpeechDetector'\n            ]);\n            logger('error', 'error handling permissions: ', error);\n            return ()=>{};\n        }\n    }\n    /**\n     * Stops the speech detection and releases all allocated resources.\n     */ stop() {\n        this.pc1.close();\n        this.pc2.close();\n        if (this.externalAudioStream != null) {\n            this.externalAudioStream = undefined;\n        } else {\n            this.cleanupAudioStream();\n        }\n    }\n    /**\n     * Public method that detects the audio levels and returns the status.\n     */ onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n        const initialBaselineNoiseLevel = 0.13;\n        let baselineNoiseLevel = initialBaselineNoiseLevel;\n        let speechDetected = false;\n        let speechTimer;\n        let silenceTimer;\n        const audioLevelHistory = []; // Store recent audio levels for smoother detection\n        const historyLength = 10;\n        const silenceThreshold = 1.1;\n        const resetThreshold = 0.9;\n        const speechTimeout = 500; // Speech is set to true after 500ms of audio detection\n        const silenceTimeout = 5000; // Reset baseline after 5 seconds of silence\n        const checkAudioLevel = async ()=>{\n            try {\n                const stats = await this.pc1.getStats();\n                const report = flatten(stats);\n                // Audio levels are present inside stats of type `media-source` and of kind `audio`\n                const audioMediaSourceStats = report.find((stat)=>stat.type === 'media-source' && stat.kind === 'audio');\n                if (audioMediaSourceStats) {\n                    const { audioLevel } = audioMediaSourceStats;\n                    if (audioLevel) {\n                        // Update audio level history (with max historyLength sized array)\n                        audioLevelHistory.push(audioLevel);\n                        if (audioLevelHistory.length > historyLength) {\n                            audioLevelHistory.shift();\n                        }\n                        // Calculate average audio level\n                        const avgAudioLevel = audioLevelHistory.reduce((a, b)=>a + b, 0) / audioLevelHistory.length;\n                        // Update baseline (if necessary) based on silence detection\n                        if (avgAudioLevel < baselineNoiseLevel * silenceThreshold) {\n                            if (!silenceTimer) {\n                                silenceTimer = setTimeout(()=>{\n                                    baselineNoiseLevel = Math.min(avgAudioLevel * resetThreshold, initialBaselineNoiseLevel);\n                                }, silenceTimeout);\n                            }\n                        } else {\n                            clearTimeout(silenceTimer);\n                            silenceTimer = undefined;\n                        }\n                        // Speech detection with hysteresis\n                        if (avgAudioLevel > baselineNoiseLevel * 1.5) {\n                            if (!speechDetected) {\n                                speechDetected = true;\n                                onSoundDetectedStateChanged({\n                                    isSoundDetected: true,\n                                    audioLevel\n                                });\n                            }\n                            clearTimeout(speechTimer);\n                            speechTimer = setTimeout(()=>{\n                                speechDetected = false;\n                                onSoundDetectedStateChanged({\n                                    isSoundDetected: false,\n                                    audioLevel: 0\n                                });\n                            }, speechTimeout);\n                        }\n                    }\n                }\n            } catch (error) {\n                const logger = getLogger([\n                    'RNSpeechDetector'\n                ]);\n                logger('error', 'error checking audio level from stats', error);\n            }\n        };\n        // Call checkAudioLevel periodically (every 100ms)\n        const intervalId = setInterval(checkAudioLevel, 100);\n        return ()=>{\n            clearInterval(intervalId);\n            clearTimeout(speechTimer);\n            clearTimeout(silenceTimer);\n        };\n    }\n    cleanupAudioStream() {\n        if (!this.audioStream) {\n            return;\n        }\n        this.audioStream.getTracks().forEach((track)=>track.stop());\n        if (// @ts-expect-error release() is present in react-native-webrtc\n        typeof this.audioStream.release === 'function') {\n            // @ts-expect-error called to dispose the stream in RN\n            this.audioStream.release();\n        }\n    }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n    constructor(call, disableMode = 'stop-tracks'){\n        super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n        this.speakingWhileMutedNotificationEnabled = true;\n        this.soundDetectorConcurrencyTag = Symbol('soundDetectorConcurrencyTag');\n    }\n    setup() {\n        super.setup();\n        this.subscriptions.push(createSafeAsyncSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n            this.call.state.callingState$,\n            this.call.state.ownCapabilities$,\n            this.state.selectedDevice$,\n            this.state.status$\n        ]), async ([callingState, ownCapabilities, deviceId, status])=>{\n            try {\n                if (callingState === CallingState.LEFT) {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n                if (callingState !== CallingState.JOINED) return;\n                if (!this.speakingWhileMutedNotificationEnabled) return;\n                if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n                    if (status === 'disabled') {\n                        await this.startSpeakingWhileMutedDetection(deviceId);\n                    } else {\n                        await this.stopSpeakingWhileMutedDetection();\n                    }\n                } else {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n            } catch (err) {\n                this.logger('warn', 'Could not enable speaking while muted', err);\n            }\n        }));\n        this.subscriptions.push(createSubscription(this.call.state.callingState$, (callingState)=>{\n            // do nothing when noise filtering isn't turned on\n            if (!this.noiseCancellationRegistration || !this.noiseCancellation) return;\n            const autoOn = this.call.state.settings?.audio.noise_cancellation?.mode === NoiseCancellationSettingsModeEnum.AUTO_ON;\n            if (autoOn && callingState === CallingState.JOINED) {\n                this.noiseCancellationRegistration.then(()=>{\n                    if (this.noiseCancellation?.canAutoEnable) {\n                        return this.noiseCancellation.canAutoEnable();\n                    }\n                    return true;\n                }).then((canAutoEnable)=>{\n                    if (canAutoEnable) {\n                        this.noiseCancellation?.enable();\n                    }\n                }).catch((err)=>{\n                    this.logger('warn', `Failed to enable noise cancellation`, err);\n                    return this.call.notifyNoiseCancellationStopped();\n                });\n            } else if (callingState === CallingState.LEFT) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.disable()).catch((err)=>{\n                    this.logger('warn', `Failed to disable noise cancellation`, err);\n                });\n            }\n        }));\n    }\n    /**\n     * Enables noise cancellation for the microphone.\n     *\n     * @param noiseCancellation - a noise cancellation instance to use.\n     */ async enableNoiseCancellation(noiseCancellation) {\n        const { ownCapabilities, settings } = this.call.state;\n        const hasNoiseCancellationCapability = ownCapabilities.includes(OwnCapability.ENABLE_NOISE_CANCELLATION);\n        if (!hasNoiseCancellationCapability) {\n            throw new Error('Noise cancellation is not available.');\n        }\n        const noiseCancellationSettings = settings?.audio.noise_cancellation;\n        if (!noiseCancellationSettings || noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.DISABLED) {\n            throw new Error('Noise cancellation is disabled for this call type.');\n        }\n        try {\n            this.noiseCancellation = noiseCancellation;\n            // listen for change events and notify the SFU\n            this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on('change', (enabled)=>{\n                this.call.tracer.trace('noiseCancellation.enabled', enabled);\n                if (enabled) {\n                    this.call.notifyNoiseCancellationStarting().catch((err)=>{\n                        this.logger('warn', `notifyNoiseCancellationStart failed`, err);\n                    });\n                } else {\n                    this.call.notifyNoiseCancellationStopped().catch((err)=>{\n                        this.logger('warn', `notifyNoiseCancellationStop failed`, err);\n                    });\n                }\n            });\n            if (isReactNative()) {\n                // no filter registration in React Native, its done in the native code on app init\n                this.noiseCancellationRegistration = Promise.resolve();\n            } else {\n                const registrationResult = this.registerFilter(noiseCancellation.toFilter());\n                this.noiseCancellationRegistration = registrationResult.registered;\n                this.unregisterNoiseCancellation = registrationResult.unregister;\n                await this.noiseCancellationRegistration;\n            }\n            // handles an edge case where a noise cancellation is enabled after\n            // the participant as joined the call -> we immediately enable NC\n            if (noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.AUTO_ON && this.call.state.callingState === CallingState.JOINED) {\n                let canAutoEnable = true;\n                if (noiseCancellation.canAutoEnable) {\n                    canAutoEnable = await noiseCancellation.canAutoEnable();\n                }\n                if (canAutoEnable) {\n                    noiseCancellation.enable();\n                }\n            }\n        } catch (e) {\n            this.logger('warn', 'Failed to enable noise cancellation', e);\n            await this.disableNoiseCancellation().catch((err)=>{\n                this.logger('warn', 'Failed to disable noise cancellation', err);\n            });\n            throw e;\n        }\n    }\n    /**\n     * Disables noise cancellation for the microphone.\n     */ async disableNoiseCancellation() {\n        await (this.unregisterNoiseCancellation?.() ?? Promise.resolve()).then(()=>this.noiseCancellation?.disable()).then(()=>this.noiseCancellationChangeUnsubscribe?.()).catch((err)=>{\n            this.logger('warn', 'Failed to unregister noise cancellation', err);\n        });\n        this.call.tracer.trace('noiseCancellation.disabled', true);\n        await this.call.notifyNoiseCancellationStopped();\n    }\n    /**\n     * Enables speaking while muted notification.\n     */ async enableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = true;\n        if (this.state.status === 'disabled') {\n            await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n        }\n    }\n    /**\n     * Disables speaking while muted notification.\n     */ async disableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = false;\n        await this.stopSpeakingWhileMutedDetection();\n    }\n    /**\n     * Applies the audio settings to the microphone.\n     * @param settings the audio settings to apply.\n     * @param publish whether to publish the stream after applying the settings.\n     */ async apply(settings, publish) {\n        if (!publish) return;\n        const hasPublishedAudio = !!this.call.state.localParticipant?.audioStream;\n        const hasPermission = this.call.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO);\n        if (hasPublishedAudio || !hasPermission) return;\n        // Wait for any in progress mic operation\n        await this.statusChangeSettled();\n        // Publish media stream that was set before we joined\n        const { mediaStream } = this.state;\n        if (this.enabled && mediaStream) {\n            // The mic is already enabled (e.g. lobby screen). Publish the stream\n            await this.publishStream(mediaStream);\n        } else if (this.state.status === undefined && settings.mic_default_on) {\n            // Start mic if backend config specifies, and there is no local setting\n            await this.enable();\n        }\n    }\n    getDevices() {\n        return getAudioDevices(this.call.tracer);\n    }\n    getStream(constraints) {\n        return getAudioStream(constraints, this.call.tracer);\n    }\n    async startSpeakingWhileMutedDetection(deviceId) {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            await this.stopSpeakingWhileMutedDetection();\n            if (isReactNative()) {\n                this.rnSpeechDetector = new RNSpeechDetector();\n                const unsubscribe = await this.rnSpeechDetector.start((event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n                this.soundDetectorCleanup = ()=>{\n                    unsubscribe();\n                    this.rnSpeechDetector = undefined;\n                };\n            } else {\n                // Need to start a new stream that's not connected to publisher\n                const stream = await this.getStream({\n                    deviceId: {\n                        exact: deviceId\n                    }\n                });\n                this.soundDetectorCleanup = createSoundDetector(stream, (event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n            }\n        });\n    }\n    async stopSpeakingWhileMutedDetection() {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            if (!this.soundDetectorCleanup) return;\n            const soundDetectorCleanup = this.soundDetectorCleanup;\n            this.soundDetectorCleanup = undefined;\n            this.state.setSpeakingWhileMuted(false);\n            await soundDetectorCleanup();\n        });\n    }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(...arguments);\n        this.audioEnabledSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(true);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current screen share audio status.\n         */ this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the current screen share settings.\n         */ this.settings$ = this.settingsSubject.asObservable();\n        /**\n         * @internal\n         */ this.getDeviceIdFromStream = (stream)=>{\n            const [track] = stream.getTracks();\n            return track?.getSettings().deviceId;\n        };\n    }\n    /**\n     * The current screen share audio status.\n     */ get audioEnabled() {\n        return getCurrentValue(this.audioEnabled$);\n    }\n    /**\n     * Set the current screen share audio status.\n     */ setAudioEnabled(isEnabled) {\n        setCurrentValue(this.audioEnabledSubject, isEnabled);\n    }\n    /**\n     * The current screen share settings.\n     */ get settings() {\n        return getCurrentValue(this.settings$);\n    }\n    /**\n     * Set the current screen share settings.\n     *\n     * @param settings the screen share settings to set.\n     */ setSettings(settings) {\n        setCurrentValue(this.settingsSubject, settings);\n    }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n    }\n    setup() {\n        super.setup();\n        this.subscriptions.push(createSubscription(this.call.state.settings$, (settings)=>{\n            const maybeTargetResolution = settings?.screensharing.target_resolution;\n            if (maybeTargetResolution) {\n                this.setDefaultConstraints({\n                    video: {\n                        width: maybeTargetResolution.width,\n                        height: maybeTargetResolution.height\n                    }\n                });\n            }\n        }));\n    }\n    /**\n     * Will enable screen share audio options on supported platforms.\n     *\n     * Note: for ongoing screen share, audio won't be enabled until you\n     * re-publish the screen share stream.\n     */ enableScreenShareAudio() {\n        this.state.setAudioEnabled(true);\n    }\n    /**\n     * Will disable screen share audio options on supported platforms.\n     */ async disableScreenShareAudio() {\n        this.state.setAudioEnabled(false);\n        if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n            await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO);\n        }\n    }\n    /**\n     * Returns the current screen share settings.\n     */ getSettings() {\n        return this.state.settings;\n    }\n    /**\n     * Sets the current screen share settings.\n     *\n     * @param settings the settings to set.\n     */ setSettings(settings) {\n        this.state.setSettings(settings);\n    }\n    getDevices() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.of)([]); // there are no devices to be listed for Screen Share\n    }\n    async getStream(constraints) {\n        if (!this.state.audioEnabled) {\n            constraints.audio = false;\n        }\n        const stream = await getScreenShareStream(constraints, this.call.tracer);\n        const [track] = stream.getVideoTracks();\n        const { contentHint } = this.state.settings || {};\n        if (typeof contentHint !== 'undefined' && track && 'contentHint' in track) {\n            this.call.tracer.trace('navigator.mediaDevices.getDisplayMedia.contentHint', contentHint);\n            track.contentHint = contentHint;\n        }\n        return stream;\n    }\n    async stopPublishStream() {\n        return this.call.stopPublish(TrackType.SCREEN_SHARE, TrackType.SCREEN_SHARE_AUDIO);\n    }\n    /**\n     * Overrides the default `select` method to throw an error.\n     */ async select() {\n        throw new Error('Not supported');\n    }\n}\nclass SpeakerState {\n    constructor(tracer){\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject('');\n        this.volumeSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(1);\n        /**\n         * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n         */ this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n        this.tracer = tracer;\n        this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n        this.volume$ = this.volumeSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.distinctUntilChanged)());\n    }\n    /**\n     * The currently selected device\n     *\n     * Note: this feature is not supported in React Native\n     */ get selectedDevice() {\n        return getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The currently selected volume\n     *\n     * Note: this feature is not supported in React Native\n     */ get volume() {\n        return getCurrentValue(this.volume$);\n    }\n    /**\n     * @internal\n     * @param deviceId\n     */ setDevice(deviceId) {\n        setCurrentValue(this.selectedDeviceSubject, deviceId);\n        this.tracer.trace('navigator.mediaDevices.setSinkId', deviceId);\n    }\n    /**\n     * @internal\n     * @param volume\n     */ setVolume(volume) {\n        setCurrentValue(this.volumeSubject, volume);\n    }\n}\nclass SpeakerManager {\n    constructor(call){\n        this.subscriptions = [];\n        this.areSubscriptionsSetUp = false;\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n            this.subscriptions = [];\n            this.areSubscriptionsSetUp = false;\n        };\n        this.call = call;\n        this.state = new SpeakerState(call.tracer);\n        this.setup();\n    }\n    setup() {\n        if (this.areSubscriptionsSetUp) {\n            return;\n        }\n        this.areSubscriptionsSetUp = true;\n        if (deviceIds$ && !isReactNative()) {\n            this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.combineLatest)([\n                deviceIds$,\n                this.state.selectedDevice$\n            ]).subscribe(([devices, deviceId])=>{\n                if (!deviceId) {\n                    return;\n                }\n                const device = devices.find((d)=>d.deviceId === deviceId && d.kind === 'audiooutput');\n                if (!device) {\n                    this.select('');\n                }\n            }));\n        }\n    }\n    /**\n     * Lists the available audio output devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     * Note: This method is not supported in React Native\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        return getAudioOutputDevices(this.call.tracer);\n    }\n    /**\n     * Select a device.\n     *\n     * Note: This method is not supported in React Native\n     *\n     * @param deviceId empty string means the system default\n     */ select(deviceId) {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        this.state.setDevice(deviceId);\n    }\n    /**\n     * Set the volume of the audio elements\n     * @param volume a number between 0 and 1.\n     *\n     * Note: This method is not supported in React Native\n     */ setVolume(volume) {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error('Volume must be between 0 and 1');\n        }\n        this.state.setVolume(volume);\n    }\n    /**\n     * Set the volume of a participant.\n     *\n     * Note: This method is not supported in React Native.\n     *\n     * @param sessionId the participant's session id.\n     * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n     */ setParticipantVolume(sessionId, volume) {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error('Volume must be between 0 and 1, or undefined');\n        }\n        this.call.state.updateParticipant(sessionId, {\n            audioVolume: volume\n        });\n    }\n}\n/**\n * An object representation of a `Call`.\n */ class Call {\n    /**\n     * Constructs a new `Call` instance.\n     *\n     * NOTE: Don't call the constructor directly, instead\n     * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n     * method to construct a `Call` instance.\n     */ constructor({ type, id, streamClient, members, ownCapabilities, sortParticipantsBy, clientStore, ringing = false, watching = false }){\n        /**\n         * The state of this call.\n         */ this.state = new CallState();\n        /**\n         * The permissions context of this call.\n         */ this.permissionsContext = new PermissionsContext();\n        this.tracer = new Tracer(null);\n        /**\n         * The event dispatcher instance dedicated to this Call instance.\n         * @private\n         */ this.dispatcher = new Dispatcher();\n        this.statsReportingIntervalInMs = 2000;\n        this.sfuClientTag = 0;\n        this.reconnectConcurrencyTag = Symbol('reconnectConcurrencyTag');\n        this.reconnectAttempts = 0;\n        this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n        this.reconnectReason = '';\n        this.fastReconnectDeadlineSeconds = 0;\n        this.disconnectionTimeoutSeconds = 0;\n        this.lastOfflineTimestamp = 0;\n        // maintain the order of publishing tracks to restore them after a reconnection\n        // it shouldn't contain duplicates\n        this.trackPublishOrder = [];\n        this.hasJoinedOnce = false;\n        this.deviceSettingsAppliedOnce = false;\n        this.initialized = false;\n        this.joinLeaveConcurrencyTag = Symbol('joinLeaveConcurrencyTag');\n        /**\n         * A list hooks/functions to invoke when the call is left.\n         * A typical use case is to clean up some global event handlers.\n         * @private\n         */ this.leaveCallHooks = new Set();\n        this.streamClientEventHandlers = new Map();\n        /**\n         * A list of capabilities that the client supports and are enabled.\n         */ this.clientCapabilities = new Set([\n            ClientCapability.SUBSCRIBER_VIDEO_PAUSE\n        ]);\n        /**\n         * Sets up the call instance.\n         *\n         * @internal an internal method and should not be used outside the SDK.\n         */ this.setup = async ()=>{\n            await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n                if (this.initialized) return;\n                this.leaveCallHooks.add(this.on('all', (event)=>{\n                    // update state with the latest event data\n                    this.state.updateFromEvent(event);\n                }));\n                this.leaveCallHooks.add(this.on('changePublishOptions', (event)=>{\n                    this.currentPublishOptions = event.publishOptions;\n                }));\n                this.leaveCallHooks.add(registerEventHandlers(this, this.dispatcher));\n                this.registerEffects();\n                this.registerReconnectHandlers();\n                this.camera.setup();\n                this.microphone.setup();\n                this.screenShare.setup();\n                this.speaker.setup();\n                if (this.state.callingState === CallingState.LEFT) {\n                    this.state.setCallingState(CallingState.IDLE);\n                }\n                this.initialized = true;\n            });\n        };\n        this.registerEffects = ()=>{\n            this.leaveCallHooks.add(// handles updating the permissions context when the settings change.\n            createSubscription(this.state.settings$, (settings)=>{\n                if (!settings) return;\n                this.permissionsContext.setCallSettings(settings);\n            }));\n            this.leaveCallHooks.add(// handle the case when the user permissions are modified.\n            createSafeAsyncSubscription(this.state.ownCapabilities$, this.handleOwnCapabilitiesUpdated));\n            this.leaveCallHooks.add(// handles the case when the user is blocked by the call owner.\n            createSubscription(this.state.blockedUserIds$, async (blockedUserIds)=>{\n                if (!blockedUserIds || blockedUserIds.length === 0) return;\n                const currentUserId = this.currentUserId;\n                if (currentUserId && blockedUserIds.includes(currentUserId)) {\n                    this.logger('info', 'Leaving call because of being blocked');\n                    await this.leave({\n                        message: 'user blocked'\n                    }).catch((err)=>{\n                        this.logger('error', 'Error leaving call after being blocked', err);\n                    });\n                }\n            }));\n            if (this.ringing) {\n                // if the call is ringing, we need to register the ringing call effects\n                this.handleRingingCall();\n            } else {\n                // if the call is not ringing, we need to register the ringing call subscriptions\n                // to handle the case when the call gets ringing flag after creation event\n                this.leaveCallHooks.add(// \"ringing\" mode effects and event handlers\n                createSubscription(this.ringingSubject, (isRinging)=>{\n                    if (!isRinging) return;\n                    this.handleRingingCall();\n                }));\n            }\n            this.leaveCallHooks.add(// cancel auto-drop when call is accepted or rejected\n            createSubscription(this.state.session$, (session)=>{\n                if (!this.ringing) return;\n                const receiverId = this.clientStore.connectedUser?.id;\n                if (!receiverId) return;\n                const isAcceptedByMe = Boolean(session?.accepted_by[receiverId]);\n                const isRejectedByMe = Boolean(session?.rejected_by[receiverId]);\n                if (isAcceptedByMe || isRejectedByMe) {\n                    this.cancelAutoDrop();\n                }\n                const isAcceptedElsewhere = isAcceptedByMe && this.state.callingState === CallingState.RINGING;\n                if ((isAcceptedElsewhere || isRejectedByMe) && !hasPending(this.joinLeaveConcurrencyTag)) {\n                    this.leave().catch(()=>{\n                        this.logger('error', 'Could not leave a call that was accepted or rejected elsewhere');\n                    });\n                }\n            }));\n        };\n        this.handleRingingCall = ()=>{\n            const callSession = this.state.session;\n            const receiver_id = this.clientStore.connectedUser?.id;\n            const ended_at = callSession?.ended_at;\n            const created_by_id = this.state.createdBy?.id;\n            const rejected_by = callSession?.rejected_by;\n            const accepted_by = callSession?.accepted_by;\n            let leaveCallIdle = false;\n            if (ended_at) {\n                // call was ended before it was accepted or rejected so we should leave it to idle\n                leaveCallIdle = true;\n            } else if (created_by_id && rejected_by) {\n                if (rejected_by[created_by_id]) {\n                    // call was cancelled by the caller\n                    leaveCallIdle = true;\n                }\n            } else if (receiver_id && rejected_by) {\n                if (rejected_by[receiver_id]) {\n                    // call was rejected by the receiver in some other device\n                    leaveCallIdle = true;\n                }\n            } else if (receiver_id && accepted_by) {\n                if (accepted_by[receiver_id]) {\n                    // call was accepted by the receiver in some other device\n                    leaveCallIdle = true;\n                }\n            }\n            if (leaveCallIdle) {\n                if (this.state.callingState !== CallingState.IDLE) {\n                    this.state.setCallingState(CallingState.IDLE);\n                }\n            } else {\n                if (this.state.callingState === CallingState.IDLE) {\n                    this.state.setCallingState(CallingState.RINGING);\n                }\n                this.scheduleAutoDrop();\n                this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n            }\n        };\n        this.handleOwnCapabilitiesUpdated = async (ownCapabilities)=>{\n            // update the permission context.\n            this.permissionsContext.setPermissions(ownCapabilities);\n            if (!this.publisher) return;\n            // check if the user still has publishing permissions and stop publishing if not.\n            const permissionToTrackType = {\n                [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n                [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n                [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n            };\n            for (const [permission, trackType] of Object.entries(permissionToTrackType)){\n                const hasPermission = this.permissionsContext.hasPermission(permission);\n                if (hasPermission) continue;\n                try {\n                    switch(trackType){\n                        case TrackType.AUDIO:\n                            if (this.microphone.enabled) await this.microphone.disable();\n                            break;\n                        case TrackType.VIDEO:\n                            if (this.camera.enabled) await this.camera.disable();\n                            break;\n                        case TrackType.SCREEN_SHARE:\n                            if (this.screenShare.enabled) await this.screenShare.disable();\n                            break;\n                    }\n                } catch (err) {\n                    this.logger('error', `Can't disable mic/camera/screenshare after revoked permissions`, err);\n                }\n            }\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n         * Please note that subscribing to WebSocket events is an advanced use-case.\n         * For most use-cases, it should be enough to watch for state changes.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.on = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.on(eventName, fn);\n            }\n            const offHandler = this.streamClient.on(eventName, (e)=>{\n                const event = e;\n                if (event.call_cid && event.call_cid === this.cid) {\n                    fn(event);\n                }\n            });\n            // keep the 'off' reference returned by the stream client\n            this.streamClientEventHandlers.set(fn, offHandler);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.off = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.off(eventName, fn);\n            }\n            // unsubscribe from the stream client event by using the 'off' reference\n            const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n            if (registeredOffHandler) {\n                registeredOffHandler();\n            }\n        };\n        /**\n         * Leave the call and stop the media streams that were published by the call.\n         */ this.leave = async ({ reject, reason, message } = {})=>{\n            if (this.state.callingState === CallingState.LEFT) {\n                throw new Error('Cannot leave call that has already been left.');\n            }\n            await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n                const callingState = this.state.callingState;\n                if (callingState === CallingState.LEFT) {\n                    return;\n                }\n                if (callingState === CallingState.JOINING) {\n                    const waitUntilCallJoined = ()=>{\n                        return new Promise((resolve)=>{\n                            this.state.callingState$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.takeWhile)((state)=>state !== CallingState.JOINED, true)).subscribe(()=>resolve());\n                        });\n                    };\n                    await waitUntilCallJoined();\n                }\n                if (callingState === CallingState.RINGING && reject !== false) {\n                    if (reject) {\n                        await this.reject(reason ?? 'decline');\n                    } else {\n                        // if reject was undefined, we still have to cancel the call automatically\n                        // when I am the creator and everyone else left the call\n                        const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n                        if (this.isCreatedByMe && !hasOtherParticipants) {\n                            await this.reject('cancel');\n                        }\n                    }\n                }\n                this.statsReporter?.stop();\n                this.statsReporter = undefined;\n                this.sfuStatsReporter?.flush();\n                this.sfuStatsReporter?.stop();\n                this.sfuStatsReporter = undefined;\n                this.subscriber?.dispose();\n                this.subscriber = undefined;\n                this.publisher?.dispose();\n                this.publisher = undefined;\n                await this.sfuClient?.leaveAndClose(message ?? reason ?? 'user is leaving the call');\n                this.sfuClient = undefined;\n                this.dynascaleManager.setSfuClient(undefined);\n                await this.dynascaleManager.dispose();\n                this.state.setCallingState(CallingState.LEFT);\n                this.state.setParticipants([]);\n                this.state.dispose();\n                // Call all leave call hooks, e.g. to clean up global event handlers\n                this.leaveCallHooks.forEach((hook)=>hook());\n                this.initialized = false;\n                this.hasJoinedOnce = false;\n                this.unifiedSessionId = undefined;\n                this.ringingSubject.next(false);\n                this.cancelAutoDrop();\n                this.clientStore.unregisterCall(this);\n                this.camera.dispose();\n                this.microphone.dispose();\n                this.screenShare.dispose();\n                this.speaker.dispose();\n                this.deviceSettingsAppliedOnce = false;\n                const stopOnLeavePromises = [];\n                if (this.camera.stopOnLeave) {\n                    stopOnLeavePromises.push(this.camera.disable(true));\n                }\n                if (this.microphone.stopOnLeave) {\n                    stopOnLeavePromises.push(this.microphone.disable(true));\n                }\n                if (this.screenShare.stopOnLeave) {\n                    stopOnLeavePromises.push(this.screenShare.disable(true));\n                }\n                await Promise.all(stopOnLeavePromises);\n            });\n        };\n        /**\n         * Update from the call response from the \"call.ring\" event\n         * @internal\n         */ this.updateFromRingingEvent = async (event)=>{\n            await this.setup();\n            // call.ring event excludes the call creator in the members list\n            // as the creator does not get the ring event\n            // so update the member list accordingly\n            const { created_by, settings } = event.call;\n            const creator = this.state.members.find((m)=>m.user.id === created_by.id);\n            if (!creator) {\n                this.state.setMembers(event.members);\n            } else {\n                this.state.setMembers([\n                    creator,\n                    ...event.members\n                ]);\n            }\n            // update the call state with the latest event data\n            this.state.updateFromCallResponse(event.call);\n            this.watching = true;\n            this.ringingSubject.next(true);\n            // we remove the instance from the calls list to enable the following filter in useCalls hook\n            // const calls = useCalls().filter((c) => c.ringing);\n            const calls = this.clientStore.calls.filter((c)=>c.cid !== this.cid);\n            this.clientStore.setCalls([\n                this,\n                ...calls\n            ]);\n            await this.applyDeviceConfig(settings, false);\n        };\n        /**\n         * Loads the information about the call.\n         *\n         * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n         * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n         * @param params.members_limit the total number of members to return as part of the response.\n         */ this.get = async (params)=>{\n            await this.setup();\n            const response = await this.streamClient.get(this.streamClientBasePath, params);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (params?.ring) {\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig(response.call.settings, false);\n            return response;\n        };\n        /**\n         * Loads the information about the call and creates it if it doesn't exist.\n         *\n         * @param data the data to create the call with.\n         */ this.getOrCreate = async (data)=>{\n            await this.setup();\n            const response = await this.streamClient.post(this.streamClientBasePath, data);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (data?.ring) {\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig(response.call.settings, false);\n            return response;\n        };\n        /**\n         * Creates a call\n         *\n         * @param data the data to create the call with.\n         */ this.create = async (data)=>{\n            return this.getOrCreate(data);\n        };\n        /**\n         * Deletes the call.\n         */ this.delete = async (data = {})=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/delete`, data);\n        };\n        /**\n         * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n         * Will send a `call.ring` event to the call members.\n         */ this.ring = async ()=>{\n            return await this.get({\n                ring: true\n            });\n        };\n        /**\n         * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n         * Will send a `call.notification` event to the call members.\n         */ this.notify = async ()=>{\n            return await this.get({\n                notify: true\n            });\n        };\n        /**\n         * Marks the incoming call as accepted.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.join} invokes this method automatically for you when joining a call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.accept = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n        };\n        /**\n         * Marks the incoming call as rejected.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         *\n         * @param reason the reason for rejecting the call.\n         */ this.reject = async (reason = 'decline')=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reject`, {\n                reason: reason\n            });\n        };\n        /**\n         * Will start to watch for call related WebSocket events and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.join = async ({ maxJoinRetries = 3, ...data } = {})=>{\n            await this.setup();\n            const callingState = this.state.callingState;\n            if ([\n                CallingState.JOINED,\n                CallingState.JOINING\n            ].includes(callingState)) {\n                throw new Error(`Illegal State: call.join() shall be called only once`);\n            }\n            this.state.setCallingState(CallingState.JOINING);\n            // we will count the number of join failures per SFU.\n            // once the number of failures reaches 2, we will piggyback on the `migrating_from`\n            // field to force the coordinator to provide us another SFU\n            const sfuJoinFailures = new Map();\n            const joinData = data;\n            maxJoinRetries = Math.max(maxJoinRetries, 1);\n            for(let attempt = 0; attempt < maxJoinRetries; attempt++){\n                try {\n                    this.logger('trace', `Joining call (${attempt})`, this.cid);\n                    await this.doJoin(data);\n                    delete joinData.migrating_from;\n                    break;\n                } catch (err) {\n                    this.logger('warn', `Failed to join call (${attempt})`, this.cid);\n                    if (err instanceof ErrorFromResponse && err.unrecoverable) {\n                        // if the error is unrecoverable, we should not retry as that signals\n                        // that connectivity is good, but the coordinator doesn't allow the user\n                        // to join the call due to some reason (e.g., ended call, expired token...)\n                        throw err;\n                    }\n                    const sfuId = this.credentials?.server.edge_name || '';\n                    const failures = (sfuJoinFailures.get(sfuId) || 0) + 1;\n                    sfuJoinFailures.set(sfuId, failures);\n                    if (failures >= 2) {\n                        joinData.migrating_from = sfuId;\n                    }\n                    if (attempt === maxJoinRetries - 1) {\n                        // restore the previous call state if the join-flow fails\n                        this.state.setCallingState(callingState);\n                        throw err;\n                    }\n                }\n                await sleep(retryInterval(attempt));\n            }\n        };\n        /**\n         * Will make a single attempt to watch for call related WebSocket events\n         * and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.doJoin = async (data)=>{\n            const connectStartTime = Date.now();\n            const callingState = this.state.callingState;\n            this.joinCallData = data;\n            this.logger('debug', 'Starting join flow');\n            this.state.setCallingState(CallingState.JOINING);\n            const performingMigration = this.reconnectStrategy === WebsocketReconnectStrategy.MIGRATE;\n            const performingRejoin = this.reconnectStrategy === WebsocketReconnectStrategy.REJOIN;\n            const performingFastReconnect = this.reconnectStrategy === WebsocketReconnectStrategy.FAST;\n            let statsOptions = this.sfuStatsReporter?.options;\n            if (!this.credentials || !statsOptions || performingRejoin || performingMigration) {\n                try {\n                    const joinResponse = await this.doJoinRequest(data);\n                    this.credentials = joinResponse.credentials;\n                    statsOptions = joinResponse.stats_options;\n                } catch (error) {\n                    // prevent triggering reconnect flow if the state is OFFLINE\n                    const avoidRestoreState = this.state.callingState === CallingState.OFFLINE;\n                    if (!avoidRestoreState) {\n                        // restore the previous call state if the join-flow fails\n                        this.state.setCallingState(callingState);\n                    }\n                    throw error;\n                }\n            }\n            const previousSfuClient = this.sfuClient;\n            const previousSessionId = previousSfuClient?.sessionId;\n            const isWsHealthy = !!previousSfuClient?.isHealthy;\n            const sfuClient = performingRejoin || performingMigration || !isWsHealthy ? new StreamSfuClient({\n                tag: String(this.sfuClientTag++),\n                cid: this.cid,\n                dispatcher: this.dispatcher,\n                credentials: this.credentials,\n                streamClient: this.streamClient,\n                enableTracing: statsOptions.enable_rtc_stats,\n                // a new session_id is necessary for the REJOIN strategy.\n                // we use the previous session_id if available\n                sessionId: performingRejoin ? undefined : previousSessionId,\n                onSignalClose: (reason)=>this.handleSfuSignalClose(sfuClient, reason)\n            }) : previousSfuClient;\n            this.sfuClient = sfuClient;\n            this.dynascaleManager.setSfuClient(sfuClient);\n            const clientDetails = await getClientDetails();\n            // we don't need to send JoinRequest if we are re-using an existing healthy SFU client\n            if (previousSfuClient !== sfuClient) {\n                // prepare a generic SDP and send it to the SFU.\n                // these are throw-away SDPs that the SFU will use to determine\n                // the capabilities of the client (codec support, etc.)\n                const [subscriberSdp, publisherSdp] = await Promise.all([\n                    getGenericSdp('recvonly'),\n                    getGenericSdp('sendonly')\n                ]);\n                const isReconnecting = this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n                const reconnectDetails = isReconnecting ? this.getReconnectDetails(data?.migrating_from, previousSessionId) : undefined;\n                const preferredPublishOptions = !isReconnecting ? this.getPreferredPublishOptions() : this.currentPublishOptions || [];\n                const preferredSubscribeOptions = !isReconnecting ? this.getPreferredSubscribeOptions() : [];\n                try {\n                    const { callState, fastReconnectDeadlineSeconds, publishOptions } = await sfuClient.join({\n                        subscriberSdp,\n                        publisherSdp,\n                        clientDetails,\n                        fastReconnect: performingFastReconnect,\n                        reconnectDetails,\n                        preferredPublishOptions,\n                        preferredSubscribeOptions,\n                        capabilities: Array.from(this.clientCapabilities)\n                    });\n                    this.currentPublishOptions = publishOptions;\n                    this.fastReconnectDeadlineSeconds = fastReconnectDeadlineSeconds;\n                    if (callState) {\n                        this.state.updateFromSfuCallState(callState, sfuClient.sessionId, reconnectDetails);\n                    }\n                } catch (error) {\n                    this.logger('warn', 'Join SFU request failed', error);\n                    sfuClient.close(StreamSfuClient.JOIN_FAILED, 'Join request failed, connection considered unhealthy');\n                    // restore the previous call state if the join-flow fails\n                    this.state.setCallingState(callingState);\n                    throw error;\n                }\n            }\n            if (!performingMigration) {\n                // in MIGRATION, `JOINED` state is set in `this.reconnectMigrate()`\n                this.state.setCallingState(CallingState.JOINED);\n            }\n            this.hasJoinedOnce = true;\n            // when performing fast reconnect, or when we reuse the same SFU client,\n            // (ws remained healthy), we just need to restore the ICE connection\n            if (performingFastReconnect) {\n                // the SFU automatically issues an ICE restart on the subscriber\n                // we don't have to do it ourselves\n                await this.restoreICE(sfuClient, {\n                    includeSubscriber: false\n                });\n            } else {\n                const connectionConfig = toRtcConfiguration(this.credentials.ice_servers);\n                this.initPublisherAndSubscriber({\n                    sfuClient,\n                    connectionConfig,\n                    clientDetails,\n                    statsOptions,\n                    publishOptions: this.currentPublishOptions || [],\n                    closePreviousInstances: !performingMigration\n                });\n            }\n            // make sure we only track connection timing if we are not calling this method as part of a reconnection flow\n            if (!performingRejoin && !performingFastReconnect && !performingMigration) {\n                this.sfuStatsReporter?.sendConnectionTime((Date.now() - connectStartTime) / 1000);\n            }\n            if (performingRejoin && isWsHealthy) {\n                const strategy = WebsocketReconnectStrategy[this.reconnectStrategy];\n                await previousSfuClient?.leaveAndClose(`Closing previous WS after reconnect with strategy: ${strategy}`);\n            } else if (!isWsHealthy) {\n                previousSfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, 'Closing unhealthy WS after reconnect');\n            }\n            // device settings should be applied only once, we don't have to\n            // re-apply them on later reconnections or server-side data fetches\n            if (!this.deviceSettingsAppliedOnce && this.state.settings) {\n                await this.applyDeviceConfig(this.state.settings, true);\n                this.deviceSettingsAppliedOnce = true;\n            }\n            // We shouldn't persist the `ring` and `notify` state after joining the call\n            // as it's a one-time event and clashes with the potential reconnection attempts.\n            // When reconnecting, if provided with `ring: true` or `notify: true`,\n            // we will spam the other participants with push notifications and `call.ring` events.\n            delete this.joinCallData?.ring;\n            delete this.joinCallData?.notify;\n            // reset the reconnect strategy to unspecified after a successful reconnection\n            this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n            this.reconnectReason = '';\n            this.logger('info', `Joined call ${this.cid}`);\n        };\n        /**\n         * Prepares Reconnect Details object.\n         * @internal\n         */ this.getReconnectDetails = (migratingFromSfuId, previousSessionId)=>{\n            const strategy = this.reconnectStrategy;\n            const performingRejoin = strategy === WebsocketReconnectStrategy.REJOIN;\n            const announcedTracks = this.publisher?.getAnnouncedTracksForReconnect() || [];\n            return {\n                strategy,\n                announcedTracks,\n                subscriptions: this.dynascaleManager.trackSubscriptions,\n                reconnectAttempt: this.reconnectAttempts,\n                fromSfuId: migratingFromSfuId || '',\n                previousSessionId: performingRejoin ? previousSessionId || '' : '',\n                reason: this.reconnectReason\n            };\n        };\n        /**\n         * Prepares the preferred codec for the call.\n         * This is an experimental client feature and subject to change.\n         * @internal\n         */ this.getPreferredPublishOptions = ()=>{\n            const { preferredCodec, fmtpLine, preferredBitrate, maxSimulcastLayers } = this.clientPublishOptions || {};\n            if (!preferredCodec && !preferredBitrate && !maxSimulcastLayers) return [];\n            const codec = preferredCodec ? Codec.create({\n                name: preferredCodec.split('/').pop(),\n                fmtp: fmtpLine\n            }) : undefined;\n            const preferredPublishOptions = [\n                PublishOption.create({\n                    trackType: TrackType.VIDEO,\n                    codec,\n                    bitrate: preferredBitrate,\n                    maxSpatialLayers: maxSimulcastLayers\n                })\n            ];\n            const screenShareSettings = this.screenShare.getSettings();\n            if (screenShareSettings) {\n                preferredPublishOptions.push(PublishOption.create({\n                    trackType: TrackType.SCREEN_SHARE,\n                    fps: screenShareSettings.maxFramerate,\n                    bitrate: screenShareSettings.maxBitrate\n                }));\n            }\n            return preferredPublishOptions;\n        };\n        /**\n         * Prepares the preferred options for subscribing to tracks.\n         * This is an experimental client feature and subject to change.\n         * @internal\n         */ this.getPreferredSubscribeOptions = ()=>{\n            const { subscriberCodec, subscriberFmtpLine } = this.clientPublishOptions || {};\n            if (!subscriberCodec || !subscriberFmtpLine) return [];\n            return [\n                SubscribeOption.create({\n                    trackType: TrackType.VIDEO,\n                    codecs: [\n                        {\n                            name: subscriberCodec.split('/').pop(),\n                            fmtp: subscriberFmtpLine\n                        }\n                    ]\n                })\n            ];\n        };\n        /**\n         * Performs an ICE restart on both the Publisher and Subscriber Peer Connections.\n         * Uses the provided SFU client to restore the ICE connection.\n         *\n         * This method can throw an error if the ICE restart fails.\n         * This error should be handled by the reconnect loop,\n         * and a new reconnection shall be attempted.\n         *\n         * @internal\n         */ this.restoreICE = async (nextSfuClient, opts = {})=>{\n            const { includeSubscriber = true, includePublisher = true } = opts;\n            if (this.subscriber) {\n                this.subscriber.setSfuClient(nextSfuClient);\n                if (includeSubscriber) {\n                    await this.subscriber.restartIce();\n                }\n            }\n            if (this.publisher) {\n                this.publisher.setSfuClient(nextSfuClient);\n                if (includePublisher && this.publisher.isPublishing()) {\n                    await this.publisher.restartIce();\n                }\n            }\n        };\n        /**\n         * Initializes the Publisher and Subscriber Peer Connections.\n         * @internal\n         */ this.initPublisherAndSubscriber = (opts)=>{\n            const { sfuClient, connectionConfig, clientDetails, statsOptions, publishOptions, closePreviousInstances } = opts;\n            const { enable_rtc_stats: enableTracing } = statsOptions;\n            if (closePreviousInstances && this.subscriber) {\n                this.subscriber.dispose();\n            }\n            this.subscriber = new Subscriber({\n                sfuClient,\n                dispatcher: this.dispatcher,\n                state: this.state,\n                connectionConfig,\n                tag: sfuClient.tag,\n                enableTracing,\n                onReconnectionNeeded: (kind, reason)=>{\n                    this.reconnect(kind, reason).catch((err)=>{\n                        const message = `[Reconnect] Error reconnecting after a subscriber error: ${reason}`;\n                        this.logger('warn', message, err);\n                    });\n                }\n            });\n            // anonymous users can't publish anything hence, there is no need\n            // to create Publisher Peer Connection for them\n            const isAnonymous = this.streamClient.user?.type === 'anonymous';\n            if (!isAnonymous) {\n                if (closePreviousInstances && this.publisher) {\n                    this.publisher.dispose();\n                }\n                this.publisher = new Publisher({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    publishOptions,\n                    tag: sfuClient.tag,\n                    enableTracing,\n                    onReconnectionNeeded: (kind, reason)=>{\n                        this.reconnect(kind, reason).catch((err)=>{\n                            const message = `[Reconnect] Error reconnecting after a publisher error: ${reason}`;\n                            this.logger('warn', message, err);\n                        });\n                    }\n                });\n            }\n            this.statsReporter?.stop();\n            if (this.statsReportingIntervalInMs > 0) {\n                this.statsReporter = createStatsReporter({\n                    subscriber: this.subscriber,\n                    publisher: this.publisher,\n                    state: this.state,\n                    datacenter: sfuClient.edgeName,\n                    pollingIntervalInMs: this.statsReportingIntervalInMs\n                });\n            }\n            this.tracer.setEnabled(enableTracing);\n            this.sfuStatsReporter?.stop();\n            if (statsOptions?.reporting_interval_ms > 0) {\n                this.unifiedSessionId ?? (this.unifiedSessionId = sfuClient.sessionId);\n                this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n                    clientDetails,\n                    options: statsOptions,\n                    subscriber: this.subscriber,\n                    publisher: this.publisher,\n                    microphone: this.microphone,\n                    camera: this.camera,\n                    state: this.state,\n                    tracer: this.tracer,\n                    unifiedSessionId: this.unifiedSessionId\n                });\n                this.sfuStatsReporter.start();\n            }\n        };\n        /**\n         * Retrieves credentials for joining the call.\n         *\n         * @internal\n         *\n         * @param data the join call data.\n         */ this.doJoinRequest = async (data)=>{\n            const location = await this.streamClient.getLocationHint();\n            const request = {\n                ...data,\n                location\n            };\n            const joinResponse = await this.streamClient.post(`${this.streamClientBasePath}/join`, request);\n            this.state.updateFromCallResponse(joinResponse.call);\n            this.state.setMembers(joinResponse.members);\n            this.state.setOwnCapabilities(joinResponse.own_capabilities);\n            if (data?.ring) {\n                this.ringingSubject.next(true);\n            }\n            const isReconnecting = this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n            if (!isReconnecting && this.ringing && !this.isCreatedByMe) {\n                // signals other users that I have accepted the incoming call.\n                await this.accept();\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            return joinResponse;\n        };\n        /**\n         * Handles the closing of the SFU signal connection.\n         *\n         * @internal\n         * @param sfuClient the SFU client instance that was closed.\n         * @param reason the reason for the closure.\n         */ this.handleSfuSignalClose = (sfuClient, reason)=>{\n            this.logger('debug', '[Reconnect] SFU signal connection closed');\n            const { callingState } = this.state;\n            if (// SFU WS closed before we finished current join,\n            // no need to schedule reconnecting\n            callingState === CallingState.JOINING || // we are already in the process of reconnecting,\n            // no need to schedule another one\n            callingState === CallingState.RECONNECTING || // SFU WS closed as a result of unsuccessful join,\n            // and no further retries need to be made\n            callingState === CallingState.IDLE || callingState === CallingState.LEFT) return;\n            // normal close, no need to reconnect\n            if (sfuClient.isLeaving || sfuClient.isClosingClean) return;\n            const strategy = this.publisher?.isHealthy() && this.subscriber?.isHealthy() ? WebsocketReconnectStrategy.FAST : WebsocketReconnectStrategy.REJOIN;\n            this.reconnect(strategy, reason).catch((err)=>{\n                this.logger('warn', '[Reconnect] Error reconnecting', err);\n            });\n        };\n        /**\n         * Handles the reconnection flow.\n         *\n         * @internal\n         *\n         * @param strategy the reconnection strategy to use.\n         * @param reason the reason for the reconnection.\n         */ this.reconnect = async (strategy, reason)=>{\n            if (this.state.callingState === CallingState.RECONNECTING || this.state.callingState === CallingState.MIGRATING || this.state.callingState === CallingState.RECONNECTING_FAILED) return;\n            return withoutConcurrency(this.reconnectConcurrencyTag, async ()=>{\n                const reconnectStartTime = Date.now();\n                this.reconnectStrategy = strategy;\n                this.reconnectReason = reason;\n                const markAsReconnectingFailed = async ()=>{\n                    try {\n                        // attempt to fetch the call data from the server, as the call\n                        // state might have changed while we were reconnecting or were offline\n                        await this.get();\n                    } finally{\n                        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                    }\n                };\n                let attempt = 0;\n                do {\n                    const reconnectingTime = Date.now() - reconnectStartTime;\n                    const shouldGiveUpReconnecting = this.disconnectionTimeoutSeconds > 0 && reconnectingTime / 1000 > this.disconnectionTimeoutSeconds;\n                    if (shouldGiveUpReconnecting) {\n                        this.logger('warn', '[Reconnect] Stopping reconnection attempts after reaching disconnection timeout');\n                        await markAsReconnectingFailed();\n                        return;\n                    }\n                    // we don't increment reconnect attempts for the FAST strategy.\n                    if (this.reconnectStrategy !== WebsocketReconnectStrategy.FAST) {\n                        this.reconnectAttempts++;\n                    }\n                    const currentStrategy = WebsocketReconnectStrategy[this.reconnectStrategy];\n                    try {\n                        // wait until the network is available\n                        await this.networkAvailableTask?.promise;\n                        this.logger('info', `[Reconnect] Reconnecting with strategy ${WebsocketReconnectStrategy[this.reconnectStrategy]}`);\n                        switch(this.reconnectStrategy){\n                            case WebsocketReconnectStrategy.UNSPECIFIED:\n                            case WebsocketReconnectStrategy.DISCONNECT:\n                                this.logger('debug', `[Reconnect] No-op strategy ${currentStrategy}`);\n                                break;\n                            case WebsocketReconnectStrategy.FAST:\n                                await this.reconnectFast();\n                                break;\n                            case WebsocketReconnectStrategy.REJOIN:\n                                await this.reconnectRejoin();\n                                break;\n                            case WebsocketReconnectStrategy.MIGRATE:\n                                await this.reconnectMigrate();\n                                break;\n                            default:\n                                ensureExhausted(this.reconnectStrategy, 'Unknown reconnection strategy');\n                                break;\n                        }\n                        break; // do-while loop, reconnection worked, exit the loop\n                    } catch (error) {\n                        if (this.state.callingState === CallingState.OFFLINE) {\n                            this.logger('debug', `[Reconnect] Can't reconnect while offline, stopping reconnection attempts`);\n                            break;\n                        // we don't need to handle the error if the call is offline\n                        // network change event will trigger the reconnection\n                        }\n                        if (error instanceof ErrorFromResponse && error.unrecoverable) {\n                            this.logger('warn', `[Reconnect] Can't reconnect due to coordinator unrecoverable error`, error);\n                            await markAsReconnectingFailed();\n                            return;\n                        }\n                        await sleep(500);\n                        const wasMigrating = this.reconnectStrategy === WebsocketReconnectStrategy.MIGRATE;\n                        const mustPerformRejoin = (Date.now() - reconnectStartTime) / 1000 > this.fastReconnectDeadlineSeconds;\n                        // don't immediately switch to the REJOIN strategy, but instead attempt\n                        // to reconnect with the FAST strategy for a few times before switching.\n                        // in some cases, we immediately switch to the REJOIN strategy.\n                        const shouldRejoin = mustPerformRejoin || // if we are past the fast reconnect deadline\n                        wasMigrating || // if we were migrating, but the migration failed\n                        attempt >= 3 || // after 3 failed attempts\n                        !(this.publisher?.isHealthy() ?? true) || // if the publisher is not healthy\n                        !(this.subscriber?.isHealthy() ?? true); // if the subscriber is not healthy\n                        attempt++;\n                        const nextStrategy = shouldRejoin ? WebsocketReconnectStrategy.REJOIN : WebsocketReconnectStrategy.FAST;\n                        this.reconnectStrategy = nextStrategy;\n                        this.logger('info', `[Reconnect] ${currentStrategy} (${this.reconnectAttempts}) failed. Attempting with ${WebsocketReconnectStrategy[nextStrategy]}`, error);\n                    }\n                }while (this.state.callingState !== CallingState.JOINED && this.state.callingState !== CallingState.RECONNECTING_FAILED && this.state.callingState !== CallingState.LEFT);\n                this.logger('info', '[Reconnect] Reconnection flow finished');\n            });\n        };\n        /**\n         * Initiates the reconnection flow with the \"fast\" strategy.\n         * @internal\n         */ this.reconnectFast = async ()=>{\n            const reconnectStartTime = Date.now();\n            this.reconnectStrategy = WebsocketReconnectStrategy.FAST;\n            this.state.setCallingState(CallingState.RECONNECTING);\n            await this.doJoin(this.joinCallData);\n            await this.get(); // fetch the latest call state, as it might have changed\n            this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.FAST, (Date.now() - reconnectStartTime) / 1000);\n        };\n        /**\n         * Initiates the reconnection flow with the \"rejoin\" strategy.\n         * @internal\n         */ this.reconnectRejoin = async ()=>{\n            const reconnectStartTime = Date.now();\n            this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n            this.state.setCallingState(CallingState.RECONNECTING);\n            await this.doJoin(this.joinCallData);\n            await this.restorePublishedTracks();\n            this.restoreSubscribedTracks();\n            this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.REJOIN, (Date.now() - reconnectStartTime) / 1000);\n        };\n        /**\n         * Initiates the reconnection flow with the \"migrate\" strategy.\n         * @internal\n         */ this.reconnectMigrate = async ()=>{\n            const reconnectStartTime = Date.now();\n            const currentSfuClient = this.sfuClient;\n            if (!currentSfuClient) {\n                throw new Error('Cannot migrate without an active SFU client');\n            }\n            this.reconnectStrategy = WebsocketReconnectStrategy.MIGRATE;\n            this.state.setCallingState(CallingState.MIGRATING);\n            const currentSubscriber = this.subscriber;\n            const currentPublisher = this.publisher;\n            currentSubscriber?.detachEventHandlers();\n            currentPublisher?.detachEventHandlers();\n            const migrationTask = makeSafePromise(currentSfuClient.enterMigration());\n            try {\n                const currentSfu = currentSfuClient.edgeName;\n                await this.doJoin({\n                    ...this.joinCallData,\n                    migrating_from: currentSfu\n                });\n            } finally{\n                // cleanup the migration_from field after the migration is complete or failed\n                // as we don't want to keep dirty data in the join call data\n                delete this.joinCallData?.migrating_from;\n            }\n            await this.restorePublishedTracks();\n            this.restoreSubscribedTracks();\n            try {\n                // Wait for the migration to complete, then close the previous SFU client\n                // and the peer connection instances. In case of failure, the migration\n                // task would throw an error and REJOIN would be attempted.\n                await migrationTask();\n                // in MIGRATE, we can consider the call as joined only after\n                // `participantMigrationComplete` event is received, signaled by\n                // the `migrationTask`\n                this.state.setCallingState(CallingState.JOINED);\n            } finally{\n                currentSubscriber?.dispose();\n                currentPublisher?.dispose();\n                // and close the previous SFU client, without specifying close code\n                currentSfuClient.close(StreamSfuClient.NORMAL_CLOSURE, 'Migrating away');\n            }\n            this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.MIGRATE, (Date.now() - reconnectStartTime) / 1000);\n        };\n        /**\n         * Registers the various event handlers for reconnection.\n         *\n         * @internal\n         */ this.registerReconnectHandlers = ()=>{\n            // handles the legacy \"goAway\" event\n            const unregisterGoAway = this.on('goAway', ()=>{\n                this.reconnect(WebsocketReconnectStrategy.MIGRATE, 'goAway').catch((err)=>this.logger('warn', '[Reconnect] Error reconnecting', err));\n            });\n            // handles the \"error\" event, through which the SFU can request a reconnect\n            const unregisterOnError = this.on('error', (e)=>{\n                const { reconnectStrategy: strategy, error } = e;\n                if (strategy === WebsocketReconnectStrategy.UNSPECIFIED) return;\n                if (strategy === WebsocketReconnectStrategy.DISCONNECT) {\n                    this.leave({\n                        message: 'SFU instructed to disconnect'\n                    }).catch((err)=>{\n                        this.logger('warn', `Can't leave call after disconnect request`, err);\n                    });\n                } else {\n                    this.reconnect(strategy, error?.message || 'SFU Error').catch((err)=>{\n                        this.logger('warn', '[Reconnect] Error reconnecting', err);\n                    });\n                }\n            });\n            const unregisterNetworkChanged = this.streamClient.on('network.changed', (e)=>{\n                this.tracer.trace('network.changed', e);\n                if (!e.online) {\n                    this.logger('debug', '[Reconnect] Going offline');\n                    if (!this.hasJoinedOnce) return;\n                    this.lastOfflineTimestamp = Date.now();\n                    // create a new task that would resolve when the network is available\n                    const networkAvailableTask = promiseWithResolvers();\n                    networkAvailableTask.promise.then(()=>{\n                        let strategy = WebsocketReconnectStrategy.FAST;\n                        if (this.lastOfflineTimestamp) {\n                            const offline = (Date.now() - this.lastOfflineTimestamp) / 1000;\n                            if (offline > this.fastReconnectDeadlineSeconds) {\n                                // We shouldn't attempt FAST if we have exceeded the deadline.\n                                // The SFU would have already wiped out the session.\n                                strategy = WebsocketReconnectStrategy.REJOIN;\n                            }\n                        }\n                        this.reconnect(strategy, 'Going online').catch((err)=>{\n                            this.logger('warn', '[Reconnect] Error reconnecting after going online', err);\n                        });\n                    });\n                    this.networkAvailableTask = networkAvailableTask;\n                    this.sfuStatsReporter?.stop();\n                    this.state.setCallingState(CallingState.OFFLINE);\n                } else {\n                    this.logger('debug', '[Reconnect] Going online');\n                    this.sfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, 'Closing WS to reconnect after going online');\n                    // we went online, release the previous waiters and reset the state\n                    this.networkAvailableTask?.resolve();\n                    this.networkAvailableTask = undefined;\n                    this.sfuStatsReporter?.start();\n                }\n            });\n            this.leaveCallHooks.add(unregisterGoAway).add(unregisterOnError).add(unregisterNetworkChanged);\n        };\n        /**\n         * Restores the published tracks after a reconnection.\n         * @internal\n         */ this.restorePublishedTracks = async ()=>{\n            // the tracks need to be restored in their original order of publishing\n            // otherwise, we might get `m-lines order mismatch` errors\n            for (const trackType of this.trackPublishOrder){\n                let mediaStream;\n                switch(trackType){\n                    case TrackType.AUDIO:\n                        mediaStream = this.microphone.state.mediaStream;\n                        break;\n                    case TrackType.VIDEO:\n                        mediaStream = this.camera.state.mediaStream;\n                        break;\n                    case TrackType.SCREEN_SHARE:\n                        mediaStream = this.screenShare.state.mediaStream;\n                        break;\n                    // screen share audio can't exist without a screen share, so we handle it there\n                    case TrackType.SCREEN_SHARE_AUDIO:\n                    case TrackType.UNSPECIFIED:\n                        break;\n                    default:\n                        ensureExhausted(trackType, 'Unknown track type');\n                        break;\n                }\n                if (mediaStream) await this.publish(mediaStream, trackType);\n            }\n        };\n        /**\n         * Restores the subscribed tracks after a reconnection.\n         * @internal\n         */ this.restoreSubscribedTracks = ()=>{\n            const { remoteParticipants } = this.state;\n            if (remoteParticipants.length <= 0) return;\n            this.dynascaleManager.applyTrackSubscriptions(undefined);\n        };\n        /**\n         * Starts publishing the given video stream to the call.\n         * @deprecated use `call.publish()`.\n         */ this.publishVideoStream = async (videoStream)=>{\n            await this.publish(videoStream, TrackType.VIDEO);\n        };\n        /**\n         * Starts publishing the given audio stream to the call.\n         * @deprecated use `call.publish()`\n         */ this.publishAudioStream = async (audioStream)=>{\n            await this.publish(audioStream, TrackType.AUDIO);\n        };\n        /**\n         * Starts publishing the given screen-share stream to the call.\n         * @deprecated use `call.publish()`\n         */ this.publishScreenShareStream = async (screenShareStream)=>{\n            await this.publish(screenShareStream, TrackType.SCREEN_SHARE);\n        };\n        /**\n         * Publishes the given media stream.\n         *\n         * @param mediaStream the media stream to publish.\n         * @param trackType the type of the track to announce.\n         */ this.publish = async (mediaStream, trackType)=>{\n            if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n            // joining is in progress, and we should wait until the client is ready\n            await this.sfuClient.joinTask;\n            if (!this.permissionsContext.canPublish(trackType)) {\n                throw new Error(`No permission to publish ${TrackType[trackType]}`);\n            }\n            if (!this.publisher) throw new Error('Publisher is not initialized');\n            const [track] = isAudioTrackType(trackType) ? mediaStream.getAudioTracks() : mediaStream.getVideoTracks();\n            if (!track) {\n                throw new Error(`There is no ${TrackType[trackType]} track in the stream`);\n            }\n            if (track.readyState === 'ended') {\n                throw new Error(`Can't publish ended tracks.`);\n            }\n            pushToIfMissing(this.trackPublishOrder, trackType);\n            await this.publisher.publish(track, trackType);\n            const trackTypes = [\n                trackType\n            ];\n            if (trackType === TrackType.SCREEN_SHARE) {\n                const [audioTrack] = mediaStream.getAudioTracks();\n                if (audioTrack) {\n                    pushToIfMissing(this.trackPublishOrder, TrackType.SCREEN_SHARE_AUDIO);\n                    await this.publisher.publish(audioTrack, TrackType.SCREEN_SHARE_AUDIO);\n                    trackTypes.push(TrackType.SCREEN_SHARE_AUDIO);\n                }\n            }\n            if (track.kind === 'video') {\n                // schedules calibration report - the SFU will use the performance stats\n                // to adjust the quality thresholds as early as possible\n                this.sfuStatsReporter?.scheduleOne(3000);\n            }\n            await this.updateLocalStreamState(mediaStream, ...trackTypes);\n        };\n        /**\n         * Stops publishing the given track type to the call, if it is currently being published.\n         *\n         * @param trackTypes the track types to stop publishing.\n         */ this.stopPublish = async (...trackTypes)=>{\n            if (!this.sfuClient || !this.publisher) return;\n            this.publisher.stopTracks(...trackTypes);\n            await this.updateLocalStreamState(undefined, ...trackTypes);\n        };\n        /**\n         * Updates the call state with the new stream.\n         *\n         * @param mediaStream the new stream to update the call state with.\n         * If undefined, the stream will be removed from the call state.\n         * @param trackTypes the track types to update the call state with.\n         */ this.updateLocalStreamState = async (mediaStream, ...trackTypes)=>{\n            if (!this.sfuClient || !this.sfuClient.sessionId) return;\n            await this.notifyTrackMuteState(!mediaStream, ...trackTypes);\n            const { sessionId } = this.sfuClient;\n            for (const trackType of trackTypes){\n                const streamStateProp = trackTypeToParticipantStreamKey(trackType);\n                if (!streamStateProp) continue;\n                this.state.updateParticipant(sessionId, (p)=>({\n                        publishedTracks: mediaStream ? pushToIfMissing([\n                            ...p.publishedTracks\n                        ], trackType) : p.publishedTracks.filter((t)=>t !== trackType),\n                        [streamStateProp]: mediaStream\n                    }));\n            }\n        };\n        /**\n         * Updates the preferred publishing options\n         *\n         * @internal\n         * @param options the options to use.\n         */ this.updatePublishOptions = (options)=>{\n            this.logger('warn', '[call.updatePublishOptions]: You are manually overriding the publish options for this call. ' + 'This is not recommended, and it can cause call stability/compatibility issues. Use with caution.');\n            if (this.state.callingState === CallingState.JOINED) {\n                this.logger('warn', 'Updating publish options after joining the call does not have an effect');\n            }\n            this.clientPublishOptions = {\n                ...this.clientPublishOptions,\n                ...options\n            };\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has started.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStarting = async ()=>{\n            return this.sfuClient?.startNoiseCancellation().catch((err)=>{\n                this.logger('warn', 'Failed to notify start of noise cancellation', err);\n            });\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has stopped.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStopped = async ()=>{\n            return this.sfuClient?.stopNoiseCancellation().catch((err)=>{\n                this.logger('warn', 'Failed to notify stop of noise cancellation', err);\n            });\n        };\n        /**\n         * Notifies the SFU about the mute state of the given track types.\n         * @internal\n         */ this.notifyTrackMuteState = async (muted, ...trackTypes)=>{\n            const key = `muteState.${this.cid}.${trackTypes.join('-')}`;\n            await withoutConcurrency(key, async ()=>{\n                if (!this.sfuClient) return;\n                await this.sfuClient.updateMuteStates(trackTypes.map((trackType)=>({\n                        trackType,\n                        muted\n                    })));\n            });\n        };\n        /**\n         * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n         * This is usually helpful when detailed stats for a specific participant are needed.\n         *\n         * @param sessionId the sessionId to start reporting for.\n         */ this.startReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.startReportingStatsFor(sessionId);\n        };\n        /**\n         * Opposite of `startReportingStatsFor`.\n         * Will turn off stats reporting for a specific participant.\n         *\n         * @param sessionId the sessionId to stop reporting for.\n         */ this.stopReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.stopReportingStatsFor(sessionId);\n        };\n        /**\n         * Sets the frequency of the call stats reporting.\n         *\n         * @param intervalInMs the interval in milliseconds to report the stats.\n         */ this.setStatsReportingIntervalInMs = (intervalInMs)=>{\n            this.statsReportingIntervalInMs = intervalInMs;\n        };\n        /**\n         * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n         *\n         * @param sessionId the session id.\n         */ this.resetReaction = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                reaction: undefined\n            });\n        };\n        /**\n         * Sets the list of criteria to sort the participants by.\n         *\n         * @param criteria the list of criteria to sort the participants by.\n         */ this.setSortParticipantsBy = (criteria)=>{\n            return this.state.setSortParticipantsBy(criteria);\n        };\n        /**\n         * Sends a reaction to the other call participants.\n         *\n         * @param reaction the reaction to send.\n         */ this.sendReaction = async (reaction)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n        };\n        /**\n         * Blocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to block.\n         */ this.blockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Unblocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to unblock.\n         */ this.unblockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Kicks the user with the given `userId`.\n         * @param data the kick request.\n         */ this.kickUser = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/kick`, data);\n        };\n        /**\n         * Mutes the current user.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteSelf = (type)=>{\n            const myUserId = this.currentUserId;\n            if (myUserId) {\n                return this.muteUser(myUserId, type);\n            }\n        };\n        /**\n         * Mutes all the other participants.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteOthers = (type)=>{\n            const trackType = muteTypeToTrackType(type);\n            if (!trackType) return;\n            const userIdsToMute = [];\n            for (const participant of this.state.remoteParticipants){\n                if (participant.publishedTracks.includes(trackType)) {\n                    userIdsToMute.push(participant.userId);\n                }\n            }\n            if (userIdsToMute.length > 0) {\n                return this.muteUser(userIdsToMute, type);\n            }\n        };\n        /**\n         * Mutes the user with the given `userId`.\n         *\n         * @param userId the id of the user to mute.\n         * @param type the type of the mute operation.\n         */ this.muteUser = (userId, type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                user_ids: Array.isArray(userId) ? userId : [\n                    userId\n                ],\n                [type]: true\n            });\n        };\n        /**\n         * Will mute all users in the call.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteAllUsers = (type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                mute_all_users: true,\n                [type]: true\n            });\n        };\n        /**\n         * Starts recording the call\n         */ this.startRecording = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n        };\n        /**\n         * Stops recording the call\n         */ this.stopRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n        };\n        /**\n         * Starts the transcription of the call.\n         *\n         * @param request the request data.\n         */ this.startTranscription = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_transcription`, request);\n        };\n        /**\n         * Stops the transcription of the call.\n         */ this.stopTranscription = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_transcription`);\n        };\n        /**\n         * Starts the closed captions of the call.\n         */ this.startClosedCaptions = async (options)=>{\n            const trx = this.state.setCaptioning(true); // optimistic update\n            try {\n                return await this.streamClient.post(`${this.streamClientBasePath}/start_closed_captions`, options);\n            } catch (err) {\n                trx.rollback(); // revert the optimistic update\n                throw err;\n            }\n        };\n        /**\n         * Stops the closed captions of the call.\n         */ this.stopClosedCaptions = async (options)=>{\n            const trx = this.state.setCaptioning(false); // optimistic update\n            try {\n                return await this.streamClient.post(`${this.streamClientBasePath}/stop_closed_captions`, options);\n            } catch (err) {\n                trx.rollback(); // revert the optimistic update\n                throw err;\n            }\n        };\n        /**\n         * Updates the closed caption settings.\n         *\n         * @param config the closed caption settings to apply\n         */ this.updateClosedCaptionSettings = (config)=>{\n            this.state.updateClosedCaptionSettings(config);\n        };\n        /**\n         * Sends a `call.permission_request` event to all users connected to the call.\n         * The call settings object contains information about which permissions can be requested during a call\n         * (for example, a user might be allowed to request permission to publish audio, but not video).\n         */ this.requestPermissions = async (data)=>{\n            const { permissions } = data;\n            const canRequestPermissions = permissions.every((permission)=>this.permissionsContext.canRequest(permission));\n            if (!canRequestPermissions) {\n                throw new Error(`You are not allowed to request permissions: ${permissions.join(', ')}`);\n            }\n            return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n        };\n        /**\n         * Allows you to grant certain permissions to a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be granted are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to grant permissions to.\n         * @param permissions the permissions to grant.\n         */ this.grantPermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                grant_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to revoke certain permissions from a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be revoked are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to revoke permissions from.\n         * @param permissions the permissions to revoke.\n         */ this.revokePermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                revoke_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n         *\n         * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n         *\n         * `call.permissions_updated` event is sent to all members of the call.\n         *\n         */ this.updateUserPermissions = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n        };\n        /**\n         * Starts the livestreaming of the call.\n         *\n         * @param data the request data.\n         * @param params the request params.\n         */ this.goLive = async (data = {}, params)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n        };\n        /**\n         * Stops the livestreaming of the call.\n         */ this.stopLive = async (data = {})=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, data);\n        };\n        /**\n         * Starts the broadcasting of the call.\n         */ this.startHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n        };\n        /**\n         * Stops the broadcasting of the call.\n         */ this.stopHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n        };\n        /**\n         * Starts the RTMP-out broadcasting of the call.\n         */ this.startRTMPBroadcasts = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/rtmp_broadcasts`, data);\n        };\n        /**\n         * Stops all RTMP-out broadcasting of the call.\n         */ this.stopAllRTMPBroadcasts = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/rtmp_broadcasts/stop`);\n        };\n        /**\n         * Stops the RTMP-out broadcasting of the call specified by it's name.\n         */ this.stopRTMPBroadcast = async (name)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/rtmp_broadcasts/${name}/stop`);\n        };\n        /**\n         * Starts frame by frame recording.\n         * Sends call.frame_recording_started events\n         */ this.startFrameRecording = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_frame_recording`, data);\n        };\n        /**\n         * Stops frame recording.\n         */ this.stopFrameRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_frame_recording`);\n        };\n        /**\n         * Updates the call settings or custom data.\n         *\n         * @param updates the updates to apply to the call.\n         */ this.update = async (updates)=>{\n            const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n            const { call, members, own_capabilities } = response;\n            this.state.updateFromCallResponse(call);\n            this.state.setMembers(members);\n            this.state.setOwnCapabilities(own_capabilities);\n            return response;\n        };\n        /**\n         * Ends the call. Once the call is ended, it cannot be re-joined.\n         */ this.endCall = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n        };\n        /**\n         * Pins the given session to the top of the participants list.\n         *\n         * @param sessionId the sessionId to pin.\n         */ this.pin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: {\n                    isLocalPin: true,\n                    pinnedAt: Date.now()\n                }\n            });\n        };\n        /**\n         * Unpins the given session from the top of the participants list.\n         *\n         * @param sessionId the sessionId to unpin.\n         */ this.unpin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: undefined\n            });\n        };\n        /**\n         * Pins the given session to the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.pinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n        };\n        /**\n         * Unpins the given session from the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.unpinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n        };\n        /**\n         * Query call members with filter query. The result won't be stored in call state.\n         * @param request\n         * @returns\n         */ this.queryMembers = (request)=>{\n            return this.streamClient.post('/call/members', {\n                ...request || {},\n                id: this.id,\n                type: this.type\n            });\n        };\n        /**\n         * Will update the call members.\n         *\n         * @param data the request data.\n         */ this.updateCallMembers = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n        };\n        /**\n         * Schedules an auto-drop timeout based on the call settings.\n         * Applicable only for ringing calls.\n         */ this.scheduleAutoDrop = ()=>{\n            this.cancelAutoDrop();\n            const settings = this.state.settings;\n            if (!settings) return;\n            // ignore if the call is not ringing\n            if (this.state.callingState !== CallingState.RINGING) return;\n            const timeoutInMs = this.isCreatedByMe ? settings.ring.auto_cancel_timeout_ms : settings.ring.incoming_call_timeout_ms;\n            // 0 means no auto-drop\n            if (timeoutInMs <= 0) return;\n            this.dropTimeout = setTimeout(()=>{\n                // the call might have stopped ringing by this point,\n                // e.g. it was already accepted and joined\n                if (this.state.callingState !== CallingState.RINGING) return;\n                this.leave({\n                    reject: true,\n                    reason: 'timeout',\n                    message: `ringing timeout - ${this.isCreatedByMe ? 'no one accepted' : `user didn't interact with incoming call screen`}`\n                }).catch((err)=>{\n                    this.logger('error', 'Failed to drop call', err);\n                });\n            }, timeoutInMs);\n        };\n        /**\n         * Cancels a scheduled auto-drop timeout.\n         */ this.cancelAutoDrop = ()=>{\n            clearTimeout(this.dropTimeout);\n            this.dropTimeout = undefined;\n        };\n        /**\n         * Retrieves the list of recordings for the current call or call session.\n         *\n         * If `callSessionId` is provided, it will return the recordings for that call session.\n         * Otherwise, all recordings for the current call will be returned.\n         *\n         * @param callSessionId the call session id to retrieve recordings for.\n         */ this.queryRecordings = async (callSessionId)=>{\n            let endpoint = this.streamClientBasePath;\n            if (callSessionId) {\n                endpoint = `${endpoint}/${callSessionId}`;\n            }\n            return this.streamClient.get(`${endpoint}/recordings`);\n        };\n        /**\n         * Retrieves the list of transcriptions for the current call.\n         *\n         * @returns the list of transcriptions.\n         */ this.queryTranscriptions = async ()=>{\n            return this.streamClient.get(`${this.streamClientBasePath}/transcriptions`);\n        };\n        /**\n         * Retrieve call statistics for a particular call session (historical).\n         * Here `callSessionID` is mandatory.\n         *\n         * @param callSessionID the call session ID to retrieve statistics for.\n         * @returns The call stats.\n         * @deprecated use `call.getCallReport` instead.\n         * @internal\n         */ this.getCallStats = async (callSessionID)=>{\n            const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n            return this.streamClient.get(endpoint);\n        };\n        /**\n         * Retrieve call report. If the `callSessionID` is not specified, then the\n         * report for the latest call session is retrieved. If it is specified, then\n         * the report for that particular session is retrieved if it exists.\n         *\n         * @param callSessionID the optional call session ID to retrieve statistics for\n         * @returns the call report\n         */ this.getCallReport = async (callSessionID = '')=>{\n            const endpoint = `${this.streamClientBasePath}/report`;\n            const params = callSessionID !== '' ? {\n                session_id: callSessionID\n            } : {};\n            return this.streamClient.get(endpoint, params);\n        };\n        /**\n         * Submit user feedback for the call\n         *\n         * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n         * @param reason The reason/description for the rating\n         * @param custom Custom data\n         */ this.submitFeedback = async (rating, { reason, custom } = {})=>{\n            const { sdkName, sdkVersion, ...platform } = getSdkSignature(await getClientDetails());\n            return this.streamClient.post(`${this.streamClientBasePath}/feedback`, {\n                rating,\n                reason,\n                user_session_id: this.sfuClient?.sessionId,\n                sdk: sdkName,\n                sdk_version: sdkVersion,\n                custom: {\n                    ...custom,\n                    'x-stream-platform-data': platform\n                }\n            });\n        };\n        /**\n         * Sends a custom event to all call participants.\n         *\n         * @param payload the payload to send.\n         */ this.sendCustomEvent = async (payload)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n                custom: payload\n            });\n        };\n        /**\n         * Applies the device configuration from the backend.\n         *\n         * @internal\n         */ this.applyDeviceConfig = async (settings, publish)=>{\n            await this.camera.apply(settings.video, publish).catch((err)=>{\n                this.logger('warn', 'Camera init failed', err);\n            });\n            await this.microphone.apply(settings.audio, publish).catch((err)=>{\n                this.logger('warn', 'Mic init failed', err);\n            });\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the video mode.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.dynascaleManager.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType = 'audioTrack')=>{\n            const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n         *\n         * @param imageElement the image element to bind to.\n         * @param opts options for the binding.\n         */ this.bindCallThumbnailElement = (imageElement, opts = {})=>{\n            const handleError = ()=>{\n                imageElement.src = opts.fallbackImageSource || 'https://getstream.io/random_svg/?name=x&id=x';\n            };\n            const unsubscribe = createSubscription(this.state.thumbnails$, (thumbnails)=>{\n                if (!thumbnails) return;\n                imageElement.addEventListener('error', handleError);\n                const thumbnailUrl = new URL(thumbnails.image_url);\n                thumbnailUrl.searchParams.set('w', String(imageElement.clientWidth));\n                thumbnailUrl.searchParams.set('h', String(imageElement.clientHeight));\n                imageElement.src = thumbnailUrl.toString();\n            });\n            return ()=>{\n                unsubscribe();\n                imageElement.removeEventListener('error', handleError);\n            };\n        };\n        /**\n         * Specify preference for incoming video resolution. The preference will\n         * be matched as close as possible, but actual resolution will depend\n         * on the video source quality and client network conditions. Will enable\n         * incoming video, if previously disabled.\n         *\n         * @param resolution preferred resolution, or `undefined` to clear preference\n         * @param sessionIds optionally specify session ids of the participants this\n         * preference has effect on. Affects all participants by default.\n         */ this.setPreferredIncomingVideoResolution = (resolution, sessionIds)=>{\n            this.dynascaleManager.setVideoTrackSubscriptionOverrides(resolution ? {\n                enabled: true,\n                dimension: resolution\n            } : undefined, sessionIds);\n            this.dynascaleManager.applyTrackSubscriptions();\n        };\n        /**\n         * Enables or disables incoming video from all remote call participants,\n         * and removes any preference for preferred resolution.\n         */ this.setIncomingVideoEnabled = (enabled)=>{\n            this.dynascaleManager.setVideoTrackSubscriptionOverrides(enabled ? undefined : {\n                enabled: false\n            });\n            this.dynascaleManager.applyTrackSubscriptions();\n        };\n        /**\n         * Sets the maximum amount of time a user can remain waiting for a reconnect\n         * after a network disruption\n         * @param timeoutSeconds Timeout in seconds, or 0 to keep reconnecting indefinetely\n         */ this.setDisconnectionTimeout = (timeoutSeconds)=>{\n            this.disconnectionTimeoutSeconds = timeoutSeconds;\n        };\n        /**\n         * Enables the provided client capabilities.\n         */ this.enableClientCapabilities = (...capabilities)=>{\n            for (const capability of capabilities){\n                this.clientCapabilities.add(capability);\n            }\n        };\n        /**\n         * Disables the provided client capabilities.\n         */ this.disableClientCapabilities = (...capabilities)=>{\n            for (const capability of capabilities){\n                this.clientCapabilities.delete(capability);\n            }\n        };\n        this.type = type;\n        this.id = id;\n        this.cid = `${type}:${id}`;\n        this.ringingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_tap_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(ringing);\n        this.watching = watching;\n        this.streamClient = streamClient;\n        this.clientStore = clientStore;\n        this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n        this.logger = getLogger([\n            'Call'\n        ]);\n        const callTypeConfig = CallTypes.get(type);\n        const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n        if (participantSorter) {\n            this.state.setSortParticipantsBy(participantSorter);\n        }\n        this.state.setMembers(members || []);\n        this.state.setOwnCapabilities(ownCapabilities || []);\n        this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n        this.camera = new CameraManager(this);\n        this.microphone = new MicrophoneManager(this);\n        this.speaker = new SpeakerManager(this);\n        this.screenShare = new ScreenShareManager(this);\n        this.dynascaleManager = new DynascaleManager(this.state, this.speaker);\n    }\n    /**\n     * A flag indicating whether the call is \"ringing\" type of call.\n     */ get ringing() {\n        return getCurrentValue(this.ringingSubject);\n    }\n    /**\n     * Retrieves the current user ID.\n     */ get currentUserId() {\n        return this.clientStore.connectedUser?.id;\n    }\n    /**\n     * A flag indicating whether the call was created by the current user.\n     */ get isCreatedByMe() {\n        return this.state.createdBy?.id === this.currentUserId;\n    }\n}\nconst APIErrorCodes = {\n    [-1]: 'InternalSystemError',\n    2: 'AccessKeyError',\n    3: 'AuthenticationFailedError',\n    4: 'InputError',\n    5: 'AuthenticationError',\n    6: 'DuplicateUsernameError',\n    9: 'RateLimitError',\n    16: 'DoesNotExistError',\n    17: 'NotAllowedError',\n    18: 'EventNotSupportedError',\n    19: 'ChannelFeatureNotSupportedError',\n    20: 'MessageTooLongError',\n    21: 'MultipleNestingLevelError',\n    22: 'PayloadTooBigError',\n    23: 'RequestTimeoutError',\n    24: 'MaxHeaderSizeExceededError',\n    40: 'AuthErrorTokenExpired',\n    41: 'AuthErrorTokenNotValidYet',\n    42: 'AuthErrorTokenUsedBeforeIssuedAt',\n    43: 'AuthErrorTokenSignatureInvalid',\n    44: 'CustomCommandEndpointMissingError',\n    45: 'CustomCommandEndpointCallError',\n    46: 'ConnectionIDNotFoundError',\n    60: 'CoolDownError',\n    69: 'ErrWrongRegion',\n    70: 'ErrQueryChannelPermissions',\n    71: 'ErrTooManyConnections',\n    73: 'MessageModerationFailedError',\n    99: 'AppSuspendedError'\n};\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ class StableWSConnection {\n    constructor(client){\n        this._log = (msg, extra = {}, level = 'info')=>{\n            this.client.logger(level, `connection:${msg}`, extra);\n        };\n        this.setClient = (client)=>{\n            this.client = client;\n        };\n        /**\n         * Builds and returns the url for websocket.\n         * @private\n         * @returns url string\n         */ this._buildUrl = ()=>{\n            const params = new URLSearchParams();\n            params.set('api_key', this.client.key);\n            params.set('stream-auth-type', this.client.getAuthType());\n            params.set('X-Stream-Client', this.client.getUserAgent());\n            return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n        };\n        /**\n         * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n         *\n         * @param {Event} event Event with type online or offline\n         *\n         */ this.onlineStatusChanged = (event)=>{\n            if (event.type === 'offline') {\n                // mark the connection as down\n                this._log('onlineStatusChanged() - Status changing to offline');\n                // we know that the app is offline so dispatch the unhealthy connection event immediately\n                this._setHealth(false, true);\n            } else if (event.type === 'online') {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n                if (!this.isHealthy) {\n                    this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        };\n        this.onopen = (wsID)=>{\n            if (this.wsID !== wsID) return;\n            const user = this.client.user;\n            if (!user) {\n                this.client.logger('error', `User not set, can't connect to WS`);\n                return;\n            }\n            const token = this.client._getToken();\n            if (!token) {\n                this.client.logger('error', `Token not set, can't connect authenticate`);\n                return;\n            }\n            const authMessage = JSON.stringify({\n                token,\n                user_details: {\n                    id: user.id,\n                    name: user.name,\n                    image: user.image,\n                    custom: user.custom\n                }\n            });\n            this._log(`onopen() - Sending auth message ${authMessage}`, {}, 'trace');\n            this.ws?.send(authMessage);\n            this._log('onopen() - onopen callback', {\n                wsID\n            });\n        };\n        this.onmessage = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n            // we wait till the first message before we consider the connection open.\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose.\n            if (!this.isConnectionOpenResolved && data && data.type === 'connection.error') {\n                this.isConnectionOpenResolved = true;\n                if (data.error) {\n                    this.rejectConnectionOpen?.(this._errorFromWSEvent(data, false));\n                    return;\n                }\n            }\n            // trigger the event..\n            this.lastEvent = new Date();\n            if (data && (data.type === 'health.check' || data.type === 'connection.ok')) {\n                // the initial health-check should come from the client\n                this.scheduleNextPing();\n            }\n            if (data && data.type === 'connection.ok') {\n                this.resolveConnectionOpen?.(data);\n                this._setHealth(true);\n            }\n            if (data && data.type === 'connection.error' && data.error) {\n                const { code } = data.error;\n                this.isHealthy = false;\n                this.isConnecting = false;\n                this.consecutiveFailures += 1;\n                if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                    clearTimeout(this.connectionCheckTimeoutRef);\n                    this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                    this._reconnect({\n                        refreshToken: true\n                    });\n                }\n            }\n            if (data) {\n                data.received_at = new Date();\n                this.client.dispatchEvent(data);\n            }\n            this.scheduleConnectionCheck();\n        };\n        this.onclose = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log('onclose() - onclose callback - ' + event.code, {\n                event,\n                wsID\n            });\n            if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                const error = new Error(`WS connection reject with error ${event.reason}`);\n                // @ts-expect-error type issue\n                error.reason = event.reason;\n                // @ts-expect-error type issue\n                error.code = event.code;\n                // @ts-expect-error type issue\n                error.wasClean = event.wasClean;\n                // @ts-expect-error type issue\n                error.target = event.target;\n                this.rejectConnectionOpen?.(error);\n                this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n                    event\n                });\n            } else {\n                this.consecutiveFailures += 1;\n                this.totalFailures += 1;\n                this._setHealth(false);\n                this.isConnecting = false;\n                this.rejectConnectionOpen?.(this._errorFromWSEvent(event));\n                this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n                    event\n                });\n                // reconnect if its an abnormal failure\n                this._reconnect();\n            }\n        };\n        this.onerror = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this.consecutiveFailures += 1;\n            this.totalFailures += 1;\n            this._setHealth(false);\n            this.isConnecting = false;\n            this._log(`onerror() - WS connection resulted into error`, {\n                event\n            });\n            this._reconnect();\n        };\n        /**\n         * _setHealth - Sets the connection to healthy or unhealthy.\n         * Broadcasts an event in case the connection status changed.\n         *\n         * @param {boolean} healthy boolean indicating if the connection is healthy or not\n         * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n         */ this._setHealth = (healthy, dispatchImmediately = false)=>{\n            if (healthy === this.isHealthy) return;\n            this.isHealthy = healthy;\n            if (this.isHealthy || dispatchImmediately) {\n                this.client.dispatchEvent({\n                    type: 'connection.changed',\n                    online: this.isHealthy\n                });\n                return;\n            }\n            // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(()=>{\n                if (this.isHealthy) return;\n                this.client.dispatchEvent({\n                    type: 'connection.changed',\n                    online: this.isHealthy\n                });\n            }, 5000);\n        };\n        /**\n         * _errorFromWSEvent - Creates an error object for the WS event\n         */ this._errorFromWSEvent = (event, isWSFailure = true)=>{\n            let code;\n            let statusCode;\n            let message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                message = event.reason;\n                statusCode = 0;\n            } else {\n                const { error } = event;\n                code = error.code;\n                message = error.message;\n                statusCode = error.StatusCode;\n            }\n            const msg = `WS failed with code: ${code}: ${APIErrorCodes[code] || code} and reason: ${message}`;\n            this._log(msg, {\n                event\n            }, 'warn');\n            const error = new Error(msg);\n            error.code = code;\n            /**\n             * StatusCode does not exist on any event types but has been left\n             * as is to preserve JS functionality during the TS implementation\n             */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        };\n        /**\n         * _setupPromise - sets up the this.connectOpen promise\n         */ this._setupConnectionPromise = ()=>{\n            this.isConnectionOpenResolved = false;\n            /** a promise that is resolved once ws.open is called */ this.connectionOpenSafe = makeSafePromise(new Promise((resolve, reject)=>{\n                this.resolveConnectionOpen = resolve;\n                this.rejectConnectionOpen = reject;\n            }));\n        };\n        /**\n         * Schedules a next health check ping for websocket.\n         */ this.scheduleNextPing = ()=>{\n            const timers = getTimers();\n            if (this.healthCheckTimeoutRef) {\n                timers.clearTimeout(this.healthCheckTimeoutRef);\n            }\n            // 30 seconds is the recommended interval (messenger uses this)\n            this.healthCheckTimeoutRef = timers.setTimeout(()=>{\n                // send the healthcheck..., server replies with a health check event\n                const data = [\n                    {\n                        type: 'health.check',\n                        client_id: this.client.clientID\n                    }\n                ];\n                // try to send on the connection\n                try {\n                    this.ws?.send(JSON.stringify(data));\n                } catch  {\n                // error will already be detected elsewhere\n                }\n            }, this.pingInterval);\n        };\n        /**\n         * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n         * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n         * to be reconnected.\n         */ this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeoutRef);\n            this.connectionCheckTimeoutRef = setTimeout(()=>{\n                const now = new Date();\n                if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n                    this._log('scheduleConnectionCheck - going to reconnect');\n                    this._setHealth(false);\n                    this._reconnect();\n                }\n            }, this.connectionCheckTimeout);\n        };\n        this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isConnectionOpenResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async connect(timeout = 15000) {\n        if (this.isConnecting) {\n            throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n        }\n        this.isDisconnected = false;\n        try {\n            const healthCheck = await this._connect();\n            this.consecutiveFailures = 0;\n            this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (// @ts-expect-error type issue\n            error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                this._reconnect({\n                    refreshToken: true\n                });\n            } else {\n                // @ts-expect-error type issue\n                if (!error.isWSFailure) {\n                    // API rejected the connection and we should not retry\n                    throw new Error(JSON.stringify({\n                        // @ts-expect-error type issue\n                        code: error.code,\n                        // @ts-expect-error type issue\n                        StatusCode: error.StatusCode,\n                        // @ts-expect-error type issue\n                        message: error.message,\n                        // @ts-expect-error type issue\n                        isWSFailure: error.isWSFailure\n                    }));\n                }\n            }\n        }\n        return await this._waitForHealthy(timeout);\n    }\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */ async _waitForHealthy(timeout = 15000) {\n        return Promise.race([\n            (async ()=>{\n                const interval = 50; // ms\n                for(let i = 0; i <= timeout; i += interval){\n                    try {\n                        return await this.connectionOpen;\n                    } catch (error) {\n                        if (i === timeout) {\n                            throw new Error(JSON.stringify({\n                                code: error.code,\n                                StatusCode: error.StatusCode,\n                                message: error.message,\n                                isWSFailure: error.isWSFailure\n                            }));\n                        }\n                        await sleep(interval);\n                    }\n                }\n            })(),\n            (async ()=>{\n                await sleep(timeout);\n                this.isConnecting = false;\n                throw new Error(JSON.stringify({\n                    code: '',\n                    StatusCode: '',\n                    message: 'initial WS connection could not be established',\n                    isWSFailure: true\n                }));\n            })()\n        ]);\n    }\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ disconnect(timeout) {\n        this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n        this.wsID += 1;\n        this.isConnecting = false;\n        this.isDisconnected = true;\n        // start by removing all the listeners\n        if (this.healthCheckTimeoutRef) {\n            getTimers().clearInterval(this.healthCheckTimeoutRef);\n        }\n        if (this.connectionCheckTimeoutRef) {\n            clearInterval(this.connectionCheckTimeoutRef);\n        }\n        removeConnectionEventListeners(this.onlineStatusChanged);\n        this.isHealthy = false;\n        let isClosedPromise;\n        // and finally close...\n        // Assigning to local here because we will remove it from this before the\n        // promise resolves.\n        const { ws } = this;\n        if (ws && ws.close && ws.readyState === ws.OPEN) {\n            isClosedPromise = new Promise((resolve)=>{\n                const onclose = (event)=>{\n                    this._log(`disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`, {\n                        event\n                    });\n                    resolve();\n                };\n                ws.onclose = onclose;\n                // In case we don't receive close frame websocket server in time,\n                // lets not wait for more than 1 second.\n                setTimeout(onclose, timeout != null ? timeout : 1000);\n            });\n            this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n            ws.close(KnownCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n        } else {\n            this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n            isClosedPromise = Promise.resolve();\n        }\n        delete this.ws;\n        return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async _connect() {\n        if (this.isConnecting) return; // ignore _connect if it's currently trying to connect\n        this.isConnecting = true;\n        let isTokenReady = false;\n        try {\n            this._log(`_connect() - waiting for token`);\n            await this.client.tokenManager.tokenReady();\n            isTokenReady = true;\n        } catch  {\n        // token provider has failed before, so try again\n        }\n        try {\n            if (!isTokenReady) {\n                this._log(`_connect() - tokenProvider failed before, so going to retry`);\n                await this.client.tokenManager.loadToken();\n            }\n            if (!this.client.isConnectionIsPromisePending) {\n                this.client._setupConnectionIdPromise();\n            }\n            this._setupConnectionPromise();\n            const wsURL = this._buildUrl();\n            this._log(`_connect() - Connecting to ${wsURL}`);\n            const WS = this.client.options.WebSocketImpl ?? WebSocket;\n            this.ws = new WS(wsURL);\n            this.ws.onopen = this.onopen.bind(this, this.wsID);\n            this.ws.onclose = this.onclose.bind(this, this.wsID);\n            this.ws.onerror = this.onerror.bind(this, this.wsID);\n            this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n            const response = await this.connectionOpen;\n            this.isConnecting = false;\n            if (response) {\n                this.connectionID = response.connection_id;\n                this.client.resolveConnectionId?.(this.connectionID);\n                return response;\n            }\n        } catch (err) {\n            this.client._setupConnectionIdPromise();\n            this.isConnecting = false;\n            // @ts-expect-error type issue\n            this._log(`_connect() - Error - `, err);\n            this.client.rejectConnectionId?.(err);\n            throw err;\n        }\n    }\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */ async _reconnect(options = {}) {\n        this._log('_reconnect() - Initiating the reconnect');\n        // only allow 1 connection at the time\n        if (this.isConnecting || this.isHealthy) {\n            this._log('_reconnect() - Abort (1) since already connecting or healthy');\n            return;\n        }\n        // reconnect in case of on error or on close\n        // also reconnect if the health check cycle fails\n        let interval = options.interval;\n        if (!interval) {\n            interval = retryInterval(this.consecutiveFailures);\n        }\n        // reconnect, or try again after a little while...\n        await sleep(interval);\n        // Check once again if by some other call to _reconnect is active or connection is\n        // already restored, then no need to proceed.\n        if (this.isConnecting || this.isHealthy) {\n            this._log('_reconnect() - Abort (2) since already connecting or healthy');\n            return;\n        }\n        if (this.isDisconnected) {\n            this._log('_reconnect() - Abort (3) since disconnect() is called');\n            return;\n        }\n        this._log('_reconnect() - Destroying current WS connection');\n        // cleanup the old connection\n        this._destroyCurrentWSConnection();\n        if (options.refreshToken) {\n            await this.client.tokenManager.loadToken();\n        }\n        try {\n            await this._connect();\n            this._log('_reconnect() - Waiting for recoverCallBack');\n            // await this.client.recoverState();\n            this._log('_reconnect() - Finished recoverCallBack');\n            this.consecutiveFailures = 0;\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                return this._reconnect({\n                    refreshToken: true\n                });\n            }\n            // reconnect on WS failures, don't reconnect if there is a code bug\n            if (error.isWSFailure) {\n                this._log('_reconnect() - WS failure, so going to try to reconnect');\n                this._reconnect();\n            }\n        }\n        this._log('_reconnect() - == END ==');\n    }\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ _destroyCurrentWSConnection() {\n        // increment the ID, meaning we will ignore all messages from the old\n        // ws connection from now on.\n        this.wsID += 1;\n        try {\n            this?.ws?.close();\n        } catch  {\n        // we don't care\n        }\n    }\n    get connectionOpen() {\n        return this.connectionOpenSafe?.();\n    }\n}\nfunction getUserFromToken(token) {\n    const fragments = token.split('.');\n    if (fragments.length !== 3) {\n        return '';\n    }\n    const b64Payload = fragments[1];\n    const payload = decodeBase64(b64Payload);\n    const data = JSON.parse(payload);\n    return data.user_id;\n}\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s)=>{\n    const e = {}, w = String.fromCharCode, L = s.length;\n    let i, b = 0, c, x, l = 0, a, r = '';\n    const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            if ((a = b >>> (l -= 8) & 0xff) || x < L - 2) r += w(a);\n        }\n    }\n    return r;\n};\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ class TokenManager {\n    constructor(secret){\n        this.loadTokenPromise = null;\n        this.type = 'static';\n        /**\n         * Set the static string token or token provider.\n         * Token provider should return a token string or a promise which resolves to string token.\n         *\n         * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n         * @param {UserResponse} user - the user object.\n         * @param {boolean} isAnonymous - whether the user is anonymous or not.\n         */ this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous)=>{\n            this.user = user;\n            this.isAnonymous = isAnonymous;\n            this.validateToken(tokenOrProvider);\n            if (isFunction(tokenOrProvider)) {\n                this.tokenProvider = tokenOrProvider;\n                this.type = 'provider';\n            }\n            if (typeof tokenOrProvider === 'string') {\n                this.token = tokenOrProvider;\n                this.type = 'static';\n            }\n            await this.loadToken();\n        };\n        /**\n         * Resets the token manager.\n         * Useful for client disconnection or switching user.\n         */ this.reset = ()=>{\n            this.token = undefined;\n            this.tokenProvider = undefined;\n            this.type = 'static';\n            this.user = undefined;\n            this.loadTokenPromise = null;\n        };\n        // Validates the user token.\n        this.validateToken = (tokenOrProvider)=>{\n            // allow empty token for anon user\n            if (this.user && this.isAnonymous && !tokenOrProvider) return;\n            // Don't allow empty token for non-server side client.\n            if (!this.secret && !tokenOrProvider) {\n                throw new Error('User token can not be empty');\n            }\n            if (typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n                throw new Error('User token should either be a string or a function');\n            }\n            if (typeof tokenOrProvider === 'string') {\n                // Allow empty token for anonymous users\n                if (this.isAnonymous && tokenOrProvider === '') return;\n                const tokenUserId = getUserFromToken(tokenOrProvider);\n                if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || !this.isAnonymous && tokenUserId !== this.user.id)) {\n                    throw new Error('userToken does not have a user_id or is not matching with user.id');\n                }\n            }\n        };\n        // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n        // case a function should wait.\n        this.tokenReady = ()=>this.loadTokenPromise;\n        // Fetches a token from tokenProvider function and sets in tokenManager.\n        // In case of static token, it will simply resolve to static token.\n        this.loadToken = ()=>{\n            this.loadTokenPromise = new Promise(async (resolve, reject)=>{\n                if (this.type === 'static') {\n                    return resolve(this.token);\n                }\n                if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n                    try {\n                        const token = await this.tokenProvider();\n                        this.validateToken(token);\n                        this.token = token;\n                    } catch (e) {\n                        return reject(new Error(`Call to tokenProvider failed with message: ${e}`, {\n                            cause: e\n                        }));\n                    }\n                    resolve(this.token);\n                }\n            });\n            return this.loadTokenPromise;\n        };\n        // Returns a current token\n        this.getToken = ()=>{\n            if (this.token) {\n                return this.token;\n            }\n            if (this.user && !this.token) {\n                return this.token;\n            }\n            throw new Error(`User token is not set. Either client.connectUser wasn't called or client.disconnect was called`);\n        };\n        this.isStatic = ()=>this.type === 'static';\n        this.secret = secret;\n    }\n}\nconst getLocationHint = async (hintUrl = `https://hint.stream-io-video.com/`, timeout = 2000, maxAttempts = 3)=>{\n    const logger = getLogger([\n        'location-hint'\n    ]);\n    let attempt = 0;\n    let locationHint = 'ERR';\n    do {\n        const abortController = new AbortController();\n        const timeoutId = setTimeout(()=>abortController.abort(), timeout);\n        try {\n            const response = await fetch(hintUrl, {\n                method: 'HEAD',\n                signal: abortController.signal\n            });\n            const awsPop = response.headers.get('x-amz-cf-pop') || 'ERR';\n            logger('debug', `Location header: ${awsPop}`);\n            locationHint = awsPop.substring(0, 3); // AMS1-P2 -> AMS\n        } catch (e) {\n            logger('warn', `Failed to get location hint from ${hintUrl}`, e);\n            locationHint = 'ERR';\n        } finally{\n            clearTimeout(timeoutId);\n        }\n    }while (locationHint === 'ERR' && ++attempt < maxAttempts);\n    return locationHint;\n};\nclass StreamClient {\n    /**\n     * Initialize a client.\n     *\n     * @param {string} key - the api key\n     * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n     * @param {string} [options.secret] - the api secret\n     * @param {boolean} [options.browser] - enforce the client to be in browser mode\n     * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n     * @param {Logger} [options.Logger] - custom logger\n     * @param {number} [options.timeout] - default to 3000\n     * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n     */ constructor(key, options){\n        this.listeners = {};\n        this.getAuthType = ()=>{\n            return this.anonymous ? 'anonymous' : 'jwt';\n        };\n        this.setBaseURL = (baseURL)=>{\n            this.baseURL = baseURL;\n            this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n        };\n        this.getLocationHint = async (hintUrl, timeout)=>{\n            const hint = await this.locationHint;\n            if (!hint || hint === 'ERR') {\n                this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n                return this.locationHint;\n            }\n            return hint;\n        };\n        this._getConnectionID = ()=>this.wsConnection?.connectionID;\n        this._hasConnectionID = ()=>Boolean(this._getConnectionID());\n        /**\n         * connectUser - Set the current user and open a WebSocket connection\n         *\n         * @param user Data about this user. IE {name: \"john\"}\n         * @param {TokenOrProvider} tokenOrProvider Token or provider\n         *\n         * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n         */ this.connectUser = async (user, tokenOrProvider)=>{\n            if (!user.id) {\n                throw new Error('The \"id\" field on the user is missing');\n            }\n            /**\n             * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n             * If the user id remains the same we don't throw error\n             */ if (this.userID === user.id && this.connectUserTask) {\n                this.logger('warn', 'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');\n                return this.connectUserTask;\n            }\n            if (this.userID) {\n                throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');\n            }\n            if ((this.secret || this.node) && !this.options.allowServerSideConnect) {\n                this.logger('warn', 'Please do not use connectUser server side. Use our @stream-io/node-sdk instead: https://getstream.io/video/docs/api/');\n            }\n            // we generate the client id client side\n            this.userID = user.id;\n            this.anonymous = false;\n            await this.tokenManager.setTokenOrProvider(tokenOrProvider, user, false);\n            this._setUser(user);\n            this.connectUserTask = this.openConnection();\n            try {\n                addConnectionEventListeners(this.updateNetworkConnectionStatus);\n                return await this.connectUserTask;\n            } catch (err) {\n                if (this.persistUserOnConnectionFailure) {\n                    // cleanup client to allow the user to retry connectUser again\n                    await this.closeConnection();\n                } else {\n                    await this.disconnectUser();\n                }\n                throw err;\n            }\n        };\n        this._setUser = (user)=>{\n            /**\n             * This one is used by the frontend. This is a copy of the current user object stored on backend.\n             * It contains reserved properties and own user properties which are not present in `this._user`.\n             */ this.user = user;\n            this.userID = user.id;\n            // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n            this._user = {\n                ...user\n            };\n        };\n        /**\n         * Disconnects the websocket connection, without removing the user set on client.\n         * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n         * to call client.openConnection to reconnect to websocket.\n         *\n         * This is mainly useful on mobile side. You can only receive push notifications\n         * if you don't have active websocket connection.\n         * So when your app goes to background, you can call `client.closeConnection`.\n         * And when app comes back to foreground, call `client.openConnection`.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.closeConnection = async (timeout)=>{\n            await this.wsConnection?.disconnect(timeout);\n        };\n        /**\n         * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n         */ this.openConnection = async ()=>{\n            if (!this.userID) {\n                throw Error('UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n            }\n            const wsPromise = this.wsPromiseSafe?.();\n            if (this.wsConnection?.isConnecting && wsPromise) {\n                this.logger('info', 'client:openConnection() - connection already in progress');\n                return await wsPromise;\n            }\n            if (this.wsConnection?.isHealthy && this._hasConnectionID()) {\n                this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists');\n                return;\n            }\n            this._setupConnectionIdPromise();\n            this.clientID = `${this.userID}--${generateUUIDv4()}`;\n            const newWsPromise = this.connect();\n            this.wsPromiseSafe = makeSafePromise(newWsPromise);\n            return await newWsPromise;\n        };\n        /**\n         * Disconnects the websocket and removes the user from client.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            this.logger('info', 'client:disconnect() - Disconnecting the client');\n            // remove the user specific fields\n            delete this.user;\n            delete this._user;\n            delete this.userID;\n            this.anonymous = false;\n            await this.closeConnection(timeout);\n            removeConnectionEventListeners(this.updateNetworkConnectionStatus);\n            this.tokenManager.reset();\n            this.connectionIdPromiseSafe = undefined;\n            this.rejectConnectionId = undefined;\n            this.resolveConnectionId = undefined;\n        };\n        this.connectGuestUser = async (user)=>{\n            this.guestUserCreatePromise = this.doAxiosRequest('post', '/guest', {\n                user\n            }, {\n                publicEndpoint: true\n            });\n            const response = await this.guestUserCreatePromise;\n            this.guestUserCreatePromise.finally(()=>this.guestUserCreatePromise = undefined);\n            return this.connectUser(response.user, response.access_token);\n        };\n        /**\n         * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            addConnectionEventListeners(this.updateNetworkConnectionStatus);\n            this._setupConnectionIdPromise();\n            this.anonymous = true;\n            await this.tokenManager.setTokenOrProvider(tokenOrProvider, user, true);\n            this._setUser(user);\n            // some endpoints require a connection_id to be resolved.\n            // as anonymous users aren't allowed to open WS connections, we just\n            // resolve the connection_id here.\n            this.resolveConnectionId?.();\n        };\n        /**\n         * on - Listen to events on all channels and users your watching\n         *\n         * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n         *\n         * @param eventName The event type to listen for (optional)\n         * @param callback The callback to call\n         *\n         * @return  Returns a function which, when called, unsubscribes the event handler.\n         */ this.on = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger('debug', `Adding listener for ${eventName} event`);\n            this.listeners[eventName]?.push(callback);\n            return ()=>{\n                this.off(eventName, callback);\n            };\n        };\n        /**\n         * off - Remove the event handler\n         */ this.off = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger('debug', `Removing listener for ${eventName} event`);\n            this.listeners[eventName] = this.listeners[eventName]?.filter((value)=>value !== callback);\n        };\n        /**\n         * sets up the this.connectionIdPromise\n         */ this._setupConnectionIdPromise = ()=>{\n            /** a promise that is resolved once connection id is set */ this.connectionIdPromiseSafe = makeSafePromise(new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            }));\n        };\n        this._logApiRequest = (type, url, data, config)=>{\n            if (getLogLevel() !== 'trace') return;\n            this.logger('trace', `client: ${type} - Request - ${url}`, {\n                payload: data,\n                config\n            });\n        };\n        this._logApiResponse = (type, url, response)=>{\n            if (getLogLevel() !== 'trace') return;\n            this.logger('trace', `client:${type} - Response - url: ${url} > status ${response.status}`, {\n                response\n            });\n        };\n        this.doAxiosRequest = async (type, url, data, options = {})=>{\n            if (!options.publicEndpoint) {\n                await Promise.all([\n                    this.tokenManager.tokenReady(),\n                    this.guestUserCreatePromise\n                ]);\n                // we need to wait for presence of connection id before making requests\n                try {\n                    await this.connectionIdPromise;\n                } catch  {\n                    // in case connection id was rejected\n                    // reconnection maybe in progress\n                    // we can wait for healthy connection to resolve, which rejects when 15s timeout is reached\n                    await this.wsConnection?._waitForHealthy();\n                    await this.connectionIdPromise;\n                }\n            }\n            const requestConfig = this._enrichAxiosOptions(options);\n            try {\n                let response;\n                this._logApiRequest(type, url, data, requestConfig);\n                switch(type){\n                    case 'get':\n                        response = await this.axiosInstance.get(url, requestConfig);\n                        break;\n                    case 'delete':\n                        response = await this.axiosInstance.delete(url, requestConfig);\n                        break;\n                    case 'post':\n                        response = await this.axiosInstance.post(url, data, requestConfig);\n                        break;\n                    case 'put':\n                        response = await this.axiosInstance.put(url, data, requestConfig);\n                        break;\n                    case 'patch':\n                        response = await this.axiosInstance.patch(url, data, requestConfig);\n                        break;\n                    case 'options':\n                        response = await this.axiosInstance.options(url, requestConfig);\n                        break;\n                    default:\n                        throw new Error('Invalid request type');\n                }\n                this._logApiResponse(type, url, response);\n                this.consecutiveFailures = 0;\n                return response.data;\n            } catch (e /**TODO: generalize error types  */ ) {\n                e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n                this.consecutiveFailures += 1;\n                const { response } = e;\n                if (!response || !isErrorResponse(response)) {\n                    this.logger('error', `client:${type} url: ${url}`, e);\n                    throw e;\n                }\n                const { data: responseData, status } = response;\n                const isTokenExpired = responseData.code === KnownCodes.TOKEN_EXPIRED;\n                if (isTokenExpired && !this.tokenManager.isStatic()) {\n                    this.logger('warn', `client:${type}: url: ${url}`, response);\n                    if (this.consecutiveFailures > 1) {\n                        await sleep(retryInterval(this.consecutiveFailures));\n                    }\n                    // refresh and retry the request\n                    await this.tokenManager.loadToken();\n                    return await this.doAxiosRequest(type, url, data, options);\n                } else {\n                    this.logger('error', `client:${type} url: ${url}`, response);\n                    throw new ErrorFromResponse({\n                        message: `Stream error code ${responseData.code}: ${responseData.message}`,\n                        code: responseData.code ?? null,\n                        unrecoverable: responseData.unrecoverable ?? null,\n                        response: response,\n                        status: status\n                    });\n                }\n            }\n        };\n        this.get = (url, params)=>{\n            return this.doAxiosRequest('get', url, null, {\n                params\n            });\n        };\n        this.put = (url, data, params)=>{\n            return this.doAxiosRequest('put', url, data, {\n                params\n            });\n        };\n        this.post = (url, data, params)=>{\n            return this.doAxiosRequest('post', url, data, {\n                params\n            });\n        };\n        this.patch = (url, data, params)=>{\n            return this.doAxiosRequest('patch', url, data, {\n                params\n            });\n        };\n        this.delete = (url, params)=>{\n            return this.doAxiosRequest('delete', url, null, {\n                params\n            });\n        };\n        this.dispatchEvent = (event)=>{\n            this.logger('debug', `Dispatching event: ${event.type}`, event);\n            if (!this.listeners) return;\n            // call generic listeners\n            for (const listener of this.listeners.all || []){\n                listener(event);\n            }\n            // call type specific listeners\n            for (const listener of this.listeners[event.type] || []){\n                listener(event);\n            }\n        };\n        /**\n         * @private\n         */ this.connect = async ()=>{\n            if (!this.userID || !this._user) {\n                throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n            }\n            if (!this.wsBaseURL) throw Error('Websocket base url not set');\n            if (!this.clientID) throw Error('clientID is not set');\n            // The StableWSConnection handles all the reconnection logic.\n            this.wsConnection = new StableWSConnection(this);\n            this.logger('info', 'StreamClient.connect: this.wsConnection.connect()');\n            return await this.wsConnection.connect(this.defaultWSTimeout);\n        };\n        this.getUserAgent = ()=>{\n            if (!this.cachedUserAgent) {\n                const { clientAppIdentifier = {} } = this.options;\n                const { sdkName = 'js', sdkVersion = \"1.28.1\", ...extras } = clientAppIdentifier;\n                this.cachedUserAgent = [\n                    `stream-video-${sdkName}-v${sdkVersion}`,\n                    ...Object.entries(extras).map(([key, value])=>`${key}=${value}`),\n                    `client_bundle=${\"node-esm\"}`\n                ].join('|');\n            }\n            return this.cachedUserAgent;\n        };\n        this._enrichAxiosOptions = (options = {\n            params: {},\n            headers: {},\n            config: {}\n        })=>{\n            const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n            const authorization = token ? {\n                Authorization: token\n            } : undefined;\n            if (!options.headers?.['x-client-request-id']) {\n                options.headers = {\n                    ...options.headers,\n                    'x-client-request-id': generateUUIDv4()\n                };\n            }\n            return {\n                params: {\n                    user_id: this.userID,\n                    connection_id: this._getConnectionID(),\n                    api_key: this.key,\n                    ...options.params\n                },\n                headers: {\n                    ...authorization,\n                    'stream-auth-type': options.publicEndpoint && !this.user ? 'anonymous' : this.getAuthType(),\n                    'X-Stream-Client': this.getUserAgent(),\n                    ...options.headers\n                },\n                ...options.config,\n                ...this.options.axiosRequestConfig\n            };\n        };\n        this._getToken = ()=>{\n            if (!this.tokenManager) return null;\n            return this.tokenManager.getToken();\n        };\n        this.updateNetworkConnectionStatus = (event)=>{\n            if (event.type === 'offline') {\n                this.logger('debug', 'device went offline');\n                this.dispatchEvent({\n                    type: 'network.changed',\n                    online: false\n                });\n            } else if (event.type === 'online') {\n                this.logger('debug', 'device went online');\n                this.dispatchEvent({\n                    type: 'network.changed',\n                    online: true\n                });\n            }\n        };\n        // set the key\n        this.key = key;\n        // set the secret\n        this.secret = options?.secret;\n        // set the options... and figure out defaults...\n        const inputOptions = options ? options : {\n            browser: \"undefined\" !== 'undefined'\n        };\n        this.browser = inputOptions.browser || \"undefined\" !== 'undefined';\n        this.node = !this.browser;\n        if (this.browser) {\n            this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout, options?.locationHintMaxAttempts);\n        }\n        this.options = {\n            timeout: 5000,\n            withCredentials: false,\n            ...inputOptions\n        };\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_4___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.setBaseURL(this.options.baseURL || 'https://video.stream-io-api.com/video');\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_14__[\"default\"].create({\n            ...this.options,\n            baseURL: this.baseURL\n        });\n        // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromiseSafe = null;\n        this.connectUserTask = null;\n        // mapping between channel groups and configs\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n        // If it is a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.defaultWSTimeout = this.options.defaultWsTimeout ?? 15000;\n        this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : ()=>null;\n    }\n    get connectionIdPromise() {\n        return this.connectionIdPromiseSafe?.();\n    }\n    get isConnectionIsPromisePending() {\n        return this.connectionIdPromiseSafe?.checkPending() ?? false;\n    }\n    get wsPromise() {\n        return this.wsPromiseSafe?.();\n    }\n}\n/**\n * Utility function to get the instance key.\n */ const getInstanceKey = (apiKey, user)=>{\n    return `${apiKey}/${user.id}`;\n};\n/**\n * Returns a concurrency tag for call initialization.\n * @internal\n *\n * @param cid the call cid.\n */ const getCallInitConcurrencyTag = (cid)=>`call.init-${cid}`;\n/**\n * Utility function to get the client app identifier.\n */ const getClientAppIdentifier = (options)=>{\n    const appId = options?.clientAppIdentifier || {};\n    const sdkInfo = getSdkInfo();\n    if (sdkInfo) {\n        // ensure the sdk name and version are set correctly,\n        // overriding any user-provided values\n        appId.sdkName = SdkType[sdkInfo.type].toLowerCase();\n        appId.sdkVersion = `${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`;\n    }\n    return appId;\n};\n/**\n * Creates a coordinator client.\n */ const createCoordinatorClient = (apiKey, options)=>{\n    const clientAppIdentifier = getClientAppIdentifier(options);\n    const coordinatorLogger = getLogger([\n        'coordinator'\n    ]);\n    return new StreamClient(apiKey, {\n        persistUserOnConnectionFailure: true,\n        ...options,\n        clientAppIdentifier,\n        logger: coordinatorLogger\n    });\n};\n/**\n * Creates a token provider and allows integrators to provide\n * a static token and a token provider at the same time.\n *\n * When both of them are provided, this function will create an internal\n * token provider that will use the static token on the first invocation\n * and the token provider on the later invocations.\n */ const createTokenOrProvider = (options)=>{\n    const { token, tokenProvider } = options;\n    if (token && tokenProvider) {\n        let initialTokenUsed = false;\n        return async function wrappedTokenProvider() {\n            if (!initialTokenUsed) {\n                initialTokenUsed = true;\n                return token;\n            }\n            return tokenProvider();\n        };\n    }\n    return token || tokenProvider;\n};\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */ class StreamVideoClient {\n    constructor(apiKeyOrArgs, opts){\n        this.effectsRegistered = false;\n        this.eventHandlersToUnregister = [];\n        this.connectionConcurrencyTag = Symbol('connectionConcurrencyTag');\n        this.registerClientInstance = (apiKey, user)=>{\n            const instanceKey = getInstanceKey(apiKey, user);\n            if (StreamVideoClient._instances.has(instanceKey)) {\n                this.logger('warn', `A StreamVideoClient already exists for ${user.id}; Prefer using getOrCreateInstance method`);\n            }\n            StreamVideoClient._instances.set(instanceKey, this);\n        };\n        this.registerEffects = ()=>{\n            if (this.effectsRegistered) return;\n            this.eventHandlersToUnregister.push(this.on('call.created', (event)=>this.initCallFromEvent(event)), this.on('call.ring', (event)=>this.initCallFromEvent(event)), this.on('connection.changed', (event)=>{\n                if (!event.online) return;\n                const callsToReWatch = this.writeableStateStore.calls.filter((call)=>call.watching).map((call)=>call.cid);\n                if (callsToReWatch.length <= 0) return;\n                this.logger('info', `Rewatching calls ${callsToReWatch.join(', ')}`);\n                this.queryCalls({\n                    watch: true,\n                    filter_conditions: {\n                        cid: {\n                            $in: callsToReWatch\n                        }\n                    },\n                    sort: [\n                        {\n                            field: 'cid',\n                            direction: 1\n                        }\n                    ]\n                }).catch((err)=>{\n                    this.logger('error', 'Failed to re-watch calls', err);\n                });\n            }));\n            this.effectsRegistered = true;\n        };\n        /**\n         * Initializes a call from a call created or ringing event.\n         * @param e the event.\n         */ this.initCallFromEvent = async (e)=>{\n            if (this.state.connectedUser?.id === e.call.created_by.id) {\n                this.logger('debug', `Ignoring ${e.type} event sent by the current user`);\n                return;\n            }\n            try {\n                const concurrencyTag = getCallInitConcurrencyTag(e.call_cid);\n                await withoutConcurrency(concurrencyTag, async ()=>{\n                    const ringing = e.type === 'call.ring';\n                    let call = this.writeableStateStore.findCall(e.call.type, e.call.id);\n                    if (call) {\n                        if (ringing) {\n                            await call.updateFromRingingEvent(e);\n                        } else {\n                            call.state.updateFromCallResponse(e.call);\n                        }\n                        return;\n                    }\n                    call = new Call({\n                        streamClient: this.streamClient,\n                        type: e.call.type,\n                        id: e.call.id,\n                        members: e.members,\n                        clientStore: this.writeableStateStore,\n                        ringing\n                    });\n                    call.state.updateFromCallResponse(e.call);\n                    if (ringing) {\n                        await call.get();\n                    } else {\n                        this.writeableStateStore.registerCall(call);\n                        this.logger('info', `New call created and registered: ${call.cid}`);\n                    }\n                });\n            } catch (err) {\n                this.logger('error', `Failed to init call from event ${e.type}`, err);\n            }\n        };\n        /**\n         * Connects the given user to the client.\n         * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n         * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectUser = async (user, tokenOrProvider)=>{\n            if (user.type === 'anonymous') {\n                user.id = '!anon';\n                return this.connectAnonymousUser(user, tokenOrProvider);\n            }\n            const connectUserResponse = await withoutConcurrency(this.connectionConcurrencyTag, async ()=>{\n                const client = this.streamClient;\n                const { onConnectUserError, persistUserOnConnectionFailure } = client.options;\n                let { maxConnectUserRetries = 5 } = client.options;\n                maxConnectUserRetries = Math.max(maxConnectUserRetries, 1);\n                const errorQueue = [];\n                for(let attempt = 0; attempt < maxConnectUserRetries; attempt++){\n                    try {\n                        this.logger('trace', `Connecting user (${attempt})`, user);\n                        return user.type === 'guest' ? await client.connectGuestUser(user) : await client.connectUser(user, tokenOrProvider);\n                    } catch (err) {\n                        this.logger('warn', `Failed to connect a user (${attempt})`, err);\n                        errorQueue.push(err);\n                        if (attempt === maxConnectUserRetries - 1) {\n                            onConnectUserError?.(err, errorQueue);\n                            throw err;\n                        }\n                        // we need to force to disconnect the user if the client is\n                        // configured to persist the user on connection failure\n                        if (persistUserOnConnectionFailure) {\n                            await client.disconnectUser();\n                        }\n                        await sleep(retryInterval(attempt));\n                    }\n                }\n            });\n            // connectUserResponse will be void if connectUser called twice for the same user\n            if (connectUserResponse?.me) {\n                this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n            }\n            this.registerEffects();\n            return connectUserResponse;\n        };\n        /**\n         * Disconnects the currently connected user from the client.\n         *\n         * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            await withoutConcurrency(this.connectionConcurrencyTag, async ()=>{\n                const { user, key } = this.streamClient;\n                if (!user) return;\n                await this.streamClient.disconnectUser(timeout);\n                if (user.id) {\n                    StreamVideoClient._instances.delete(getInstanceKey(key, user));\n                }\n                this.eventHandlersToUnregister.forEach((unregister)=>unregister());\n                this.eventHandlersToUnregister = [];\n                this.effectsRegistered = false;\n                this.writeableStateStore.setConnectedUser(undefined);\n            });\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API.\n         * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n         * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n         *\n         * @param eventName the event name or 'all'.\n         * @param callback the callback which will be called when the event is emitted.\n         * @returns an unsubscribe function.\n         */ this.on = (eventName, callback)=>{\n            return this.streamClient.on(eventName, callback);\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param callback the callback which was passed to the `on` method.\n         */ this.off = (eventName, callback)=>{\n            return this.streamClient.off(eventName, callback);\n        };\n        /**\n         * Creates a new call.\n         *\n         * @param type the type of the call.\n         * @param id the id of the call.\n         * @param options additional options for call creation.\n         */ this.call = (type, id, options = {})=>{\n            const call = options.reuseInstance ? this.writeableStateStore.findCall(type, id) : undefined;\n            return call ?? new Call({\n                streamClient: this.streamClient,\n                id: id,\n                type: type,\n                clientStore: this.writeableStateStore\n            });\n        };\n        /**\n         * Creates a new guest user with the given data.\n         *\n         * @param data the data for the guest user.\n         */ this.createGuestUser = async (data)=>{\n            return this.streamClient.doAxiosRequest('post', '/guest', data, {\n                publicEndpoint: true\n            });\n        };\n        /**\n         * Will query the API for calls matching the given filters.\n         *\n         * @param data the query data.\n         */ this.queryCalls = async (data = {})=>{\n            const response = await this.streamClient.post('/calls', data);\n            const calls = [];\n            for (const c of response.calls){\n                const call = new Call({\n                    streamClient: this.streamClient,\n                    id: c.call.id,\n                    type: c.call.type,\n                    members: c.members,\n                    ownCapabilities: c.own_capabilities,\n                    watching: data.watch,\n                    clientStore: this.writeableStateStore\n                });\n                call.state.updateFromCallResponse(c.call);\n                await call.applyDeviceConfig(c.call.settings, false);\n                if (data.watch) {\n                    await call.setup();\n                    this.writeableStateStore.registerCall(call);\n                }\n                calls.push(call);\n            }\n            return {\n                ...response,\n                calls: calls\n            };\n        };\n        /**\n         * Retrieve the list of available call statistics reports matching a particular condition.\n         *\n         * @param data Filter and sort conditions for retrieving available call report summaries.\n         * @returns List with summary of available call reports matching the condition.\n         */ this.queryCallStats = async (data = {})=>{\n            return this.streamClient.post(`/call/stats`, data);\n        };\n        /**\n         * Retrieve the list of available reports aggregated from the call stats.\n         *\n         * @param data Specify filter conditions like from and to (within last 30 days) and the report types\n         * @returns Requested reports with (mostly) raw daily data for each report type requested\n         */ this.queryAggregateCallStats = async (data = {})=>{\n            return this.streamClient.post(`/stats`, data);\n        };\n        /**\n         * Returns a list of available data centers available for hosting calls.\n         */ this.edges = async ()=>{\n            return this.streamClient.get(`/edges`);\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n         */ this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token)=>{\n            return await this.streamClient.post('/devices', {\n                id,\n                push_provider,\n                voip_token,\n                ...userID != null ? {\n                    user_id: userID\n                } : {},\n                ...push_provider_name != null ? {\n                    push_provider_name\n                } : {}\n            });\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         */ this.addVoipDevice = async (id, push_provider, push_provider_name, userID)=>{\n            return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n        };\n        /**\n         * getDevices - Returns the devices associated with a current user\n         * @param {string} [userID] User ID. Only works on serverside\n         */ this.getDevices = async (userID)=>{\n            return await this.streamClient.get('/devices', userID ? {\n                user_id: userID\n            } : {});\n        };\n        /**\n         * removeDevice - Removes the device with the given id.\n         *\n         * @param {string} id The device id\n         * @param {string} [userID] The user id. Only specify this for serverside requests\n         */ this.removeDevice = async (id, userID)=>{\n            return await this.streamClient.delete('/devices', {\n                id,\n                ...userID ? {\n                    user_id: userID\n                } : {}\n            });\n        };\n        /**\n         * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n         * @param call_cid\n         * @returns\n         */ this.onRingingCall = async (call_cid)=>{\n            return withoutConcurrency(getCallInitConcurrencyTag(call_cid), async ()=>{\n                // if we find the call and is already ringing, we don't need to create a new call\n                // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n                let call = this.state.calls.find((c)=>c.cid === call_cid && c.ringing);\n                if (!call) {\n                    // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n                    const [callType, callId] = call_cid.split(':');\n                    call = new Call({\n                        streamClient: this.streamClient,\n                        type: callType,\n                        id: callId,\n                        clientStore: this.writeableStateStore,\n                        ringing: true\n                    });\n                    await call.get();\n                }\n                return call;\n            });\n        };\n        /**\n         * Connects the given anonymous user to the client.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            return withoutConcurrency(this.connectionConcurrencyTag, ()=>this.streamClient.connectAnonymousUser(user, tokenOrProvider));\n        };\n        const apiKey = typeof apiKeyOrArgs === 'string' ? apiKeyOrArgs : apiKeyOrArgs.apiKey;\n        const clientOptions = typeof apiKeyOrArgs === 'string' ? opts : apiKeyOrArgs.options;\n        if (clientOptions?.enableTimerWorker) enableTimerWorker();\n        const rootLogger = clientOptions?.logger || logToConsole;\n        setLogger(rootLogger, clientOptions?.logLevel || 'warn');\n        this.logger = getLogger([\n            'client'\n        ]);\n        this.streamClient = createCoordinatorClient(apiKey, clientOptions);\n        this.writeableStateStore = new StreamVideoWriteableStateStore();\n        this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n        if (typeof apiKeyOrArgs !== 'string' && apiKeyOrArgs.user) {\n            const user = apiKeyOrArgs.user;\n            if (user.type === 'anonymous') user.id = '!anon';\n            if (user.id) this.registerClientInstance(apiKey, user);\n            const tokenOrProvider = createTokenOrProvider(apiKeyOrArgs);\n            this.connectUser(user, tokenOrProvider).catch((err)=>{\n                this.logger('error', 'Failed to connect', err);\n            });\n        }\n    }\n    /**\n     * Gets or creates a StreamVideoClient instance based on the given options.\n     */ static getOrCreateInstance(args) {\n        const { apiKey, user, token, tokenProvider } = args;\n        if (!user.id && user.type !== 'anonymous') {\n            throw new Error('user.id is required for a non-anonymous user');\n        }\n        if (!token && !tokenProvider && user.type !== 'anonymous' && user.type !== 'guest') {\n            throw new Error('tokenProvider or token is required for a authenticated users');\n        }\n        return StreamVideoClient._instances.get(getInstanceKey(apiKey, user)) || new StreamVideoClient(args);\n    }\n    /**\n     * Return the reactive state store, use this if you want to be notified about changes to the client state\n     */ get state() {\n        return this.readOnlyStateStore;\n    }\n}\nStreamVideoClient._instances = new Map();\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stream-io/video-filters-web/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SegmentationLevel: () => (/* binding */ SegmentationLevel),\n/* harmony export */   createRenderer: () => (/* binding */ createRenderer),\n/* harmony export */   isPlatformSupported: () => (/* binding */ isPlatformSupported),\n/* harmony export */   loadTFLite: () => (/* binding */ loadTFLite)\n/* harmony export */ });\n/* harmony import */ var wasm_feature_detect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-feature-detect */ \"(ssr)/./node_modules/wasm-feature-detect/dist/esm/index.js\");\n\n\n/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */\nconst isMobile = () => /Mobi/i.test(navigator.userAgent);\n/**\n * Runs a check to see if the current platform supports\n * the necessary APIs required for the video filters.\n */\nconst isPlatformSupported = async () => typeof document !== 'undefined' &&\n    typeof window !== 'undefined' &&\n    typeof navigator !== 'undefined' &&\n    !isMobile() && // we don't support mobile devices yet due to performance issues\n    typeof WebAssembly !== 'undefined' &&\n    !!window.WebGL2RenderingContext && // WebGL2 is required for the video filters\n    !!document.createElement('canvas').getContext('webgl2') &&\n    (await (0,wasm_feature_detect__WEBPACK_IMPORTED_MODULE_0__.simd)()); // SIMD is required for the wasm module\n\n/**\n * Use it along with boyswan.glsl-literal VSCode extension\n * to get GLSL syntax highlighting.\n * https://marketplace.visualstudio.com/items?itemName=boyswan.glsl-literal\n *\n * On VSCode OSS, boyswan.glsl-literal requires slevesque.shader extension\n * to be installed as well.\n * https://marketplace.visualstudio.com/items?itemName=slevesque.shader\n */\nconst glsl = String.raw;\nfunction createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer) {\n    const program = createProgram(gl, vertexShader, fragmentShader);\n    const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');\n    gl.enableVertexAttribArray(positionAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    const texCoordAttributeLocation = gl.getAttribLocation(program, 'a_texCoord');\n    gl.enableVertexAttribArray(texCoordAttributeLocation);\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.vertexAttribPointer(texCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0);\n    return program;\n}\nfunction createProgram(gl, vertexShader, fragmentShader) {\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        throw new Error(`Could not link WebGL program: ${gl.getProgramInfoLog(program)}`);\n    }\n    return program;\n}\nfunction compileShader(gl, shaderType, shaderSource) {\n    const shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error(`Could not compile shader: ${gl.getShaderInfoLog(shader)}`);\n    }\n    return shader;\n}\nfunction createTexture(gl, internalformat, width, height, minFilter = gl.NEAREST, magFilter = gl.NEAREST) {\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n    gl.texStorage2D(gl.TEXTURE_2D, 1, internalformat, width, height);\n    return texture;\n}\nasync function readPixelsAsync(gl, x, y, width, height, format, type, dest) {\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, dest.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, width, height, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    await getBufferSubDataAsync(gl, gl.PIXEL_PACK_BUFFER, buf, 0, dest);\n    gl.deleteBuffer(buf);\n    return dest;\n}\nasync function getBufferSubDataAsync(gl, target, buffer, srcByteOffset, dstBuffer, dstOffset, length) {\n    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (!sync)\n        return;\n    const res = await clientWaitAsync(gl, sync);\n    gl.deleteSync(sync);\n    if (res !== gl.WAIT_FAILED) {\n        gl.bindBuffer(target, buffer);\n        gl.getBufferSubData(target, srcByteOffset, dstBuffer, dstOffset, length);\n        gl.bindBuffer(target, null);\n    }\n}\nfunction clientWaitAsync(gl, sync) {\n    return new Promise((resolve) => {\n        function test() {\n            const res = gl.clientWaitSync(sync, 0, 0);\n            if (res === gl.WAIT_FAILED) {\n                resolve(res);\n                return;\n            }\n            if (res === gl.TIMEOUT_EXPIRED) {\n                setTimeout(test);\n                return;\n            }\n            resolve(res);\n        }\n        setTimeout(test);\n    });\n}\n\nfunction buildBackgroundBlurStage(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel) {\n    const blurPass = buildBlurPass(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel);\n    const blendPass = buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas);\n    function render() {\n        blurPass.render();\n        blendPass.render();\n    }\n    function updateCoverage(coverage) {\n        blendPass.updateCoverage(coverage);\n    }\n    function cleanUp() {\n        blendPass.cleanUp();\n        blurPass.cleanUp();\n    }\n    return {\n        render,\n        updateCoverage,\n        cleanUp,\n    };\n}\nfunction buildBlurPass(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel) {\n    const sigma = typeof blurLevel === 'number'\n        ? blurLevel\n        : blurLevel === 'low'\n            ? 2\n            : blurLevel === 'medium'\n                ? 4\n                : 6;\n    const windowSize = Math.max(1, Math.floor(sigma * 3));\n    const offset = new Array(windowSize).fill(0).map((v, index) => index);\n    const variance = sigma ** 2;\n    const weights = offset.map((x) => {\n        const m = sigma * Math.sqrt(2 * Math.PI);\n        const e = Math.exp(-(x ** 2) / (2 * variance));\n        return e / m;\n    });\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform vec2 u_texelSize;\n\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    const float offset[${windowSize}] = float[](${offset.map((i) => i.toFixed(10)).join(', ')});\n    const float weight[${windowSize}] = float[](${weights.map((i) => i.toFixed(10)).join(', ')});\n\n    void main() {\n      vec4 centerColor = texture(u_inputFrame, v_texCoord);\n      float personMask = texture(u_personMask, v_texCoord).a;\n\n      vec4 frameColor = centerColor * weight[0] * (1.0 - personMask);\n\n      for (int i = 1; i < ${windowSize}; i++) {\n        vec2 offset = vec2(offset[i]) * u_texelSize;\n\n        vec2 texCoord = v_texCoord + offset;\n        frameColor += texture(u_inputFrame, texCoord)\n           * weight[i]\n           * (1.0 - texture(u_personMask, texCoord).a);\n\n        texCoord = v_texCoord - offset;\n        frameColor += texture(u_inputFrame, texCoord)\n          * weight[i]\n          * (1.0 - texture(u_personMask, texCoord).a);\n      }\n      outColor = vec4(frameColor.rgb + (1.0 - frameColor.a) * centerColor.rgb, 1.0);\n    }\n  `;\n    const scale = 0.5;\n    const outputWidth = canvas.width * scale;\n    const outputHeight = canvas.height * scale;\n    const texelWidth = 1 / outputWidth;\n    const texelHeight = 1 / outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize');\n    const texture1 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight, gl.NEAREST, \n    // @ts-expect-error types are incomplete\n    gl.LINEAR);\n    const texture2 = createTexture(gl, gl.RGBA8, outputWidth, outputHeight, gl.NEAREST, \n    // @ts-expect-error types are incomplete\n    gl.LINEAR);\n    const frameBuffer1 = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture1, 0);\n    const frameBuffer2 = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture2, 0);\n    gl.useProgram(program);\n    gl.uniform1i(personMaskLocation, 1);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.uniform1i(inputFrameLocation, 0);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, personMaskTexture);\n        for (let i = 0; i < 3; i++) {\n            gl.uniform2f(texelSizeLocation, 0, texelHeight);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer1);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, texture1);\n            gl.uniform1i(inputFrameLocation, 2);\n            gl.uniform2f(texelSizeLocation, texelWidth, 0);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer2);\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n            gl.bindTexture(gl.TEXTURE_2D, texture2);\n        }\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer2);\n        gl.deleteFramebuffer(frameBuffer1);\n        gl.deleteTexture(texture2);\n        gl.deleteTexture(texture1);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return {\n        render,\n        cleanUp,\n    };\n}\nfunction buildBlendPass(gl, positionBuffer, texCoordBuffer, canvas) {\n    const vertexShaderSource = glsl `#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_blurredInputFrame;\n    uniform vec2 u_coverage;\n\n    in vec2 v_texCoord;\n\n    out vec4 outColor;\n\n    void main() {\n      vec3 color = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 blurredColor = texture(u_blurredInputFrame, v_texCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(mix(blurredColor, color, personMask), 1.0);\n    }\n  `;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const blurredInputFrame = gl.getUniformLocation(program, 'u_blurredInputFrame');\n    const coverageLocation = gl.getUniformLocation(program, 'u_coverage');\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(personMaskLocation, 1);\n    gl.uniform1i(blurredInputFrame, 2);\n    gl.uniform2f(coverageLocation, 0, 1);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateCoverage(coverage) {\n        gl.useProgram(program);\n        gl.uniform2f(coverageLocation, coverage[0], coverage[1]);\n    }\n    function cleanUp() {\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n    }\n    return {\n        render,\n        updateCoverage,\n        cleanUp,\n    };\n}\n\nfunction buildBackgroundImageStage(gl, positionBuffer, texCoordBuffer, personMaskTexture, backgroundImage, canvas) {\n    const vertexShaderSource = glsl `#version 300 es\n\n    uniform vec2 u_backgroundScale;\n    uniform vec2 u_backgroundOffset;\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n\n    out vec2 v_texCoord;\n    out vec2 v_backgroundCoord;\n\n    void main() {\n      // Flipping Y is required when rendering to canvas\n      gl_Position = vec4(a_position * vec2(1.0, -1.0), 0.0, 1.0);\n      v_texCoord = a_texCoord;\n      v_backgroundCoord = a_texCoord * u_backgroundScale + u_backgroundOffset;\n    }\n  `;\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_personMask;\n    uniform sampler2D u_background;\n    uniform vec2 u_coverage;\n    uniform float u_lightWrapping;\n    uniform float u_blendMode;\n\n    in vec2 v_texCoord;\n    in vec2 v_backgroundCoord;\n\n    out vec4 outColor;\n\n    vec3 screen(vec3 a, vec3 b) {\n      return 1.0 - (1.0 - a) * (1.0 - b);\n    }\n\n    vec3 linearDodge(vec3 a, vec3 b) {\n      return a + b;\n    }\n\n    void main() {\n      vec3 frameColor = texture(u_inputFrame, v_texCoord).rgb;\n      vec3 backgroundColor = texture(u_background, v_backgroundCoord).rgb;\n      float personMask = texture(u_personMask, v_texCoord).a;\n      float lightWrapMask = 1.0 - max(0.0, personMask - u_coverage.y) / (1.0 - u_coverage.y);\n      vec3 lightWrap = u_lightWrapping * lightWrapMask * backgroundColor;\n\n      frameColor = u_blendMode * linearDodge(frameColor, lightWrap)\n        + (1.0 - u_blendMode) * screen(frameColor, lightWrap);\n      personMask = smoothstep(u_coverage.x, u_coverage.y, personMask);\n      outColor = vec4(frameColor * personMask + backgroundColor * (1.0 - personMask), 1.0);\n    }\n  `;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const outputRatio = outputWidth / outputHeight;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const backgroundScaleLocation = gl.getUniformLocation(program, 'u_backgroundScale');\n    const backgroundOffsetLocation = gl.getUniformLocation(program, 'u_backgroundOffset');\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const personMaskLocation = gl.getUniformLocation(program, 'u_personMask');\n    const backgroundLocation = gl.getUniformLocation(program, 'u_background');\n    const coverageLocation = gl.getUniformLocation(program, 'u_coverage');\n    const lightWrappingLocation = gl.getUniformLocation(program, 'u_lightWrapping');\n    const blendModeLocation = gl.getUniformLocation(program, 'u_blendMode');\n    gl.useProgram(program);\n    gl.uniform2f(backgroundScaleLocation, 1, 1);\n    gl.uniform2f(backgroundOffsetLocation, 0, 0);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(personMaskLocation, 1);\n    gl.uniform2f(coverageLocation, 0, 1);\n    gl.uniform1f(lightWrappingLocation, 0);\n    gl.uniform1f(blendModeLocation, 0);\n    let backgroundTexture = null;\n    // TODO Find a better to handle background being loaded\n    if (backgroundImage?.complete) {\n        updateBackgroundImage(backgroundImage);\n    }\n    else if (backgroundImage) {\n        backgroundImage.onload = () => {\n            updateBackgroundImage(backgroundImage);\n        };\n    }\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, personMaskTexture);\n        if (backgroundTexture !== null) {\n            gl.activeTexture(gl.TEXTURE2);\n            gl.bindTexture(gl.TEXTURE_2D, backgroundTexture);\n            // TODO Handle correctly the background not loaded yet\n            gl.uniform1i(backgroundLocation, 2);\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateBackgroundImage(bgImage) {\n        backgroundTexture = createTexture(gl, gl.RGBA8, bgImage.naturalWidth, bgImage.naturalHeight, \n        // @ts-expect-error types are incomplete\n        gl.LINEAR, gl.LINEAR);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, bgImage.naturalWidth, bgImage.naturalHeight, gl.RGBA, gl.UNSIGNED_BYTE, bgImage);\n        let xOffset = 0;\n        let yOffset = 0;\n        let backgroundWidth = bgImage.naturalWidth;\n        let backgroundHeight = bgImage.naturalHeight;\n        const backgroundRatio = backgroundWidth / backgroundHeight;\n        if (backgroundRatio < outputRatio) {\n            backgroundHeight = backgroundWidth / outputRatio;\n            yOffset = (bgImage.naturalHeight - backgroundHeight) / 2;\n        }\n        else {\n            backgroundWidth = backgroundHeight * outputRatio;\n            xOffset = (bgImage.naturalWidth - backgroundWidth) / 2;\n        }\n        const xScale = backgroundWidth / bgImage.naturalWidth;\n        const yScale = backgroundHeight / bgImage.naturalHeight;\n        xOffset /= bgImage.naturalWidth;\n        yOffset /= bgImage.naturalHeight;\n        gl.uniform2f(backgroundScaleLocation, xScale, yScale);\n        gl.uniform2f(backgroundOffsetLocation, xOffset, yOffset);\n    }\n    function updateCoverage(coverage) {\n        gl.useProgram(program);\n        gl.uniform2f(coverageLocation, coverage[0], coverage[1]);\n    }\n    function updateLightWrapping(lightWrapping) {\n        gl.useProgram(program);\n        gl.uniform1f(lightWrappingLocation, lightWrapping);\n    }\n    function updateBlendMode(blendMode) {\n        gl.useProgram(program);\n        gl.uniform1f(blendModeLocation, blendMode === 'screen' ? 0 : 1);\n    }\n    function cleanUp() {\n        gl.deleteTexture(backgroundTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n        gl.deleteShader(vertexShader);\n    }\n    return {\n        render,\n        updateCoverage,\n        updateLightWrapping,\n        updateBlendMode,\n        cleanUp,\n    };\n}\n\nfunction buildJointBilateralFilterStage(gl, vertexShader, positionBuffer, texCoordBuffer, inputTexture, outputTexture, canvas, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputFrame;\n    uniform sampler2D u_segmentationMask;\n    uniform vec2 u_texelSize;\n    uniform float u_step;\n    uniform float u_radius;\n    uniform float u_offset;\n    uniform float u_sigmaTexel;\n    uniform float u_sigmaColor;\n\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    float gaussian(float x, float sigma) {\n      float coeff = -0.5 / (sigma * sigma * 4.0 + 1.0e-6);\n      return exp((x * x) * coeff);\n    }\n\n    void main() {\n      vec2 centerCoord = v_texCoord;\n      vec3 centerColor = texture(u_inputFrame, centerCoord).rgb;\n      float newVal = 0.0;\n\n      float spaceWeight = 0.0;\n      float colorWeight = 0.0;\n      float totalWeight = 0.0;\n\n      // Subsample kernel space.\n      for (float i = -u_radius + u_offset; i <= u_radius; i += u_step) {\n        for (float j = -u_radius + u_offset; j <= u_radius; j += u_step) {\n          vec2 shift = vec2(j, i) * u_texelSize;\n          vec2 coord = vec2(centerCoord + shift);\n          vec3 frameColor = texture(u_inputFrame, coord).rgb;\n          float outVal = texture(u_segmentationMask, coord).a;\n\n          spaceWeight = gaussian(distance(centerCoord, coord), u_sigmaTexel);\n          colorWeight = gaussian(distance(centerColor, frameColor), u_sigmaColor);\n          totalWeight += spaceWeight * colorWeight;\n\n          newVal += spaceWeight * colorWeight * outVal;\n        }\n      }\n      newVal /= totalWeight;\n\n      outColor = vec4(vec3(0.0), newVal);\n    }\n  `;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const { width: outputWidth, height: outputHeight } = canvas;\n    const texelWidth = 1 / outputWidth;\n    const texelHeight = 1 / outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const segmentationMaskLocation = gl.getUniformLocation(program, 'u_segmentationMask');\n    const texelSizeLocation = gl.getUniformLocation(program, 'u_texelSize');\n    const stepLocation = gl.getUniformLocation(program, 'u_step');\n    const radiusLocation = gl.getUniformLocation(program, 'u_radius');\n    const offsetLocation = gl.getUniformLocation(program, 'u_offset');\n    const sigmaTexelLocation = gl.getUniformLocation(program, 'u_sigmaTexel');\n    const sigmaColorLocation = gl.getUniformLocation(program, 'u_sigmaColor');\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    gl.uniform1i(segmentationMaskLocation, 1);\n    gl.uniform2f(texelSizeLocation, texelWidth, texelHeight);\n    // Ensures default values are configured to prevent infinite\n    // loop in fragment shader\n    updateSigmaSpace(0);\n    updateSigmaColor(0);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function updateSigmaSpace(sigmaSpace) {\n        sigmaSpace *= Math.max(outputWidth / segmentationWidth, outputHeight / segmentationHeight);\n        const kSparsityFactor = 0.66; // Higher is sparser.\n        const step = Math.max(1, Math.sqrt(sigmaSpace) * kSparsityFactor);\n        const radius = sigmaSpace;\n        const offset = step > 1 ? step * 0.5 : 0;\n        const sigmaTexel = Math.max(texelWidth, texelHeight) * sigmaSpace;\n        gl.useProgram(program);\n        gl.uniform1f(stepLocation, step);\n        gl.uniform1f(radiusLocation, radius);\n        gl.uniform1f(offsetLocation, offset);\n        gl.uniform1f(sigmaTexelLocation, sigmaTexel);\n    }\n    function updateSigmaColor(sigmaColor) {\n        gl.useProgram(program);\n        gl.uniform1f(sigmaColorLocation, sigmaColor);\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, updateSigmaSpace, updateSigmaColor, cleanUp };\n}\n\nfunction buildResizingStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationConfig, onError) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n    uniform sampler2D u_inputFrame;\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    void main() {\n      outColor = texture(u_inputFrame, v_texCoord);\n    }\n  `;\n    // TFLite memory will be accessed as float32\n    const tfliteInputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    const { width: outputWidth, height: outputHeight } = segmentationConfig;\n    const outputPixelCount = outputWidth * outputHeight;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputFrameLocation = gl.getUniformLocation(program, 'u_inputFrame');\n    const outputTexture = createTexture(gl, gl.RGBA8, outputWidth, outputHeight);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    const outputPixels = new Uint8Array(outputPixelCount * 4);\n    gl.useProgram(program);\n    gl.uniform1i(inputFrameLocation, 0);\n    function render() {\n        gl.viewport(0, 0, outputWidth, outputHeight);\n        gl.useProgram(program);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        // Downloads pixels asynchronously from GPU while rendering the current frame.\n        // The pixels will be available in the next frame render which results\n        // in offsets in the segmentation output but increases the frame rate.\n        readPixelsAsync(gl, 0, 0, outputWidth, outputHeight, gl.RGBA, gl.UNSIGNED_BYTE, outputPixels).catch((error) => {\n        });\n        for (let i = 0; i < outputPixelCount; i++) {\n            const tfliteIndex = tfliteInputMemoryOffset + i * 3;\n            const outputIndex = i * 4;\n            tflite.HEAPF32[tfliteIndex] = outputPixels[outputIndex] / 255;\n            tflite.HEAPF32[tfliteIndex + 1] = outputPixels[outputIndex + 1] / 255;\n            tflite.HEAPF32[tfliteIndex + 2] = outputPixels[outputIndex + 2] / 255;\n        }\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteTexture(outputTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, cleanUp };\n}\n\nfunction buildSoftmaxStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, outputTexture, segmentationConfig) {\n    const fragmentShaderSource = glsl `#version 300 es\n\n    precision highp float;\n\n    uniform sampler2D u_inputSegmentation;\n    in vec2 v_texCoord;\n    out vec4 outColor;\n\n    void main() {\n      vec2 segmentation = texture(u_inputSegmentation, v_texCoord).rg;\n      float shift = max(segmentation.r, segmentation.g);\n      float backgroundExp = exp(segmentation.r - shift);\n      float personExp = exp(segmentation.g - shift);\n      outColor = vec4(vec3(0.0), personExp / (backgroundExp + personExp));\n    }\n  `;\n    // TFLite memory will be accessed as float32\n    const tfliteOutputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n    const program = createPipelineStageProgram(gl, vertexShader, fragmentShader, positionBuffer, texCoordBuffer);\n    const inputLocation = gl.getUniformLocation(program, 'u_inputSegmentation');\n    const inputTexture = createTexture(gl, gl.RG32F, segmentationWidth, segmentationHeight);\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);\n    gl.useProgram(program);\n    gl.uniform1i(inputLocation, 1);\n    function render() {\n        gl.viewport(0, 0, segmentationWidth, segmentationHeight);\n        gl.useProgram(program);\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, inputTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, segmentationWidth, segmentationHeight, gl.RG, gl.FLOAT, tflite.HEAPF32, tfliteOutputMemoryOffset);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n    }\n    function cleanUp() {\n        gl.deleteFramebuffer(frameBuffer);\n        gl.deleteTexture(inputTexture);\n        gl.deleteProgram(program);\n        gl.deleteShader(fragmentShader);\n    }\n    return { render, cleanUp };\n}\n\nfunction buildWebGL2Pipeline(videoSource, backgroundImage, blurLevel, backgroundFilter, canvas, tflite, segmentationConfig, onError) {\n    const gl = canvas.getContext('webgl2');\n    if (!gl)\n        throw new Error('WebGL2 is not supported');\n    if (gl.isContextLost())\n        throw new Error('WebGL2 context was lost');\n    const { width: frameWidth, height: frameHeight } = videoSource;\n    const { width: segmentationWidth, height: segmentationHeight } = segmentationConfig;\n    const vertexShaderSource = glsl `#version 300 es\n\n    in vec2 a_position;\n    in vec2 a_texCoord;\n    out vec2 v_texCoord;\n\n    void main() {\n      gl_Position = vec4(a_position, 0.0, 1.0);\n      v_texCoord = a_texCoord;\n    }\n  `;\n    const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n    const vertexArray = gl.createVertexArray();\n    gl.bindVertexArray(vertexArray);\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, 1.0, -1, -1, 1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    const texCoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0]), gl.STATIC_DRAW);\n    // We don't use texStorage2D here because texImage2D seems faster\n    // to upload video texture than texSubImage2D even though the latter\n    // is supposed to be the recommended way:\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_best_practices#use_texstorage_to_create_textures\n    const inputFrameTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    // TODO Rename segmentation and person mask to be more specific\n    const segmentationTexture = createTexture(gl, gl.RGBA8, segmentationWidth, segmentationHeight);\n    const personMaskTexture = createTexture(gl, gl.RGBA8, frameWidth, frameHeight);\n    const resizingStage = buildResizingStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationConfig);\n    const loadSegmentationStage = buildSoftmaxStage(gl, vertexShader, positionBuffer, texCoordBuffer, tflite, segmentationTexture, segmentationConfig);\n    const jointBilateralFilterStage = buildJointBilateralFilterStage(gl, vertexShader, positionBuffer, texCoordBuffer, segmentationTexture, personMaskTexture, canvas, segmentationConfig);\n    const backgroundStage = backgroundFilter === 'blur'\n        ? buildBackgroundBlurStage(gl, vertexShader, positionBuffer, texCoordBuffer, personMaskTexture, canvas, blurLevel || 'high')\n        : buildBackgroundImageStage(gl, positionBuffer, texCoordBuffer, personMaskTexture, backgroundImage, canvas);\n    function render() {\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, inputFrameTexture);\n        // texImage2D seems faster than texSubImage2D to upload\n        // video texture\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, videoSource);\n        gl.bindVertexArray(vertexArray);\n        resizingStage.render();\n        tflite._runInference();\n        loadSegmentationStage.render();\n        jointBilateralFilterStage.render();\n        backgroundStage.render();\n    }\n    function updatePostProcessingConfig() {\n        jointBilateralFilterStage.updateSigmaSpace(1);\n        jointBilateralFilterStage.updateSigmaColor(0.1);\n        if (backgroundFilter === 'image') {\n            const backgroundImageStage = backgroundStage;\n            backgroundImageStage.updateCoverage([0.5, 0.75]);\n            backgroundImageStage.updateLightWrapping(0.3);\n            backgroundImageStage.updateBlendMode('screen');\n        }\n        else if (backgroundFilter === 'blur') {\n            const backgroundBlurStage = backgroundStage;\n            backgroundBlurStage.updateCoverage([0.5, 0.75]);\n        }\n        else {\n            // TODO Handle no background in a separate pipeline path\n            const backgroundImageStage = backgroundStage;\n            backgroundImageStage.updateCoverage([0, 0.9999]);\n            backgroundImageStage.updateLightWrapping(0);\n        }\n    }\n    function cleanUp() {\n        backgroundStage.cleanUp();\n        jointBilateralFilterStage.cleanUp();\n        loadSegmentationStage.cleanUp();\n        resizingStage.cleanUp();\n        gl.deleteTexture(personMaskTexture);\n        gl.deleteTexture(segmentationTexture);\n        gl.deleteTexture(inputFrameTexture);\n        gl.deleteBuffer(texCoordBuffer);\n        gl.deleteBuffer(positionBuffer);\n        gl.deleteVertexArray(vertexArray);\n        gl.deleteShader(vertexShader);\n    }\n    return { render, updatePostProcessingConfig, cleanUp };\n}\n\nvar SegmentationLevel;\n(function (SegmentationLevel) {\n    SegmentationLevel[\"LOW\"] = \"low\";\n    SegmentationLevel[\"HIGH\"] = \"high\";\n})(SegmentationLevel || (SegmentationLevel = {}));\nconst getSegmentationParams = (level) => {\n    if (level === SegmentationLevel.HIGH) {\n        return { width: 256, height: 144 };\n    }\n    return { width: 160, height: 96 };\n};\n\nfunction createRenderer(tflite, videoSource, targetCanvas, options, onError) {\n    const { backgroundFilter, backgroundImage, backgroundBlurLevel, segmentationLevel = SegmentationLevel.HIGH, fps = 30, } = options;\n    if (backgroundFilter === 'image' && !backgroundImage) {\n        throw new Error(`backgroundImage element is required when backgroundFilter is image`);\n    }\n    const pipeline = buildWebGL2Pipeline(videoSource, backgroundImage, backgroundBlurLevel, backgroundFilter, targetCanvas, tflite, getSegmentationParams(segmentationLevel));\n    const id = setInterval(() => {\n        try {\n            pipeline.render();\n            if (backgroundFilter === 'image') {\n                pipeline.updatePostProcessingConfig();\n            }\n        }\n        catch (error) {\n            onError?.(error);\n        }\n    }, 1000 / (fps <= 0 ? 30 : fps));\n    return {\n        dispose: () => {\n            pipeline.cleanUp();\n            clearInterval(id);\n        },\n    };\n}\n\nconst createTFLiteSIMDModule = (__Module) => {\n  __Module = __Module || {};\n\n  var _scriptDir =\n    typeof document !== 'undefined' && document.currentScript\n      ? document.currentScript.src\n      : undefined;\n\n  var Module = typeof __Module != 'undefined' ? __Module : {};\n  var readyPromiseResolve, readyPromiseReject;\n  Module['ready'] = new Promise(function (resolve, reject) {\n    readyPromiseResolve = resolve;\n    readyPromiseReject = reject;\n  });\n  var moduleOverrides = Object.assign({}, Module);\n  var thisProgram = './this.program';\n  var quit_ = (status, toThrow) => {\n    throw toThrow;\n  };\n  var ENVIRONMENT_IS_WEB = true;\n  var scriptDirectory = '';\n\n  function locateFile(path) {\n    if (Module['locateFile']) {\n      return Module['locateFile'](path, scriptDirectory);\n    }\n    return scriptDirectory + path;\n  }\n\n  var readBinary;\n  {\n    if (typeof document != 'undefined' && document.currentScript) {\n      scriptDirectory = document.currentScript.src;\n    }\n    if (_scriptDir) {\n      scriptDirectory = _scriptDir;\n    }\n    if (scriptDirectory.indexOf('blob:') !== 0) {\n      scriptDirectory = scriptDirectory.substr(\n        0,\n        scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1,\n      );\n    } else {\n      scriptDirectory = '';\n    }\n  }\n  var out = Module['print'] || console.log.bind(console);\n  var err = Module['printErr'] || console.warn.bind(console);\n  Object.assign(Module, moduleOverrides);\n  moduleOverrides = null;\n  if (Module['arguments']) Module['arguments'];\n  if (Module['thisProgram']) thisProgram = Module['thisProgram'];\n  if (Module['quit']) quit_ = Module['quit'];\n  var wasmBinary;\n  if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];\n  Module['noExitRuntime'] || true;\n  if (typeof WebAssembly != 'object') {\n    abort('no native wasm support detected');\n  }\n  var wasmMemory;\n  var ABORT = false;\n\n  var UTF8Decoder =\n    typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n\n  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n    var endIdx = idx + maxBytesToRead;\n    var endPtr = idx;\n    while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n    if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n      return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n    }\n    var str = '';\n    while (idx < endPtr) {\n      var u0 = heapOrArray[idx++];\n      if (!(u0 & 128)) {\n        str += String.fromCharCode(u0);\n        continue;\n      }\n      var u1 = heapOrArray[idx++] & 63;\n      if ((u0 & 224) == 192) {\n        str += String.fromCharCode(((u0 & 31) << 6) | u1);\n        continue;\n      }\n      var u2 = heapOrArray[idx++] & 63;\n      if ((u0 & 240) == 224) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        u0 =\n          ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n      }\n      if (u0 < 65536) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 65536;\n        str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));\n      }\n    }\n    return str;\n  }\n\n  var buffer, HEAP8, HEAPU8, HEAPU32;\n\n  function updateGlobalBufferAndViews(buf) {\n    buffer = buf;\n    Module['HEAP8'] = HEAP8 = new Int8Array(buf);\n    Module['HEAP16'] = new Int16Array(buf);\n    Module['HEAP32'] = new Int32Array(buf);\n    Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);\n    Module['HEAPU16'] = new Uint16Array(buf);\n    Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);\n    Module['HEAPF32'] = new Float32Array(buf);\n    Module['HEAPF64'] = new Float64Array(buf);\n  }\n\n  Module['INITIAL_MEMORY'] || 16777216;\n  var __ATPRERUN__ = [];\n  var __ATINIT__ = [];\n  var __ATPOSTRUN__ = [];\n\n  function preRun() {\n    if (Module['preRun']) {\n      if (typeof Module['preRun'] == 'function')\n        Module['preRun'] = [Module['preRun']];\n      while (Module['preRun'].length) {\n        addOnPreRun(Module['preRun'].shift());\n      }\n    }\n    callRuntimeCallbacks(__ATPRERUN__);\n  }\n\n  function initRuntime() {\n    callRuntimeCallbacks(__ATINIT__);\n  }\n\n  function postRun() {\n    if (Module['postRun']) {\n      if (typeof Module['postRun'] == 'function')\n        Module['postRun'] = [Module['postRun']];\n      while (Module['postRun'].length) {\n        addOnPostRun(Module['postRun'].shift());\n      }\n    }\n    callRuntimeCallbacks(__ATPOSTRUN__);\n  }\n\n  function addOnPreRun(cb) {\n    __ATPRERUN__.unshift(cb);\n  }\n\n  function addOnInit(cb) {\n    __ATINIT__.unshift(cb);\n  }\n\n  function addOnPostRun(cb) {\n    __ATPOSTRUN__.unshift(cb);\n  }\n\n  var runDependencies = 0;\n  var dependenciesFulfilled = null;\n\n  function addRunDependency(id) {\n    runDependencies++;\n    if (Module['monitorRunDependencies']) {\n      Module['monitorRunDependencies'](runDependencies);\n    }\n  }\n\n  function removeRunDependency(id) {\n    runDependencies--;\n    if (Module['monitorRunDependencies']) {\n      Module['monitorRunDependencies'](runDependencies);\n    }\n    if (runDependencies == 0) {\n      if (dependenciesFulfilled) {\n        var callback = dependenciesFulfilled;\n        dependenciesFulfilled = null;\n        callback();\n      }\n    }\n  }\n\n  function abort(what) {\n    {\n      if (Module['onAbort']) {\n        Module['onAbort'](what);\n      }\n    }\n    what = 'Aborted(' + what + ')';\n    err(what);\n    ABORT = true;\n    what += '. Build with -sASSERTIONS for more info.';\n    var e = new WebAssembly.RuntimeError(what);\n    readyPromiseReject(e);\n    throw e;\n  }\n\n  var dataURIPrefix = 'data:application/octet-stream;base64,';\n\n  function isDataURI(filename) {\n    return filename.startsWith(dataURIPrefix);\n  }\n\n  var wasmBinaryFile;\n  wasmBinaryFile = 'tflite-simd.wasm';\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n\n  function getBinary(file) {\n    try {\n      if (file == wasmBinaryFile && wasmBinary) {\n        return new Uint8Array(wasmBinary);\n      }\n      if (readBinary) ;\n      throw 'both async and sync fetching of the wasm failed';\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n    } catch (err) {\n      abort(err);\n    }\n  }\n\n  function getBinaryPromise() {\n    if (!wasmBinary && (ENVIRONMENT_IS_WEB)) {\n      if (typeof fetch == 'function') {\n        return fetch(wasmBinaryFile, { credentials: 'same-origin' })\n          .then(function (response) {\n            if (!response['ok']) {\n              throw (\n                \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\"\n              );\n            }\n            return response['arrayBuffer']();\n          })\n          .catch(function () {\n            return getBinary(wasmBinaryFile);\n          });\n      }\n    }\n    return Promise.resolve().then(function () {\n      return getBinary(wasmBinaryFile);\n    });\n  }\n\n  function createWasm() {\n    var info = {\n      env: asmLibraryArg,\n      wasi_snapshot_preview1: asmLibraryArg,\n    };\n\n    function receiveInstance(instance, module) {\n      var exports = instance.exports;\n      Module['asm'] = exports;\n      wasmMemory = Module['asm']['memory'];\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      Module['asm']['__indirect_function_table'];\n      addOnInit(Module['asm']['__wasm_call_ctors']);\n      removeRunDependency();\n    }\n\n    addRunDependency();\n\n    function receiveInstantiationResult(result) {\n      receiveInstance(result['instance']);\n    }\n\n    function instantiateArrayBuffer(receiver) {\n      return getBinaryPromise()\n        .then(function (binary) {\n          return WebAssembly.instantiate(binary, info);\n        })\n        .then(function (instance) {\n          return instance;\n        })\n        .then(receiver, function (reason) {\n          err('failed to asynchronously prepare wasm: ' + reason);\n          abort(reason);\n        });\n    }\n\n    function instantiateAsync() {\n      if (\n        !wasmBinary &&\n        typeof WebAssembly.instantiateStreaming == 'function' &&\n        !isDataURI(wasmBinaryFile) &&\n        typeof fetch == 'function'\n      ) {\n        return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(\n          function (response) {\n            var result = WebAssembly.instantiateStreaming(response, info);\n            return result.then(receiveInstantiationResult, function (reason) {\n              err('wasm streaming compile failed: ' + reason);\n              err('falling back to ArrayBuffer instantiation');\n              return instantiateArrayBuffer(receiveInstantiationResult);\n            });\n          },\n        );\n      } else {\n        return instantiateArrayBuffer(receiveInstantiationResult);\n      }\n    }\n\n    if (Module['instantiateWasm']) {\n      try {\n        var exports = Module['instantiateWasm'](info, receiveInstance);\n        return exports;\n      } catch (e) {\n        err('Module.instantiateWasm callback failed with error: ' + e);\n        readyPromiseReject(e);\n      }\n    }\n    instantiateAsync().catch(readyPromiseReject);\n    return {};\n  }\n\n  function ExitStatus(status) {\n    this.name = 'ExitStatus';\n    this.message = 'Program terminated with exit(' + status + ')';\n    this.status = status;\n  }\n\n  function callRuntimeCallbacks(callbacks) {\n    while (callbacks.length > 0) {\n      callbacks.shift()(Module);\n    }\n  }\n\n  function __dlinit(main_dso_handle) {}\n\n  var dlopenMissingError =\n    'To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking';\n\n  function __dlopen_js(filename, flag) {\n    abort(dlopenMissingError);\n  }\n\n  function __dlsym_js(handle, symbol) {\n    abort(dlopenMissingError);\n  }\n\n  var nowIsMonotonic = true;\n\n  function __emscripten_get_now_is_monotonic() {\n    return nowIsMonotonic;\n  }\n\n  function __mmap_js(len, prot, flags, fd, off, allocated) {\n    return -52;\n  }\n\n  function __munmap_js(addr, len, prot, flags, fd, offset) {}\n\n  function _abort() {\n    abort('');\n  }\n\n  function _emscripten_date_now() {\n    return Date.now();\n  }\n\n  function getHeapMax() {\n    return 2147483648;\n  }\n\n  function _emscripten_get_heap_max() {\n    return getHeapMax();\n  }\n\n  var _emscripten_get_now;\n  _emscripten_get_now = () => performance.now();\n\n  function _emscripten_memcpy_big(dest, src, num) {\n    HEAPU8.copyWithin(dest, src, src + num);\n  }\n\n  function emscripten_realloc_buffer(size) {\n    try {\n      wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16);\n      updateGlobalBufferAndViews(wasmMemory.buffer);\n      return 1;\n    } catch (e) {}\n  }\n\n  function _emscripten_resize_heap(requestedSize) {\n    var oldSize = HEAPU8.length;\n    requestedSize = requestedSize >>> 0;\n    var maxHeapSize = getHeapMax();\n    if (requestedSize > maxHeapSize) {\n      return false;\n    }\n    let alignUp = (x, multiple) => x + ((multiple - (x % multiple)) % multiple);\n    for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n      var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n      overGrownHeapSize = Math.min(\n        overGrownHeapSize,\n        requestedSize + 100663296,\n      );\n      var newSize = Math.min(\n        maxHeapSize,\n        alignUp(Math.max(requestedSize, overGrownHeapSize), 65536),\n      );\n      var replacement = emscripten_realloc_buffer(newSize);\n      if (replacement) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var ENV = {};\n\n  function getExecutableName() {\n    return thisProgram || './this.program';\n  }\n\n  function getEnvStrings() {\n    if (!getEnvStrings.strings) {\n      var lang =\n        (\n          (typeof navigator == 'object' &&\n            navigator.languages &&\n            navigator.languages[0]) ||\n          'C'\n        ).replace('-', '_') + '.UTF-8';\n      var env = {\n        USER: 'web_user',\n        LOGNAME: 'web_user',\n        PATH: '/',\n        PWD: '/',\n        HOME: '/home/web_user',\n        LANG: lang,\n        _: getExecutableName(),\n      };\n      for (var x in ENV) {\n        if (ENV[x] === undefined) delete env[x];\n        else env[x] = ENV[x];\n      }\n      var strings = [];\n      for (var x in env) {\n        strings.push(x + '=' + env[x]);\n      }\n      getEnvStrings.strings = strings;\n    }\n    return getEnvStrings.strings;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function writeAsciiToMemory(str, buffer, dontAddNull) {\n    for (var i = 0; i < str.length; ++i) {\n      HEAP8[buffer++ >> 0] = str.charCodeAt(i);\n    }\n    HEAP8[buffer >> 0] = 0;\n  }\n\n  function _environ_get(__environ, environ_buf) {\n    var bufSize = 0;\n    getEnvStrings().forEach(function (string, i) {\n      var ptr = environ_buf + bufSize;\n      HEAPU32[(__environ + i * 4) >> 2] = ptr;\n      writeAsciiToMemory(string, ptr);\n      bufSize += string.length + 1;\n    });\n    return 0;\n  }\n\n  function _environ_sizes_get(penviron_count, penviron_buf_size) {\n    var strings = getEnvStrings();\n    HEAPU32[penviron_count >> 2] = strings.length;\n    var bufSize = 0;\n    strings.forEach(function (string) {\n      bufSize += string.length + 1;\n    });\n    HEAPU32[penviron_buf_size >> 2] = bufSize;\n    return 0;\n  }\n\n  function _proc_exit(code) {\n    quit_(code, new ExitStatus(code));\n  }\n\n  function exitJS(status, implicit) {\n    _proc_exit(status);\n  }\n\n  var _exit = exitJS;\n\n  function _fd_close(fd) {\n    return 52;\n  }\n\n  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n    return 70;\n  }\n\n  var printCharBuffers = [null, [], []];\n\n  function printChar(stream, curr) {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    var buffer = printCharBuffers[stream];\n    if (curr === 0 || curr === 10) {\n      (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n      buffer.length = 0;\n    } else {\n      buffer.push(curr);\n    }\n  }\n\n  function _fd_write(fd, iov, iovcnt, pnum) {\n    var num = 0;\n    for (var i = 0; i < iovcnt; i++) {\n      var ptr = HEAPU32[iov >> 2];\n      var len = HEAPU32[(iov + 4) >> 2];\n      iov += 8;\n      for (var j = 0; j < len; j++) {\n        printChar(fd, HEAPU8[ptr + j]);\n      }\n      num += len;\n    }\n    HEAPU32[pnum >> 2] = num;\n    return 0;\n  }\n\n  function getRandomDevice() {\n    if (\n      typeof crypto == 'object' &&\n      typeof crypto['getRandomValues'] == 'function'\n    ) {\n      var randomBuffer = new Uint8Array(1);\n      return () => {\n        crypto.getRandomValues(randomBuffer);\n        return randomBuffer[0];\n      };\n    } else return () => abort('randomDevice');\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function _getentropy(buffer, size) {\n    if (!_getentropy.randomDevice) {\n      _getentropy.randomDevice = getRandomDevice();\n    }\n    for (var i = 0; i < size; i++) {\n      HEAP8[(buffer + i) >> 0] = _getentropy.randomDevice();\n    }\n    return 0;\n  }\n\n  var asmLibraryArg = {\n    _dlinit: __dlinit,\n    _dlopen_js: __dlopen_js,\n    _dlsym_js: __dlsym_js,\n    _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n    _mmap_js: __mmap_js,\n    _munmap_js: __munmap_js,\n    abort: _abort,\n    emscripten_date_now: _emscripten_date_now,\n    emscripten_get_heap_max: _emscripten_get_heap_max,\n    emscripten_get_now: _emscripten_get_now,\n    emscripten_memcpy_big: _emscripten_memcpy_big,\n    emscripten_resize_heap: _emscripten_resize_heap,\n    environ_get: _environ_get,\n    environ_sizes_get: _environ_sizes_get,\n    exit: _exit,\n    fd_close: _fd_close,\n    fd_seek: _fd_seek,\n    fd_write: _fd_write,\n    getentropy: _getentropy,\n  };\n  createWasm();\n  (Module['___wasm_call_ctors'] = function () {\n    return (Module['___wasm_call_ctors'] =\n      Module['asm']['__wasm_call_ctors']).apply(null, arguments);\n  });\n  (Module['_getModelBufferMemoryOffset'] =\n    function () {\n      return (Module[\n        '_getModelBufferMemoryOffset'\n      ] =\n        Module['asm']['getModelBufferMemoryOffset']).apply(null, arguments);\n    });\n  (Module['_getInputMemoryOffset'] = function () {\n    return (Module['_getInputMemoryOffset'] =\n      Module['asm']['getInputMemoryOffset']).apply(null, arguments);\n  });\n  (Module['_getInputHeight'] = function () {\n    return (Module['_getInputHeight'] =\n      Module['asm']['getInputHeight']).apply(null, arguments);\n  });\n  (Module['_getInputWidth'] = function () {\n    return (Module['_getInputWidth'] =\n      Module['asm']['getInputWidth']).apply(null, arguments);\n  });\n  (Module['_getInputChannelCount'] = function () {\n    return (Module['_getInputChannelCount'] =\n      Module['asm']['getInputChannelCount']).apply(null, arguments);\n  });\n  (Module['_getOutputMemoryOffset'] = function () {\n    return (Module['_getOutputMemoryOffset'] =\n      Module['asm']['getOutputMemoryOffset']).apply(null, arguments);\n  });\n  (Module['_getOutputHeight'] = function () {\n    return (Module['_getOutputHeight'] =\n      Module['asm']['getOutputHeight']).apply(null, arguments);\n  });\n  (Module['_getOutputWidth'] = function () {\n    return (Module['_getOutputWidth'] =\n      Module['asm']['getOutputWidth']).apply(null, arguments);\n  });\n  (Module['_getOutputChannelCount'] = function () {\n    return (Module['_getOutputChannelCount'] =\n      Module['asm']['getOutputChannelCount']).apply(null, arguments);\n  });\n  (Module['_loadModel'] = function () {\n    return (Module['_loadModel'] =\n      Module['asm']['loadModel']).apply(null, arguments);\n  });\n  (Module['_runInference'] = function () {\n    return (Module['_runInference'] =\n      Module['asm']['runInference']).apply(null, arguments);\n  });\n  (Module['_malloc'] = function () {\n    return (Module['_malloc'] = Module['asm']['malloc']).apply(\n      null,\n      arguments,\n    );\n  });\n  (Module['___errno_location'] = function () {\n    return (Module['___errno_location'] =\n      Module['asm']['__errno_location']).apply(null, arguments);\n  });\n  (Module['___dl_seterr'] = function () {\n    return (Module['___dl_seterr'] =\n      Module['asm']['__dl_seterr']).apply(null, arguments);\n  });\n  (Module['stackSave'] = function () {\n    return (Module['stackSave'] = Module['asm']['stackSave']).apply(\n      null,\n      arguments,\n    );\n  });\n  (Module['stackRestore'] = function () {\n    return (Module['stackRestore'] =\n      Module['asm']['stackRestore']).apply(null, arguments);\n  });\n  (Module['stackAlloc'] = function () {\n    return (Module['stackAlloc'] =\n      Module['asm']['stackAlloc']).apply(null, arguments);\n  });\n  (Module['dynCall_jjj'] = function () {\n    return (Module['dynCall_jjj'] =\n      Module['asm']['dynCall_jjj']).apply(null, arguments);\n  });\n  (Module['dynCall_jiii'] = function () {\n    return (Module['dynCall_jiii'] =\n      Module['asm']['dynCall_jiii']).apply(null, arguments);\n  });\n  (Module['dynCall_iiiijj'] = function () {\n    return (Module['dynCall_iiiijj'] =\n      Module['asm']['dynCall_iiiijj']).apply(null, arguments);\n  });\n  (Module['dynCall_viijj'] = function () {\n    return (Module['dynCall_viijj'] =\n      Module['asm']['dynCall_viijj']).apply(null, arguments);\n  });\n  (Module['dynCall_viiijjj'] = function () {\n    return (Module['dynCall_viiijjj'] =\n      Module['asm']['dynCall_viiijjj']).apply(null, arguments);\n  });\n  (Module['dynCall_iijjiiii'] = function () {\n    return (Module['dynCall_iijjiiii'] =\n      Module['asm']['dynCall_iijjiiii']).apply(null, arguments);\n  });\n  (Module['dynCall_jiji'] = function () {\n    return (Module['dynCall_jiji'] =\n      Module['asm']['dynCall_jiji']).apply(null, arguments);\n  });\n  var calledRun;\n  dependenciesFulfilled = function runCaller() {\n    if (!calledRun) run();\n    if (!calledRun) dependenciesFulfilled = runCaller;\n  };\n\n  function run(args) {\n    if (runDependencies > 0) {\n      return;\n    }\n    preRun();\n    if (runDependencies > 0) {\n      return;\n    }\n\n    function doRun() {\n      if (calledRun) return;\n      calledRun = true;\n      Module['calledRun'] = true;\n      if (ABORT) return;\n      initRuntime();\n      readyPromiseResolve(Module);\n      if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n      postRun();\n    }\n\n    if (Module['setStatus']) {\n      Module['setStatus']('Running...');\n      setTimeout(function () {\n        setTimeout(function () {\n          Module['setStatus']('');\n        }, 1);\n        doRun();\n      }, 1);\n    } else {\n      doRun();\n    }\n  }\n\n  if (Module['preInit']) {\n    if (typeof Module['preInit'] == 'function')\n      Module['preInit'] = [Module['preInit']];\n    while (Module['preInit'].length > 0) {\n      Module['preInit'].pop()();\n    }\n  }\n  run();\n\n  return __Module.ready;\n};\n\nconst version = \"0.2.1\";\nconst packageName = \"@stream-io/video-filters-web\";\n\n// @ts-expect-error - module is not declared\n// This is a WebAssembly module compiled from the TensorFlow Lite C++ library.\nconst createTFLite = createTFLiteSIMDModule;\nconst loadTFLite = async (options = {}) => {\n    const { basePath = `https://unpkg.com/${packageName}@${version}/tf`, tfFilePath = `${basePath}/tflite/tflite-simd.wasm`, modelFilePath = `${basePath}/models/segm_full_v679.tflite`, } = options;\n    const [tfLite, model] = await Promise.all([\n        createTFLite({ locateFile: () => tfFilePath }),\n        fetchModel(modelFilePath),\n    ]);\n    const modelBufferOffset = tfLite._getModelBufferMemoryOffset();\n    tfLite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tfLite._loadModel(model.byteLength);\n    return tfLite;\n};\nlet lastModelFilePath = '';\nlet modelFileCache;\nconst fetchModel = async (modelFilePath) => {\n    const model = modelFilePath === lastModelFilePath && modelFileCache\n        ? modelFileCache\n        : await fetch(modelFilePath).then((r) => r.arrayBuffer());\n    // Cache the model file for future use.\n    modelFileCache = model;\n    lastModelFilePath = modelFilePath;\n    return model;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-bindings/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Restricted: () => (/* binding */ Restricted),\n/* harmony export */   StreamCallProvider: () => (/* binding */ StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* binding */ StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* binding */ StreamI18nProvider),\n/* harmony export */   StreamVideoProvider: () => (/* binding */ StreamVideoProvider),\n/* harmony export */   defaultTranslationFunction: () => (/* binding */ defaultTranslationFunction),\n/* harmony export */   useCall: () => (/* binding */ useCall),\n/* harmony export */   useCallStateHooks: () => (/* binding */ useCallStateHooks),\n/* harmony export */   useCalls: () => (/* binding */ useCalls),\n/* harmony export */   useConnectedUser: () => (/* binding */ useConnectedUser),\n/* harmony export */   useI18n: () => (/* binding */ useI18n),\n/* harmony export */   useObservableValue: () => (/* binding */ useObservableValue),\n/* harmony export */   useStore: () => (/* binding */ useStore),\n/* harmony export */   useStreamVideoClient: () => (/* binding */ useStreamVideoClient),\n/* harmony export */   useToggleCallRecording: () => (/* binding */ useToggleCallRecording)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! i18next */ \"(ssr)/./node_modules/i18next/dist/esm/i18next.js\");\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nconst StreamCallContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * A provider for the call object.\n */\nconst StreamCallProvider = (props) => {\n    const { call, children } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamCallContext.Provider, { value: call, children: children }));\n};\n/**\n * A hook to get the call object from the closest provider.\n */\nconst useCall = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamCallContext);\n};\n\nconst mapToRegistry = (translationsMap, namespace) => Object.entries(translationsMap).reduce((acc, [lng, translations]) => {\n    acc[lng] = { [namespace]: translations };\n    return acc;\n}, {});\nconst defaultTranslationFunction = (key) => key;\nclass StreamI18n {\n    constructor({ debug = false, currentLanguage = 'en', fallbackLanguage, translationsOverrides = { en: {} }, } = {}) {\n        /** Translator function that converts the provided string into its equivalent in the current language. */\n        this.t = defaultTranslationFunction;\n        this.init = async () => {\n            this.t = await this.i18nInstance.init();\n            return this.t;\n        };\n        this.changeLanguage = async (language) => {\n            this.t = await this.i18nInstance.changeLanguage(language);\n            return this.t;\n        };\n        const ns = 'stream-video';\n        this.i18nInstance = i18next__WEBPACK_IMPORTED_MODULE_2__[\"default\"].createInstance({\n            debug,\n            defaultNS: ns,\n            fallbackLng: fallbackLanguage,\n            interpolation: { escapeValue: false },\n            keySeparator: false,\n            lng: currentLanguage,\n            nsSeparator: false,\n            parseMissingKeyHandler: defaultTranslationFunction,\n            resources: mapToRegistry(translationsOverrides, ns),\n        });\n    }\n    get currentLanguage() {\n        return this.i18nInstance.language;\n    }\n    get isInitialized() {\n        return this.i18nInstance.isInitialized;\n    }\n}\n\nconst StreamI18nContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    t: defaultTranslationFunction,\n});\nconst StreamI18nProvider = ({ children, ...createI18nParams }) => {\n    const api = useCreateI18n(createI18nParams);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nContext.Provider, { value: api, children: children }));\n};\nconst useCreateI18n = ({ i18nInstance, language, fallbackLanguage, translationsOverrides, }) => {\n    const [i18n] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => i18nInstance ||\n        new StreamI18n({\n            currentLanguage: language,\n            fallbackLanguage,\n            translationsOverrides,\n        }));\n    const [t, setTranslationFn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => i18n.t);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        if (!i18n.isInitialized) {\n            i18n.init().then(() => setTranslationFn(() => i18n.t));\n        }\n        else if (i18n.currentLanguage !== language) {\n            i18n.changeLanguage(language).then(() => setTranslationFn(() => i18n.t));\n        }\n    }, [i18n, language]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({ i18n, t }), [i18n, t]);\n};\n/**\n * A hook to get the i18n instance and translation function from the closest provider.\n *\n * Example usage:\n * const { t, i18n } = useI18n();\n * const message = t('hello_world');\n * console.log(message);\n */\nconst useI18n = () => (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamI18nContext);\n\nconst StreamVideoContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n/**\n * StreamVideo is a provider component which should be used to wrap the entire application.\n * It provides the client object to all children components and initializes the i18n instance.\n */\nconst StreamVideoProvider = ({ children, client, i18nInstance, language, translationsOverrides, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamVideoContext.Provider, { value: client, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(StreamI18nProvider, { i18nInstance: i18nInstance, language: language, translationsOverrides: translationsOverrides, children: children }) }));\n};\n/**\n * Hook to access the nearest StreamVideo client instance.\n */\nconst useStreamVideoClient = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StreamVideoContext);\n};\n\n/**\n * Checks whether we are using React Native\n */\nconst isReactNative = () => {\n    if (typeof navigator === 'undefined')\n        return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n\n/**\n * Utility hook which provides the current value of the given observable.\n *\n * @param observable$ the observable to read data from.\n * @param defaultValue a default value. Used when the observable data can't be read or emits an error.\n */\nconst useObservableValue = (observable$, defaultValue) => {\n    const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => {\n        try {\n            return _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.RxUtils.getCurrentValue(observable$);\n        }\n        catch (err) {\n            if (typeof defaultValue === 'undefined')\n                throw err;\n            return defaultValue;\n        }\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        return _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.RxUtils.createSubscription(observable$, setValue, (err) => {\n            console.log('An error occurred while reading an observable', err);\n            if (defaultValue)\n                setValue(defaultValue);\n        });\n    }, [defaultValue, observable$]);\n    return value;\n};\n\n// kind-of memoized, used as a default value\nconst EMPTY_DEVICES_ARRAY = Object.freeze([]);\n/**\n * Utility hook, which provides the current call's state.\n */\nconst useCallState = () => {\n    const call = useCall();\n    // return an empty and unlinked CallState object if there is no call in the provider\n    // this ensures that the hooks always return a value and many null checks can be avoided\n    if (!call) {\n        const message = 'You are using useCallState() outside a Call context. ' +\n            'Please wrap your component in <StreamCall /> and provide a \"call\" instance.';\n        console.warn(message);\n        return new _stream_io_video_client__WEBPACK_IMPORTED_MODULE_3__.CallState();\n    }\n    return call.state;\n};\n/**\n * Utility hook which provides information whether the current call is being recorded. It will return `true` if the call is being recorded.\n */\nconst useIsCallRecordingInProgress = () => {\n    const { recording$ } = useCallState();\n    return useObservableValue(recording$);\n};\n/**\n * Utility hook which provides information whether the current call is broadcasting.\n */\nconst useIsCallHLSBroadcastingInProgress = () => {\n    const { egress$ } = useCallState();\n    const egress = useObservableValue(egress$);\n    if (!egress)\n        return false;\n    return egress.broadcasting;\n};\n/**\n * Utility hook which provides information whether the current call is live.\n */\nconst useIsCallLive = () => {\n    const { backstage$ } = useCallState();\n    const isBackstageOn = useObservableValue(backstage$);\n    return !isBackstageOn;\n};\n/**\n * Returns the list of blocked users in the current call.\n */\nconst useCallBlockedUserIds = () => {\n    const { blockedUserIds$ } = useCallState();\n    return useObservableValue(blockedUserIds$);\n};\n/**\n * Returns the timestamp when this call was created.\n */\nconst useCallCreatedAt = () => {\n    const { createdAt$ } = useCallState();\n    return useObservableValue(createdAt$);\n};\n/**\n * Returns the timestamp when this call was ended.\n */\nconst useCallEndedAt = () => {\n    const { endedAt$ } = useCallState();\n    return useObservableValue(endedAt$);\n};\n/**\n * Returns the timestamp telling when the call is scheduled to start.\n */\nconst useCallStartsAt = () => {\n    const { startsAt$ } = useCallState();\n    return useObservableValue(startsAt$);\n};\n/**\n * Returns the timestamp when this call was updated.\n */\nconst useCallUpdatedAt = () => {\n    const { updatedAt$ } = useCallState();\n    return useObservableValue(updatedAt$);\n};\n/**\n * Returns the information about the call's creator.\n */\nconst useCallCreatedBy = () => {\n    const { createdBy$ } = useCallState();\n    return useObservableValue(createdBy$);\n};\n/**\n * Returns the call's custom data.\n */\nconst useCallCustomData = () => {\n    const { custom$ } = useCallState();\n    return useObservableValue(custom$);\n};\n/**\n * Returns the call's Egress information.\n */\nconst useCallEgress = () => {\n    const { egress$ } = useCallState();\n    return useObservableValue(egress$);\n};\n/**\n * Returns the call's Ingress information.\n */\nconst useCallIngress = () => {\n    const { ingress$ } = useCallState();\n    return useObservableValue(ingress$);\n};\n/**\n * Returns the data for the current call session.\n */\nconst useCallSession = () => {\n    const { session$ } = useCallState();\n    return useObservableValue(session$);\n};\n/**\n * Returns the call's settings.\n */\nconst useCallSettings = () => {\n    const { settings$ } = useCallState();\n    return useObservableValue(settings$);\n};\n/**\n * Returns whether the call has transcribing enabled.\n */\nconst useIsCallTranscribingInProgress = () => {\n    const { transcribing$ } = useCallState();\n    return useObservableValue(transcribing$);\n};\n/**\n * Returns information about the user who has marked this call as ended.\n */\nconst useCallEndedBy = () => {\n    const { endedBy$ } = useCallState();\n    return useObservableValue(endedBy$);\n};\n/**\n * Utility hook which provides a boolean indicating whether there is\n * a participant in the current call which shares their screen.\n */\nconst useHasOngoingScreenShare = () => {\n    const { hasOngoingScreenShare$ } = useCallState();\n    return useObservableValue(hasOngoingScreenShare$);\n};\n/**\n * Utility hook which provides the latest stats report of the current call.\n *\n * The latest stats report of the current call.\n * When stats gathering is enabled, this observable will emit a new value\n * at a regular (configurable) interval.\n *\n * Consumers of this observable can implement their own batching logic\n * in case they want to show historical stats data.\n */\nconst useCallStatsReport = () => {\n    const { callStatsReport$ } = useCallState();\n    return useObservableValue(callStatsReport$);\n};\n/**\n * Utility hook which provides the dominant speaker of the current call.\n */\nconst useDominantSpeaker = () => {\n    const { dominantSpeaker$ } = useCallState();\n    return useObservableValue(dominantSpeaker$);\n};\n/**\n * Utility hook which provides a list of call members.\n */\nconst useCallMembers = () => {\n    const { members$ } = useCallState();\n    return useObservableValue(members$);\n};\n/**\n * Utility hook providing the current calling state of the call. For example, `RINGING` or `JOINED`.\n */\nconst useCallCallingState = () => {\n    const { callingState$ } = useCallState();\n    return useObservableValue(callingState$);\n};\n/**\n * Utility hook providing the actual start time of the current session.\n * Useful for calculating the call duration.\n */\nconst useCallStartedAt = () => {\n    const { startedAt$ } = useCallState();\n    return useObservableValue(startedAt$);\n};\n/**\n * A hook which provides a list of all participants that have joined an active call.\n *\n * @param options.sortBy - A comparator function to sort the participants by.\n * Make sure to memoize output of the `combineComparators` function\n * (or keep it out of component's scope if possible) before passing it down to this property.\n */\nconst useParticipants = ({ sortBy, } = {}) => {\n    const { participants$ } = useCallState();\n    const participants = useObservableValue(participants$);\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n        if (sortBy) {\n            return [...participants].sort(sortBy);\n        }\n        return participants;\n    }, [participants, sortBy]);\n};\n/**\n * A hook which provides a list of all participants that have joined an active call.\n * Unlike `useParticipants`, it returns a more stable reference that is not affected\n * by participant sort settings.\n *\n * @category Call State\n */\nconst useRawParticipants = () => {\n    const { rawParticipants$ } = useCallState();\n    return useObservableValue(rawParticipants$);\n};\n/**\n * A hook which provides a StreamVideoLocalParticipant object.\n * It signals that I have joined a call.\n */\nconst useLocalParticipant = () => {\n    const { localParticipant$ } = useCallState();\n    return useObservableValue(localParticipant$);\n};\n/**\n * A hook which provides a list of all other participants than me that have joined an active call.\n */\nconst useRemoteParticipants = () => {\n    const { remoteParticipants$ } = useCallState();\n    return useObservableValue(remoteParticipants$);\n};\n/**\n * Returns the approximate participant count of the active call.\n * This includes the anonymous users as well, and it is computed on the server.\n */\nconst useParticipantCount = () => {\n    const { participantCount$ } = useCallState();\n    return useObservableValue(participantCount$);\n};\n/**\n * Returns the approximate anonymous participant count of the active call.\n * The regular participants are not included in this count. It is computed on the server.\n */\nconst useAnonymousParticipantCount = () => {\n    const { anonymousParticipantCount$ } = useCallState();\n    return useObservableValue(anonymousParticipantCount$);\n};\n/**\n * Returns the generated thumbnail of the current call, if enabled in settings.\n */\nconst useCallThumbnail = () => {\n    const { thumbnails$ } = useCallState();\n    return useObservableValue(thumbnails$);\n};\n/**\n * A hook which returns the local participant's own capabilities.\n */\nconst useOwnCapabilities = () => {\n    const { ownCapabilities$ } = useCallState();\n    return useObservableValue(ownCapabilities$);\n};\n/**\n * Hook that returns true if the local participant has all the given permissions.\n *\n * @param permissions the permissions to check.\n */\nconst useHasPermissions = (...permissions) => {\n    const capabilities = useOwnCapabilities();\n    return permissions.every((permission) => capabilities?.includes(permission));\n};\n/**\n * Returns the camera state of the current call.\n */\nconst useCameraState = () => {\n    const call = useCall();\n    const { camera } = call;\n    const { state } = camera;\n    const direction = useObservableValue(state.direction$);\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const { getDevices } = useLazyDeviceList(camera);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isPromptingPermission = useObservableValue(state.isPromptingPermission$);\n    return {\n        camera,\n        direction,\n        mediaStream,\n        get devices() {\n            return getDevices();\n        },\n        hasBrowserPermission,\n        isPromptingPermission,\n        selectedDevice,\n        ...getComputedStatus(useObservableValue(state.status$), useObservableValue(state.optimisticStatus$)),\n    };\n};\n/**\n * Returns the microphone state of the current call.\n */\nconst useMicrophoneState = () => {\n    const call = useCall();\n    const { microphone } = call;\n    const { state } = microphone;\n    const mediaStream = useObservableValue(state.mediaStream$);\n    const selectedDevice = useObservableValue(state.selectedDevice$);\n    const { getDevices } = useLazyDeviceList(microphone);\n    const hasBrowserPermission = useObservableValue(state.hasBrowserPermission$);\n    const isPromptingPermission = useObservableValue(state.isPromptingPermission$);\n    const isSpeakingWhileMuted = useObservableValue(state.speakingWhileMuted$);\n    return {\n        microphone,\n        mediaStream,\n        get devices() {\n            return getDevices();\n        },\n        selectedDevice,\n        hasBrowserPermission,\n        isPromptingPermission,\n        isSpeakingWhileMuted,\n        ...getComputedStatus(useObservableValue(state.status$), useObservableValue(state.optimisticStatus$)),\n    };\n};\n/**\n * Returns the speaker state of the current call.\n *\n * Note: This hook is not supported in React Native\n */\nconst useSpeakerState = () => {\n    if (isReactNative()) {\n        throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n    }\n    const call = useCall();\n    const { speaker } = call;\n    const { getDevices } = useLazyDeviceList(speaker);\n    const selectedDevice = useObservableValue(speaker.state.selectedDevice$);\n    return {\n        speaker,\n        get devices() {\n            return getDevices();\n        },\n        selectedDevice,\n        isDeviceSelectionSupported: speaker.state.isDeviceSelectionSupported,\n    };\n};\n/**\n * Returns the Screen Share state of the current call.\n */\nconst useScreenShareState = () => {\n    const call = useCall();\n    const { screenShare } = call;\n    return {\n        screenShare,\n        mediaStream: useObservableValue(screenShare.state.mediaStream$),\n        ...getComputedStatus(useObservableValue(screenShare.state.status$), useObservableValue(screenShare.state.optimisticStatus$)),\n    };\n};\n/**\n * Returns incoming video settings for the current call, including\n * global and per-participant manual video quality overrides.\n */\nconst useIncomingVideoSettings = () => {\n    const call = useCall();\n    const settings = useObservableValue(call.dynascaleManager.incomingVideoSettings$);\n    return settings;\n};\n/**\n * Returns the current call's closed captions queue.\n */\nconst useCallClosedCaptions = () => {\n    const { closedCaptions$ } = useCallState();\n    return useObservableValue(closedCaptions$);\n};\n/**\n * Returns the current call's closed captions queue.\n */\nconst useIsCallCaptioningInProgress = () => {\n    const { captioning$ } = useCallState();\n    return useObservableValue(captioning$);\n};\nfunction getComputedStatus(status, pendingStatus) {\n    const optimisticStatus = pendingStatus ?? status;\n    return {\n        status,\n        optimisticStatus,\n        isEnabled: status === 'enabled',\n        isMute: status !== 'enabled',\n        optimisticIsMute: optimisticStatus !== 'enabled',\n        isTogglePending: optimisticStatus !== status,\n    };\n}\nfunction useLazyDeviceList(manager) {\n    const placeholderDevices$ = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.of)(EMPTY_DEVICES_ARRAY), []);\n    const [devices$, setDevices$] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(placeholderDevices$);\n    const devices = useObservableValue(devices$, EMPTY_DEVICES_ARRAY);\n    const getDevices = () => {\n        if (devices$ === placeholderDevices$) {\n            setDevices$(manager.listDevices());\n        }\n        return devices;\n    };\n    return { getDevices };\n}\n\nvar CallStateHooks = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    useAnonymousParticipantCount: useAnonymousParticipantCount,\n    useCallBlockedUserIds: useCallBlockedUserIds,\n    useCallCallingState: useCallCallingState,\n    useCallClosedCaptions: useCallClosedCaptions,\n    useCallCreatedAt: useCallCreatedAt,\n    useCallCreatedBy: useCallCreatedBy,\n    useCallCustomData: useCallCustomData,\n    useCallEgress: useCallEgress,\n    useCallEndedAt: useCallEndedAt,\n    useCallEndedBy: useCallEndedBy,\n    useCallIngress: useCallIngress,\n    useCallMembers: useCallMembers,\n    useCallSession: useCallSession,\n    useCallSettings: useCallSettings,\n    useCallStartedAt: useCallStartedAt,\n    useCallStartsAt: useCallStartsAt,\n    useCallState: useCallState,\n    useCallStatsReport: useCallStatsReport,\n    useCallThumbnail: useCallThumbnail,\n    useCallUpdatedAt: useCallUpdatedAt,\n    useCameraState: useCameraState,\n    useDominantSpeaker: useDominantSpeaker,\n    useHasOngoingScreenShare: useHasOngoingScreenShare,\n    useHasPermissions: useHasPermissions,\n    useIncomingVideoSettings: useIncomingVideoSettings,\n    useIsCallCaptioningInProgress: useIsCallCaptioningInProgress,\n    useIsCallHLSBroadcastingInProgress: useIsCallHLSBroadcastingInProgress,\n    useIsCallLive: useIsCallLive,\n    useIsCallRecordingInProgress: useIsCallRecordingInProgress,\n    useIsCallTranscribingInProgress: useIsCallTranscribingInProgress,\n    useLocalParticipant: useLocalParticipant,\n    useMicrophoneState: useMicrophoneState,\n    useOwnCapabilities: useOwnCapabilities,\n    useParticipantCount: useParticipantCount,\n    useParticipants: useParticipants,\n    useRawParticipants: useRawParticipants,\n    useRemoteParticipants: useRemoteParticipants,\n    useScreenShareState: useScreenShareState,\n    useSpeakerState: useSpeakerState\n});\n\n/**\n * Utility hook which provides access to client's state store.\n */\nconst useStore = () => {\n    const client = useStreamVideoClient();\n    if (!client) {\n        throw new Error(`StreamVideoClient isn't initialized or this hook is called outside of <StreamVideo> context.`);\n    }\n    return client.state;\n};\n/**\n * Utility hook which provides a list of all notifications about created calls.\n * In the ring call settings, these calls can be outgoing (I have called somebody)\n * or incoming (somebody has called me).\n */\nconst useCalls = () => {\n    const { calls$ } = useStore();\n    return useObservableValue(calls$);\n};\n/**\n * Returns the current connected user.\n */\nconst useConnectedUser = () => {\n    const { connectedUser$ } = useStore();\n    return useObservableValue(connectedUser$);\n};\n\n/**\n * Custom hook for toggling call recording in a video call.\n *\n * This hook provides functionality to start and stop call recording,\n * along with state management for tracking the recording status\n * and the loading indicator while awaiting a response.\n */\nconst useToggleCallRecording = () => {\n    const call = useCall();\n    const isCallRecordingInProgress = useIsCallRecordingInProgress();\n    const [isAwaitingResponse, setIsAwaitingResponse] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // TODO: add permissions\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n        // we wait until call.recording_started/stopped event to flips the\n        // `isCallRecordingInProgress` state variable.\n        // Once the flip happens, we remove the loading indicator\n        setIsAwaitingResponse((isAwaiting) => {\n            if (isAwaiting)\n                return false;\n            return isAwaiting;\n        });\n    }, [isCallRecordingInProgress]);\n    const toggleCallRecording = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {\n        try {\n            setIsAwaitingResponse(true);\n            if (isCallRecordingInProgress) {\n                await call?.stopRecording();\n            }\n            else {\n                await call?.startRecording();\n            }\n        }\n        catch (e) {\n            console.error(`Failed start recording`, e);\n            throw e;\n        }\n    }, [call, isCallRecordingInProgress]);\n    return { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress };\n};\n\n/**\n * A hook-alike function that exposes all call state hooks.\n */\nconst useCallStateHooks = () => CallStateHooks;\n\nconst Restricted = ({ canRequestOnly, hasPermissionsOnly, requiredGrants, requireAll = true, children, }) => {\n    const call = useCall();\n    const { useCallSettings, useOwnCapabilities } = useCallStateHooks();\n    const ownCapabilities = useOwnCapabilities();\n    const settings = useCallSettings();\n    const hasPermissions = requiredGrants[requireAll ? 'every' : 'some']((capability) => ownCapabilities?.includes(capability));\n    if (hasPermissionsOnly)\n        return hasPermissions ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    const canRequest = requiredGrants.some((capability) => call?.permissionsContext.canRequest(capability, settings));\n    if (canRequestOnly)\n        return canRequest ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children }) : null;\n    if (hasPermissions || canRequest)\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, { children: children });\n    return null;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AcceptCallButton: () => (/* binding */ AcceptCallButton),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   Avatar: () => (/* binding */ Avatar),\n/* harmony export */   AvatarFallback: () => (/* binding */ AvatarFallback),\n/* harmony export */   AxiosError: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.AxiosError),\n/* harmony export */   BackgroundFiltersProvider: () => (/* binding */ BackgroundFiltersProvider),\n/* harmony export */   BackstageLayout: () => (/* binding */ BackstageLayout),\n/* harmony export */   BaseVideo: () => (/* binding */ BaseVideo),\n/* harmony export */   Browsers: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers),\n/* harmony export */   Call: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Call),\n/* harmony export */   CallControls: () => (/* binding */ CallControls),\n/* harmony export */   CallParticipantListing: () => (/* binding */ CallParticipantListing),\n/* harmony export */   CallParticipantListingItem: () => (/* binding */ CallParticipantListingItem),\n/* harmony export */   CallParticipantsList: () => (/* binding */ CallParticipantsList),\n/* harmony export */   CallPreview: () => (/* binding */ CallPreview),\n/* harmony export */   CallRecordingList: () => (/* binding */ CallRecordingList),\n/* harmony export */   CallRecordingListHeader: () => (/* binding */ CallRecordingListHeader),\n/* harmony export */   CallRecordingListItem: () => (/* binding */ CallRecordingListItem),\n/* harmony export */   CallState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallState),\n/* harmony export */   CallStats: () => (/* binding */ CallStats),\n/* harmony export */   CallStatsButton: () => (/* binding */ CallStatsButton),\n/* harmony export */   CallType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallType),\n/* harmony export */   CallTypes: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes),\n/* harmony export */   CallingState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState),\n/* harmony export */   CameraManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManager),\n/* harmony export */   CameraManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CameraManagerState),\n/* harmony export */   CancelCallButton: () => (/* binding */ CancelCallButton),\n/* harmony export */   CancelCallConfirmButton: () => (/* binding */ CancelCallConfirmButton),\n/* harmony export */   CompositeButton: () => (/* binding */ CompositeButton),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DebounceType),\n/* harmony export */   DefaultParticipantViewUI: () => (/* binding */ DefaultParticipantViewUI),\n/* harmony export */   DefaultReactionsMenu: () => (/* binding */ DefaultReactionsMenu),\n/* harmony export */   DefaultScreenShareOverlay: () => (/* binding */ DefaultScreenShareOverlay),\n/* harmony export */   DefaultVideoPlaceholder: () => (/* binding */ DefaultVideoPlaceholder),\n/* harmony export */   DeviceSelector: () => (/* binding */ DeviceSelector),\n/* harmony export */   DeviceSelectorAudioInput: () => (/* binding */ DeviceSelectorAudioInput),\n/* harmony export */   DeviceSelectorAudioOutput: () => (/* binding */ DeviceSelectorAudioOutput),\n/* harmony export */   DeviceSelectorVideo: () => (/* binding */ DeviceSelectorVideo),\n/* harmony export */   DeviceSettings: () => (/* binding */ DeviceSettings),\n/* harmony export */   DropDownSelect: () => (/* binding */ DropDownSelect),\n/* harmony export */   DropDownSelectOption: () => (/* binding */ DropDownSelectOption),\n/* harmony export */   DynascaleManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.DynascaleManager),\n/* harmony export */   EmptyCallRecordingListing: () => (/* binding */ EmptyCallRecordingListing),\n/* harmony export */   ErrorFromResponse: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ErrorFromResponse),\n/* harmony export */   FrameRecordingSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.FrameRecordingSettingsRequestModeEnum),\n/* harmony export */   FrameRecordingSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.FrameRecordingSettingsRequestQualityEnum),\n/* harmony export */   FrameRecordingSettingsResponseModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.FrameRecordingSettingsResponseModeEnum),\n/* harmony export */   GenericMenu: () => (/* binding */ GenericMenu),\n/* harmony export */   GenericMenuButtonItem: () => (/* binding */ GenericMenuButtonItem),\n/* harmony export */   Icon: () => (/* binding */ Icon),\n/* harmony export */   IconButton: () => (/* binding */ IconButton),\n/* harmony export */   IngressAudioEncodingOptionsRequestChannelsEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.IngressAudioEncodingOptionsRequestChannelsEnum),\n/* harmony export */   IngressVideoLayerRequestCodecEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.IngressVideoLayerRequestCodecEnum),\n/* harmony export */   InputMediaDeviceManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.InputMediaDeviceManagerState),\n/* harmony export */   LayoutSettingsRequestNameEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.LayoutSettingsRequestNameEnum),\n/* harmony export */   LivestreamLayout: () => (/* binding */ LivestreamLayout),\n/* harmony export */   LivestreamPlayer: () => (/* binding */ LivestreamPlayer),\n/* harmony export */   LoadingCallRecordingListing: () => (/* binding */ LoadingCallRecordingListing),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   MenuToggle: () => (/* binding */ MenuToggle),\n/* harmony export */   MenuVisualType: () => (/* binding */ MenuVisualType),\n/* harmony export */   MicrophoneManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.MicrophoneManagerState),\n/* harmony export */   NoiseCancellationProvider: () => (/* binding */ NoiseCancellationProvider),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.NoiseCancellationSettingsModeEnum),\n/* harmony export */   Notification: () => (/* binding */ Notification),\n/* harmony export */   OwnCapability: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability),\n/* harmony export */   PaginatedGridLayout: () => (/* binding */ PaginatedGridLayout),\n/* harmony export */   ParticipantActionsContextMenu: () => (/* binding */ ParticipantActionsContextMenu),\n/* harmony export */   ParticipantDetails: () => (/* binding */ ParticipantDetails),\n/* harmony export */   ParticipantView: () => (/* binding */ ParticipantView),\n/* harmony export */   ParticipantViewContext: () => (/* binding */ ParticipantViewContext),\n/* harmony export */   ParticipantsAudio: () => (/* binding */ ParticipantsAudio),\n/* harmony export */   PermissionNotification: () => (/* binding */ PermissionNotification),\n/* harmony export */   PermissionRequestList: () => (/* binding */ PermissionRequestList),\n/* harmony export */   PermissionRequests: () => (/* binding */ PermissionRequests),\n/* harmony export */   PipLayout: () => (/* binding */ PipLayout),\n/* harmony export */   RNSpeechDetector: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RNSpeechDetector),\n/* harmony export */   RTMPBroadcastRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RTMPBroadcastRequestQualityEnum),\n/* harmony export */   RTMPSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RTMPSettingsRequestQualityEnum),\n/* harmony export */   Reaction: () => (/* binding */ Reaction),\n/* harmony export */   ReactionsButton: () => (/* binding */ ReactionsButton),\n/* harmony export */   RecordCallButton: () => (/* binding */ RecordCallButton),\n/* harmony export */   RecordCallConfirmationButton: () => (/* binding */ RecordCallConfirmationButton),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RecordSettingsRequestQualityEnum),\n/* harmony export */   RecordingInProgressNotification: () => (/* binding */ RecordingInProgressNotification),\n/* harmony export */   Restricted: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted),\n/* harmony export */   RingingCall: () => (/* binding */ RingingCall),\n/* harmony export */   RingingCallControls: () => (/* binding */ RingingCallControls),\n/* harmony export */   RxUtils: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.RxUtils),\n/* harmony export */   ScreenShareButton: () => (/* binding */ ScreenShareButton),\n/* harmony export */   ScreenShareManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ScreenShareState),\n/* harmony export */   SearchInput: () => (/* binding */ SearchInput),\n/* harmony export */   SearchResults: () => (/* binding */ SearchResults),\n/* harmony export */   SfuEvents: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuEvents),\n/* harmony export */   SfuModels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels),\n/* harmony export */   SpeakerLayout: () => (/* binding */ SpeakerLayout),\n/* harmony export */   SpeakerManager: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SpeakerState),\n/* harmony export */   SpeakingWhileMutedNotification: () => (/* binding */ SpeakingWhileMutedNotification),\n/* harmony export */   SpeechIndicator: () => (/* binding */ SpeechIndicator),\n/* harmony export */   StartClosedCaptionsRequestLanguageEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StartClosedCaptionsRequestLanguageEnum),\n/* harmony export */   StartTranscriptionRequestLanguageEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StartTranscriptionRequestLanguageEnum),\n/* harmony export */   StatCard: () => (/* binding */ StatCard),\n/* harmony export */   StreamCall: () => (/* binding */ StreamCall),\n/* harmony export */   StreamCallProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider),\n/* harmony export */   StreamI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18n),\n/* harmony export */   StreamI18nProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamI18nProvider),\n/* harmony export */   StreamSfuClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamSfuClient),\n/* harmony export */   StreamTheme: () => (/* binding */ StreamTheme),\n/* harmony export */   StreamVideo: () => (/* binding */ StreamVideo),\n/* harmony export */   StreamVideoClient: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoClient),\n/* harmony export */   StreamVideoProvider: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.StreamVideoWriteableStateStore),\n/* harmony export */   TextButton: () => (/* binding */ TextButton),\n/* harmony export */   ToggleAudioOutputButton: () => (/* binding */ ToggleAudioOutputButton),\n/* harmony export */   ToggleAudioPreviewButton: () => (/* binding */ ToggleAudioPreviewButton),\n/* harmony export */   ToggleAudioPublishingButton: () => (/* binding */ ToggleAudioPublishingButton),\n/* harmony export */   ToggleVideoPreviewButton: () => (/* binding */ ToggleVideoPreviewButton),\n/* harmony export */   ToggleVideoPublishingButton: () => (/* binding */ ToggleVideoPublishingButton),\n/* harmony export */   Tooltip: () => (/* binding */ Tooltip),\n/* harmony export */   TranscriptionSettingsRequestClosedCaptionModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestClosedCaptionModeEnum),\n/* harmony export */   TranscriptionSettingsRequestLanguageEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestLanguageEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseClosedCaptionModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsResponseClosedCaptionModeEnum),\n/* harmony export */   TranscriptionSettingsResponseLanguageEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsResponseLanguageEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.TranscriptionSettingsResponseModeEnum),\n/* harmony export */   Video: () => (/* binding */ Video$1),\n/* harmony export */   VideoPreview: () => (/* binding */ VideoPreview),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState),\n/* harmony export */   WithTooltip: () => (/* binding */ WithTooltip),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators),\n/* harmony export */   conditional: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.conditional),\n/* harmony export */   createSoundDetector: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.createSoundDetector),\n/* harmony export */   defaultEmojiReactionMap: () => (/* binding */ defaultEmojiReactionMap),\n/* harmony export */   defaultReactions: () => (/* binding */ defaultReactions),\n/* harmony export */   defaultSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset),\n/* harmony export */   defaultTranslationFunction: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.defaultTranslationFunction),\n/* harmony export */   descending: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.descending),\n/* harmony export */   deviceIds$: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getAudioStream),\n/* harmony export */   getClientDetails: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getClientDetails),\n/* harmony export */   getDeviceState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getDeviceState),\n/* harmony export */   getLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogLevel),\n/* harmony export */   getLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger),\n/* harmony export */   getScreenShareStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio),\n/* harmony export */   hasPausedTrack: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasPausedTrack),\n/* harmony export */   hasScreenShare: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo),\n/* harmony export */   isPinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logLevels),\n/* harmony export */   logToConsole: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.logToConsole),\n/* harmony export */   name: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name),\n/* harmony export */   noopComparator: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.pinned),\n/* harmony export */   publishingAudio: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingAudio),\n/* harmony export */   publishingVideo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.publishingVideo),\n/* harmony export */   reactionType: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.reactionType),\n/* harmony export */   resolveDeviceId: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.resolveDeviceId),\n/* harmony export */   role: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.role),\n/* harmony export */   screenSharing: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel),\n/* harmony export */   setLogger: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setLogger),\n/* harmony export */   setOSInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setOSInfo),\n/* harmony export */   setPowerState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setPowerState),\n/* harmony export */   setSdkInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo),\n/* harmony export */   setThermalState: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setThermalState),\n/* harmony export */   setWebRTCInfo: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* reexport safe */ _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speaking),\n/* harmony export */   translations: () => (/* binding */ translations),\n/* harmony export */   useBackgroundFilters: () => (/* binding */ useBackgroundFilters),\n/* harmony export */   useCall: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall),\n/* harmony export */   useCallStateHooks: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks),\n/* harmony export */   useCalls: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCalls),\n/* harmony export */   useConnectedUser: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser),\n/* harmony export */   useDeviceList: () => (/* binding */ useDeviceList),\n/* harmony export */   useFilteredParticipants: () => (/* binding */ useFilteredParticipants),\n/* harmony export */   useHorizontalScrollPosition: () => (/* binding */ useHorizontalScrollPosition),\n/* harmony export */   useI18n: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n),\n/* harmony export */   useMenuContext: () => (/* binding */ useMenuContext),\n/* harmony export */   useNoiseCancellation: () => (/* binding */ useNoiseCancellation),\n/* harmony export */   useObservableValue: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useObservableValue),\n/* harmony export */   useParticipantViewContext: () => (/* binding */ useParticipantViewContext),\n/* harmony export */   usePersistedDevicePreferences: () => (/* binding */ usePersistedDevicePreferences),\n/* harmony export */   useRequestPermission: () => (/* binding */ useRequestPermission),\n/* harmony export */   useStore: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStore),\n/* harmony export */   useStreamVideoClient: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient),\n/* harmony export */   useToggleCallRecording: () => (/* reexport safe */ _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useToggleCallRecording),\n/* harmony export */   useTrackElementVisibility: () => (/* binding */ useTrackElementVisibility),\n/* harmony export */   useVerticalScrollPosition: () => (/* binding */ useVerticalScrollPosition)\n/* harmony export */ });\n/* harmony import */ var _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @stream-io/video-client */ \"(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\");\n/* harmony import */ var _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stream-io/video-react-bindings */ \"(ssr)/./node_modules/@stream-io/video-react-bindings/dist/index.es.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @stream-io/video-filters-web */ \"(ssr)/./node_modules/@stream-io/video-filters-web/dist/index.es.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst Audio = ({ participant, trackType = 'audioTrack', ...rest }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [audioElement, setAudioElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const { userId, sessionId } = participant;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !audioElement)\n            return;\n        const cleanup = call.bindAudioElement(audioElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, sessionId, audioElement, trackType]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"audio\", { autoPlay: true, ...rest, ref: setAudioElement, \"data-user-id\": userId, \"data-session-id\": sessionId, \"data-track-type\": trackType }));\n};\nAudio.displayName = 'Audio';\n\nconst ParticipantsAudio = (props) => {\n    const { participants, audioProps } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: participants.map((participant) => {\n            if (participant.isLocalParticipant)\n                return null;\n            const { audioStream, screenShareAudioStream, sessionId } = participant;\n            const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n            const audioTrackElement = hasAudioTrack && audioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"audioTrack\", participant: participant }));\n            const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n            const screenShareAudioTrackElement = hasScreenShareAudioTrack &&\n                screenShareAudioStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { ...audioProps, trackType: \"screenShareAudioTrack\", participant: participant }));\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [audioTrackElement, screenShareAudioTrackElement] }, sessionId));\n        }) }));\n};\nParticipantsAudio.displayName = 'ParticipantsAudio';\n\nconst ParticipantViewContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\nconst useParticipantViewContext = () => (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ParticipantViewContext);\n\nconst useFloatingUIPreset = ({ middleware = [], placement, strategy, offset: offsetInPx = 10, }) => {\n    const { refs, x, y, update, elements: { domReference, floating }, context, } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useFloating)({\n        placement,\n        strategy,\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.offset)(offsetInPx),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.shift)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.flip)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.size)({\n                padding: 10,\n                apply: ({ availableHeight, elements }) => {\n                    Object.assign(elements.floating.style, {\n                        maxHeight: `${availableHeight}px`,\n                    });\n                },\n            }),\n            ...middleware,\n        ],\n    });\n    // handle window resizing\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!domReference || !floating)\n            return;\n        const cleanup = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.autoUpdate)(domReference, floating, update);\n        return () => cleanup();\n    }, [domReference, floating, update]);\n    return { refs, x, y, domReference, floating, strategy, context };\n};\n\nconst defaultDevice = 'default';\n/**\n * This hook will apply and persist the device preferences from local storage.\n *\n * @param key the key to use for local storage.\n */\nconst usePersistedDevicePreferences = (key = '@stream-io/device-preferences') => {\n    const { useCallSettings, useCallCallingState, useMicrophoneState, useCameraState, useSpeakerState, } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const settings = useCallSettings();\n    const callingState = useCallCallingState();\n    const microphoneState = useMicrophoneState();\n    const cameraState = useCameraState();\n    const speakerState = useSpeakerState();\n    const [applyingState, setApplyingState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('idle');\n    // when the camera is disabled on call type level, we should discard\n    // any stored camera preferences.\n    const cameraDevices = settings?.video?.enabled ? cameraState.devices : false;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function apply() {\n        if (callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT ||\n            microphoneState.devices.length === 0 ||\n            (Array.isArray(cameraDevices) && cameraDevices.length === 0) ||\n            speakerState.devices.length === 0 ||\n            !settings ||\n            applyingState !== 'idle') {\n            return;\n        }\n        setApplyingState('applying');\n        (async () => {\n            const { audio, video } = settings;\n            for (const [deviceKey, state, defaultMuted, enabledInCallType] of [\n                ['microphone', microphoneState, !audio.mic_default_on, true],\n                ['camera', cameraState, !video.camera_default_on, video.enabled],\n                ['speaker', speakerState, false, true],\n            ]) {\n                const preferences = parseLocalDevicePreferences(key);\n                const preference = preferences[deviceKey];\n                const manager = state[deviceKey];\n                const applyPromise = preference\n                    ? applyLocalDevicePreference(manager, [preference].flat(), deviceKey === 'camera' ? cameraDevices || [] : state.devices, enabledInCallType)\n                    : applyMutedState(manager, defaultMuted, enabledInCallType);\n                await applyPromise.catch((err) => {\n                    console.warn(`Failed to apply ${deviceKey} device preferences`, err);\n                });\n            }\n        })().finally(() => setApplyingState((state) => (state === 'applying' ? 'applied' : state)));\n    }, [\n        applyingState,\n        callingState,\n        cameraState,\n        cameraDevices,\n        key,\n        microphoneState,\n        microphoneState.devices,\n        settings,\n        speakerState,\n        speakerState.devices,\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function persist() {\n        if (callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT || applyingState !== 'applied') {\n            return;\n        }\n        for (const [deviceKey, devices, selectedDevice, isMute] of [\n            [\n                'camera',\n                cameraDevices || [],\n                cameraState.selectedDevice,\n                cameraState.isMute,\n            ],\n            [\n                'microphone',\n                microphoneState.devices,\n                microphoneState.selectedDevice,\n                microphoneState.isMute,\n            ],\n            [\n                'speaker',\n                speakerState.devices,\n                speakerState.selectedDevice,\n                speakerState.isMute,\n            ],\n        ]) {\n            try {\n                patchLocalDevicePreference(key, deviceKey, {\n                    devices,\n                    selectedDevice,\n                    isMute,\n                });\n            }\n            catch (err) {\n                console.warn(`Failed to save ${deviceKey} device preferences`, err);\n            }\n        }\n    }, [\n        applyingState,\n        callingState,\n        cameraDevices,\n        cameraState.isMute,\n        cameraState.selectedDevice,\n        key,\n        microphoneState.devices,\n        microphoneState.isMute,\n        microphoneState.selectedDevice,\n        speakerState.devices,\n        speakerState.isMute,\n        speakerState.selectedDevice,\n    ]);\n};\n// const usePersistedDevicePreference = <K extends DeviceKey>(\n//   key: string,\n//   deviceKey: K,\n//   state: DeviceState<K>,\n//   defaultMuted?: boolean,\n// ): void => {\n//   const { useCallCallingState } = useCallStateHooks();\n//   const callingState = useCallCallingState();\n//   const [applyingState, setApplyingState] = useState<\n//     'idle' | 'applying' | 'applied'\n//   >('idle');\n//   const manager = state[deviceKey];\n//   useEffect(\n//     function apply() {\n//       if (\n//         callingState === CallingState.LEFT ||\n//         !state.devices?.length ||\n//         typeof defaultMuted !== 'boolean' ||\n//         applyingState !== 'idle'\n//       ) {\n//         return;\n//       }\n//       const preferences = parseLocalDevicePreferences(key);\n//       const preference = preferences[deviceKey];\n//       setApplyingState('applying');\n//       if (!manager.state.selectedDevice) {\n//         const applyPromise = preference\n//           ? applyLocalDevicePreference(\n//               manager,\n//               [preference].flat(),\n//               state.devices,\n//             )\n//           : applyMutedState(manager, defaultMuted);\n//         applyPromise\n//           .catch((err) => {\n//             console.warn(\n//               `Failed to apply ${deviceKey} device preferences`,\n//               err,\n//             );\n//           })\n//           .finally(() => setApplyingState('applied'));\n//       } else {\n//         setApplyingState('applied');\n//       }\n//     },\n//     [\n//       applyingState,\n//       callingState,\n//       defaultMuted,\n//       deviceKey,\n//       key,\n//       manager,\n//       state.devices,\n//     ],\n//   );\n//   useEffect(\n//     function persist() {\n//       if (\n//         callingState === CallingState.LEFT ||\n//         !state.devices?.length ||\n//         applyingState !== 'applied'\n//       ) {\n//         return;\n//       }\n//       try {\n//         patchLocalDevicePreference(key, deviceKey, {\n//           devices: state.devices,\n//           selectedDevice: state.selectedDevice,\n//           isMute: state.isMute,\n//         });\n//       } catch (err) {\n//         console.warn(`Failed to save ${deviceKey} device preferences`, err);\n//       }\n//     },\n//     [\n//       applyingState,\n//       callingState,\n//       deviceKey,\n//       key,\n//       state.devices,\n//       state.isMute,\n//       state.selectedDevice,\n//     ],\n//   );\n// };\nconst parseLocalDevicePreferences = (key) => {\n    const preferencesStr = window.localStorage.getItem(key);\n    let preferences = {};\n    if (preferencesStr) {\n        try {\n            preferences = JSON.parse(preferencesStr);\n            if (Object.hasOwn(preferences, 'mic')) {\n                // for backwards compatibility\n                preferences.microphone = preferences.mic;\n            }\n        }\n        catch {\n            /* assume preferences are empty */\n        }\n    }\n    return preferences;\n};\nconst patchLocalDevicePreference = (key, deviceKey, state) => {\n    const preferences = parseLocalDevicePreferences(key);\n    const nextPreference = getSelectedDevicePreference(state.devices, state.selectedDevice);\n    const preferenceHistory = [preferences[deviceKey] ?? []]\n        .flat()\n        .filter((p) => p.selectedDeviceId !== nextPreference.selectedDeviceId &&\n        (p.selectedDeviceLabel === '' ||\n            p.selectedDeviceLabel !== nextPreference.selectedDeviceLabel));\n    window.localStorage.setItem(key, JSON.stringify({\n        ...preferences,\n        mic: undefined, // for backwards compatibility\n        [deviceKey]: [\n            {\n                ...nextPreference,\n                muted: state.isMute,\n            },\n            ...preferenceHistory,\n        ].slice(0, 3),\n    }));\n};\nconst applyLocalDevicePreference = async (manager, preference, devices, enabledInCallType) => {\n    let muted;\n    for (const p of preference) {\n        muted ?? (muted = p.muted);\n        if (p.selectedDeviceId === defaultDevice) {\n            break;\n        }\n        const device = devices.find((d) => d.deviceId === p.selectedDeviceId) ??\n            devices.find((d) => d.label === p.selectedDeviceLabel);\n        if (device) {\n            if (!manager.state.selectedDevice) {\n                await manager.select(device.deviceId);\n            }\n            muted = p.muted;\n            break;\n        }\n    }\n    if (typeof muted === 'boolean') {\n        await applyMutedState(manager, muted, enabledInCallType);\n    }\n};\nconst applyMutedState = async (manager, muted, enabledInCallType) => {\n    if (enabledInCallType && !manager.state.status) {\n        await manager[muted ? 'disable' : 'enable']?.();\n    }\n};\nconst getSelectedDevicePreference = (devices, selectedDevice) => ({\n    selectedDeviceId: selectedDevice || defaultDevice,\n    selectedDeviceLabel: devices?.find((d) => d.deviceId === selectedDevice)?.label ?? '',\n});\n\nconst SCROLL_THRESHOLD = 10;\n/**\n * Hook which observes element's scroll position and returns text value based on the\n * position of the scrollbar (`top`, `bottom`, `between` and `null` if no scrollbar is available)\n */\nconst useVerticalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasVerticalScrollbar = element.scrollHeight > element.clientHeight;\n            if (!hasVerticalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheTop = element.scrollTop <= threshold;\n            if (isAtTheTop)\n                return setScrollPosition('top');\n            const isAtTheBottom = Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) <= threshold;\n            if (isAtTheBottom)\n                return setScrollPosition('bottom');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\nconst useHorizontalScrollPosition = (scrollElement, threshold = SCROLL_THRESHOLD) => {\n    const [scrollPosition, setScrollPosition] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!scrollElement)\n            return;\n        const scrollHandler = () => {\n            const element = scrollElement;\n            const hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n            if (!hasHorizontalScrollbar)\n                return setScrollPosition(null);\n            const isAtTheStart = element.scrollLeft <= threshold;\n            if (isAtTheStart)\n                return setScrollPosition('start');\n            const isAtTheEnd = Math.abs(element.scrollWidth - element.scrollLeft - element.clientWidth) <= threshold;\n            if (isAtTheEnd)\n                return setScrollPosition('end');\n            setScrollPosition('between');\n        };\n        const resizeObserver = new ResizeObserver(scrollHandler);\n        resizeObserver.observe(scrollElement);\n        scrollElement.addEventListener('scroll', scrollHandler);\n        return () => {\n            scrollElement.removeEventListener('scroll', scrollHandler);\n            resizeObserver.disconnect();\n        };\n    }, [scrollElement, threshold]);\n    return scrollPosition;\n};\n\nconst useRequestPermission = (permission) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const [isAwaitingPermission, setIsAwaitingPermission] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false); // TODO: load with possibly pending state\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const reset = () => setIsAwaitingPermission(false);\n        if (hasPermission)\n            reset();\n    }, [hasPermission]);\n    const requestPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async () => {\n        if (hasPermission)\n            return true;\n        const canRequestPermission = !!call?.permissionsContext.canRequest(permission);\n        if (isAwaitingPermission || !canRequestPermission)\n            return false;\n        setIsAwaitingPermission(true);\n        try {\n            await call?.requestPermissions({\n                permissions: [permission],\n            });\n        }\n        catch (error) {\n            setIsAwaitingPermission(false);\n            throw new Error(`requestPermission failed: ${error}`);\n        }\n        return false;\n    }, [call, hasPermission, isAwaitingPermission, permission]);\n    return {\n        requestPermission,\n        hasPermission,\n        canRequestPermission: !!call?.permissionsContext.canRequest(permission),\n        isAwaitingPermission,\n    };\n};\n\n/**\n * Utility hook that helps render a list of devices or implement a device selector.\n * Compared to someting like `useCameraState().devices`, it has some handy features:\n * 1. Adds the \"Default\" device to the list if applicable (either the user did not\n * select a device, or a previously selected device is no longer available).\n * 2. Maps the device list to a format more suitable for rendering.\n */\nfunction useDeviceList(devices, selectedDeviceId) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n        let selectedDeviceInfo = null;\n        let selectedIndex = null;\n        const deviceList = devices.map((d, i) => {\n            const isSelected = d.deviceId === selectedDeviceId;\n            const device = { deviceId: d.deviceId, label: d.label, isSelected };\n            if (isSelected) {\n                selectedDeviceInfo = device;\n                selectedIndex = i;\n            }\n            return device;\n        });\n        if (selectedDeviceInfo === null || selectedIndex === null) {\n            const defaultDevice = {\n                deviceId: 'default',\n                label: t('Default'),\n                isSelected: true,\n            };\n            selectedDeviceInfo = defaultDevice;\n            selectedIndex = 0;\n            deviceList.unshift(defaultDevice);\n        }\n        return { deviceList, selectedDeviceInfo, selectedIndex };\n    }, [devices, selectedDeviceId, t]);\n}\n\nvar MenuVisualType;\n(function (MenuVisualType) {\n    MenuVisualType[\"PORTAL\"] = \"portal\";\n    MenuVisualType[\"MENU\"] = \"menu\";\n})(MenuVisualType || (MenuVisualType = {}));\n/**\n * Used to provide utility APIs to the components rendered inside the portal.\n */\nconst MenuContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\n/**\n * Access to the closes MenuContext.\n */\nconst useMenuContext = () => {\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(MenuContext);\n};\nconst MenuPortal = ({ children, refs, }) => {\n    const portalId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => `str-video-portal-${Math.random().toString(36).substring(2, 9)}`, []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { id: portalId, className: \"str-video__portal\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.FloatingOverlay, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.FloatingPortal, { id: portalId, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__portal-content\", ref: refs.setFloating, children: children }) }) })] }));\n};\nconst MenuToggle = ({ ToggleButton, placement = 'top-start', strategy = 'absolute', offset, visualType = MenuVisualType.MENU, children, onToggle, }) => {\n    const [menuShown, setMenuShown] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const toggleHandler = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(onToggle);\n    toggleHandler.current = onToggle;\n    const { floating, domReference, refs, x, y } = useFloatingUIPreset({\n        placement,\n        strategy,\n        offset,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const parentDocument = domReference?.ownerDocument;\n        const handleClick = (event) => {\n            if (!floating && domReference?.contains(event.target)) {\n                setMenuShown(true);\n                toggleHandler.current?.(true);\n            }\n            else if (floating && !floating?.contains(event.target)) {\n                setMenuShown(false);\n                toggleHandler.current?.(false);\n            }\n        };\n        const handleKeyDown = (event) => {\n            if (event.key && // key can be undefined in some browsers\n                event.key.toLowerCase() === 'escape' &&\n                !event.altKey &&\n                !event.ctrlKey) {\n                setMenuShown(false);\n                toggleHandler.current?.(false);\n            }\n        };\n        parentDocument?.addEventListener('click', handleClick, { capture: true });\n        parentDocument?.addEventListener('keydown', handleKeyDown);\n        return () => {\n            parentDocument?.removeEventListener('click', handleClick, {\n                capture: true,\n            });\n            parentDocument?.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [floating, domReference]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [menuShown && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuContext.Provider, { value: { close: () => setMenuShown(false) }, children: visualType === MenuVisualType.PORTAL ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuPortal, { refs: refs, children: children })) : visualType === MenuVisualType.MENU ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__menu-container\", ref: refs.setFloating, style: {\n                        position: strategy,\n                        top: y ?? 0,\n                        left: x ?? 0,\n                        overflowY: 'auto',\n                    }, role: \"menu\", children: children })) : null })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleButton, { menuShown: menuShown, ref: refs.setReference })] }));\n};\n\nconst GenericMenu = ({ children, onItemClick, }) => {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__generic-menu\", ref: ref, onClick: (e) => {\n            if (onItemClick &&\n                e.target !== ref.current &&\n                ref.current?.contains(e.target)) {\n                onItemClick(e);\n            }\n        }, children: children }));\n};\nconst GenericMenuButtonItem = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"li\", { className: \"str-video__generic-menu--item\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, children: children }) }));\n};\n\nconst Icon = ({ className, icon }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__icon', icon && `str-video__icon--${icon}`, className) }));\n\nfunction usePictureInPictureState(videoElement) {\n    const [isPiP, setIsPiP] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(document.pictureInPictureElement === videoElement);\n    if (!videoElement && isPiP)\n        setIsPiP(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement)\n            return;\n        const handlePiP = () => {\n            setIsPiP(document.pictureInPictureElement === videoElement);\n        };\n        videoElement.addEventListener('enterpictureinpicture', handlePiP);\n        videoElement.addEventListener('leavepictureinpicture', handlePiP);\n        return () => {\n            videoElement.removeEventListener('enterpictureinpicture', handlePiP);\n            videoElement.removeEventListener('leavepictureinpicture', handlePiP);\n        };\n    }, [videoElement]);\n    return isPiP;\n}\n\nconst ParticipantActionsContextMenu = () => {\n    const { participant, participantViewElement, videoElement } = useParticipantViewContext();\n    const [fullscreenModeOn, setFullscreenModeOn] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(!!document.fullscreenElement);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const isPiP = usePictureInPictureState(videoElement ?? undefined);\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { pin, sessionId, userId } = participant;\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const hasScreenShareTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant);\n    const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n    const blockUser = () => call?.blockUser(userId);\n    const kickUser = () => call?.kickUser({ user_id: userId });\n    const muteAudio = () => call?.muteUser(userId, 'audio');\n    const muteVideo = () => call?.muteUser(userId, 'video');\n    const muteScreenShare = () => call?.muteUser(userId, 'screenshare');\n    const muteScreenShareAudio = () => call?.muteUser(userId, 'screenshare_audio');\n    const grantPermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            grant_permissions: [permission],\n        });\n    };\n    const revokePermission = (permission) => () => {\n        call?.updateUserPermissions({\n            user_id: userId,\n            revoke_permissions: [permission],\n        });\n    };\n    const toggleParticipantPin = () => {\n        if (pin) {\n            call?.unpin(sessionId);\n        }\n        else {\n            call?.pin(sessionId);\n        }\n    };\n    const pinForEveryone = () => {\n        call\n            ?.pinForEveryone({ user_id: userId, session_id: sessionId })\n            .catch((err) => {\n            console.error(`Failed to pin participant ${userId}`, err);\n        });\n    };\n    const unpinForEveryone = () => {\n        call\n            ?.unpinForEveryone({ user_id: userId, session_id: sessionId })\n            .catch((err) => {\n            console.error(`Failed to unpin participant ${userId}`, err);\n        });\n    };\n    const toggleFullscreenMode = () => {\n        if (!fullscreenModeOn) {\n            return participantViewElement?.requestFullscreen().catch(console.error);\n        }\n        return document.exitFullscreen().catch(console.error);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // handles the case when fullscreen mode is toggled externally,\n        // e.g., by pressing ESC key or some other keyboard shortcut\n        const handleFullscreenChange = () => {\n            setFullscreenModeOn(!!document.fullscreenElement);\n        };\n        document.addEventListener('fullscreenchange', handleFullscreenChange);\n        return () => {\n            document.removeEventListener('fullscreenchange', handleFullscreenChange);\n        };\n    }, []);\n    const togglePictureInPicture = () => {\n        if (videoElement && !isPiP) {\n            return videoElement\n                .requestPictureInPicture()\n                .catch(console.error);\n        }\n        return document.exitPictureInPicture().catch(console.error);\n    };\n    const { close } = useMenuContext() || {};\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenu, { onItemClick: close, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: toggleParticipantPin, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), pin ? t('Unpin') : t('Pin')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.PIN_FOR_EVERYONE], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: pinForEveryone, disabled: pin && !pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Pin for everyone')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: unpinForEveryone, disabled: !pin || pin.isLocalPin, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"pin\" }), t('Unpin for everyone')] })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: blockUser, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"not-allowed\" }), t('Block')] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.KICK_USER], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: kickUser, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"kick-user\" }), t('Kick')] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], children: [hasVideoTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteVideo, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"camera-off-outline\" }), t('Turn off video')] })), hasScreenShareTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShare, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), t('Turn off screen share')] })), hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute audio')] })), hasScreenShareAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(GenericMenuButtonItem, { onClick: muteScreenShareAudio, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"no-audio\" }), t('Mute screen share audio')] }))] }), participantViewElement &&\n                typeof participantViewElement.requestFullscreen !== 'undefined' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: toggleFullscreenMode, children: t('{{ direction }} fullscreen', {\n                    direction: fullscreenModeOn ? t('Leave') : t('Enter'),\n                }) })), videoElement && document.pictureInPictureEnabled && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: togglePictureInPicture, children: t('{{ direction }} picture-in-picture', {\n                    direction: isPiP ? t('Leave') : t('Enter'),\n                }) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS], children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Allow audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Allow video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: grantPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Allow screen sharing') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO), children: t('Disable audio') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO), children: t('Disable video') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { onClick: revokePermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE), children: t('Disable screen sharing') })] })] }));\n};\n\nconst isComponentType = (elementOrComponent) => {\n    return elementOrComponent === null\n        ? false\n        : !(0,react__WEBPACK_IMPORTED_MODULE_3__.isValidElement)(elementOrComponent);\n};\n\nconst chunk = (array, size) => {\n    const chunkCount = Math.ceil(array.length / size);\n    return Array.from({ length: chunkCount }, (_, index) => array.slice(size * index, size * index + size));\n};\n\nconst applyElementToRef = (ref, element) => {\n    if (!ref)\n        return;\n    if (typeof ref === 'function')\n        return ref(element);\n    ref.current = element;\n};\n\n/**\n * @description Extends video element with `stream` property\n * (`srcObject`) to reactively handle stream changes\n */\nconst BaseVideo = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function BaseVideo({ stream, ...rest }, ref) {\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!videoElement || !stream)\n            return;\n        if (stream === videoElement.srcObject)\n            return;\n        videoElement.srcObject = stream;\n        if (_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isSafari() || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.Browsers.isFirefox()) {\n            // Firefox and Safari have some timing issue\n            setTimeout(() => {\n                videoElement.srcObject = stream;\n                videoElement.play().catch((e) => {\n                    console.error(`Failed to play stream`, e);\n                });\n            }, 0);\n        }\n        return () => {\n            videoElement.pause();\n            videoElement.srcObject = null;\n        };\n    }, [stream, videoElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { autoPlay: true, playsInline: true, ...rest, ref: (element) => {\n            applyElementToRef(ref, element);\n            setVideoElement(element);\n        } }));\n});\n\nconst BaseVideoPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultVideoPlaceholder({ participant, style, children }, ref) {\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const name = participant.name || participant.userId;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__video-placeholder\", style: style, ref: ref, children: [(!participant.image || error) &&\n                (name ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(InitialsFallback, { name: name })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__no-video-label\", children: children }))), participant.image && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: name, className: \"str-video__video-placeholder__avatar\", src: participant.image }))] }));\n});\nconst InitialsFallback = (props) => {\n    const { name } = props;\n    const initials = name\n        .split(' ')\n        .slice(0, 2)\n        .map((n) => n[0])\n        .join('');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__video-placeholder__initials-fallback\", children: initials }));\n};\n\nconst DefaultVideoPlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultVideoPlaceholder(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideoPlaceholder, { ref: ref, ...props, children: t('Video is disabled') }));\n});\n\nconst DefaultPictureInPicturePlaceholder = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultPictureInPicturePlaceholder(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideoPlaceholder, { ref: ref, ...props, children: t('Video is playing in a popup') }));\n});\n\nconst Video$1 = ({ enabled = true, mirror, trackType, participant, className, VideoPlaceholder = DefaultVideoPlaceholder, PictureInPicturePlaceholder = DefaultPictureInPicturePlaceholder, refs, ...rest }) => {\n    const { sessionId, videoStream, screenShareStream, viewportVisibilityState, isLocalParticipant, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const [videoElement, setVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // start with true, will flip once the video starts playing\n    const [isVideoPaused, setIsVideoPaused] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const [isWideMode, setIsWideMode] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(true);\n    const isPiP = usePictureInPictureState(videoElement ?? undefined);\n    const stream = trackType === 'videoTrack'\n        ? videoStream\n        : trackType === 'screenShareTrack'\n            ? screenShareStream\n            : undefined;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(() => {\n        if (!call || !videoElement || trackType === 'none')\n            return;\n        const cleanup = call.bindVideoElement(videoElement, sessionId, trackType);\n        return () => {\n            cleanup?.();\n        };\n    }, [call, trackType, sessionId, videoElement]);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!stream || !videoElement)\n            return;\n        const [track] = stream.getVideoTracks();\n        if (!track)\n            return;\n        const handlePlayPause = () => {\n            setIsVideoPaused(videoElement.paused);\n            const { width = 0, height = 0 } = track.getSettings();\n            setIsWideMode(width >= height);\n        };\n        // playback may have started before we had a chance to\n        // attach the 'play/pause' event listener, so we set the state\n        // here to make sure it's in sync\n        setIsVideoPaused(videoElement.paused);\n        videoElement.addEventListener('play', handlePlayPause);\n        videoElement.addEventListener('pause', handlePlayPause);\n        track.addEventListener('unmute', handlePlayPause);\n        return () => {\n            videoElement.removeEventListener('play', handlePlayPause);\n            videoElement.removeEventListener('pause', handlePlayPause);\n            track.removeEventListener('unmute', handlePlayPause);\n            // reset the 'pause' state once we unmount the video element\n            setIsVideoPaused(true);\n        };\n    }, [stream, videoElement]);\n    if (!call)\n        return null;\n    const isPublishingTrack = trackType === 'videoTrack'\n        ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant)\n        : trackType === 'screenShareTrack'\n            ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant)\n            : false;\n    const isInvisible = trackType === 'none' ||\n        viewportVisibilityState?.[trackType] === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.VisibilityState.INVISIBLE;\n    const hasNoVideoOrInvisible = !enabled ||\n        !isPublishingTrack ||\n        isInvisible ||\n        (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasPausedTrack)(participant, trackType);\n    const mirrorVideo = mirror === undefined\n        ? isLocalParticipant && trackType === 'videoTrack'\n        : mirror;\n    const isScreenShareTrack = trackType === 'screenShareTrack';\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [!hasNoVideoOrInvisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { ...rest, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video', className, {\n                    'str-video__video--not-playing': isVideoPaused,\n                    'str-video__video--tall': !isWideMode,\n                    'str-video__video--mirror': mirrorVideo,\n                    'str-video__video--screen-share': isScreenShareTrack,\n                }), \"data-user-id\": userId, \"data-session-id\": sessionId, ref: (element) => {\n                    setVideoElement(element);\n                    refs?.setVideoElement?.(element);\n                } })), isPiP && PictureInPicturePlaceholder && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PictureInPicturePlaceholder, { style: { position: 'absolute' }, participant: participant })), (hasNoVideoOrInvisible || isVideoPaused) && VideoPlaceholder && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VideoPlaceholder, { style: { position: 'absolute' }, participant: participant, ref: refs?.setVideoPlaceholderElement }))] }));\n};\nVideo$1.displayName = 'Video';\n\nconst useTrackElementVisibility = ({ trackedElement, dynascaleManager: propsDynascaleManager, sessionId, trackType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const manager = propsDynascaleManager ?? call?.dynascaleManager;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!trackedElement || !manager || !call || trackType === 'none')\n            return;\n        const unobserve = manager.trackElementVisibility(trackedElement, sessionId, trackType);\n        return () => {\n            unobserve();\n        };\n    }, [trackedElement, manager, call, sessionId, trackType]);\n};\n\nconst Avatar = ({ imageSrc, name, style, className, ...rest }) => {\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(!imageSrc || error) && name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AvatarFallback, { className: className, style: style, names: [name] })), imageSrc && !error && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { onError: () => setError(true), alt: \"avatar\", className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar', className), src: imageSrc, style: style, ...rest }))] }));\n};\nconst AvatarFallback = ({ className, names, style, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__avatar--initials-fallback', className), style: style, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { children: [names[0][0], names[1]?.[0]] }) }));\n};\n\n/**\n * The context for the background filters.\n */\nconst BackgroundFiltersContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(undefined);\n/**\n * A hook to access the background filters context API.\n */\nconst useBackgroundFilters = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(BackgroundFiltersContext);\n    if (!context) {\n        throw new Error('useBackgroundFilters must be used within a BackgroundFiltersProvider');\n    }\n    return context;\n};\n/**\n * A provider component that enables the use of background filters in your app.\n *\n * Please make sure you have the `@stream-io/video-filters-web` package installed\n * in your project before using this component.\n */\nconst BackgroundFiltersProvider = (props) => {\n    const { children, backgroundImages = [], backgroundFilter: bgFilterFromProps = undefined, backgroundImage: bgImageFromProps = undefined, backgroundBlurLevel: bgBlurLevelFromProps = undefined, tfFilePath, modelFilePath, basePath, onError, } = props;\n    const [backgroundFilter, setBackgroundFilter] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgFilterFromProps);\n    const [backgroundImage, setBackgroundImage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgImageFromProps);\n    const [backgroundBlurLevel, setBackgroundBlurLevel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(bgBlurLevelFromProps);\n    const applyBackgroundImageFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((imageUrl) => {\n        setBackgroundFilter('image');\n        setBackgroundImage(imageUrl);\n    }, []);\n    const applyBackgroundBlurFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((blurLevel = 'high') => {\n        setBackgroundFilter('blur');\n        setBackgroundBlurLevel(blurLevel);\n    }, []);\n    const disableBackgroundFilter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        setBackgroundFilter(undefined);\n        setBackgroundImage(undefined);\n        setBackgroundBlurLevel(undefined);\n    }, []);\n    const [isSupported, setIsSupported] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_9__.isPlatformSupported)().then(setIsSupported);\n    }, []);\n    const [tfLite, setTfLite] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        // don't try to load TFLite if the platform is not supported\n        if (!isSupported)\n            return;\n        (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_9__.loadTFLite)({ basePath, modelFilePath, tfFilePath })\n            .then(setTfLite)\n            .catch((err) => console.error('Failed to load TFLite', err));\n    }, [basePath, isSupported, modelFilePath, tfFilePath]);\n    const handleError = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((error) => {\n        (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger)(['filters'])('warn', 'Filter encountered an error and will be disabled');\n        disableBackgroundFilter();\n        onError?.(error);\n    }, [disableBackgroundFilter, onError]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(BackgroundFiltersContext.Provider, { value: {\n            isSupported,\n            isReady: !!tfLite,\n            backgroundImage,\n            backgroundBlurLevel,\n            backgroundFilter,\n            disableBackgroundFilter,\n            applyBackgroundBlurFilter,\n            applyBackgroundImageFilter,\n            backgroundImages,\n            tfFilePath,\n            modelFilePath,\n            basePath,\n            onError: handleError,\n        }, children: [children, tfLite && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BackgroundFilters, { tfLite: tfLite })] }));\n};\nconst BackgroundFilters = (props) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { children, start } = useRenderer(props.tfLite, call);\n    const { backgroundFilter, onError } = useBackgroundFilters();\n    const handleErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(undefined);\n    handleErrorRef.current = onError;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !backgroundFilter)\n            return;\n        const { unregister } = call.camera.registerFilter((ms) => start(ms, (error) => handleErrorRef.current?.(error)));\n        return () => {\n            unregister().catch((err) => console.warn(`Can't unregister filter`, err));\n        };\n    }, [backgroundFilter, call, start]);\n    return children;\n};\nconst useRenderer = (tfLite, call) => {\n    const { backgroundFilter, backgroundBlurLevel, backgroundImage } = useBackgroundFilters();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const bgImageRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const [videoSize, setVideoSize] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        width: 1920,\n        height: 1080,\n    });\n    const start = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((ms, onError) => {\n        let outputStream;\n        let renderer;\n        const output = new Promise((resolve, reject) => {\n            if (!backgroundFilter) {\n                reject(new Error('No filter specified'));\n                return;\n            }\n            const videoEl = videoRef.current;\n            const canvasEl = canvasRef.current;\n            const bgImageEl = bgImageRef.current;\n            if (!videoEl || !canvasEl || (backgroundImage && !bgImageEl)) {\n                // You should start renderer in effect or event handlers\n                reject(new Error('Renderer started before elements are ready'));\n                return;\n            }\n            videoEl.srcObject = ms;\n            videoEl.play().then(() => {\n                const [track] = ms.getVideoTracks();\n                if (!track) {\n                    reject(new Error('No video tracks in input media stream'));\n                    return;\n                }\n                const trackSettings = track.getSettings();\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_5__.flushSync)(() => setVideoSize({\n                    width: trackSettings.width ?? 0,\n                    height: trackSettings.height ?? 0,\n                }));\n                call?.tracer.trace('backgroundFilters.enable', {\n                    backgroundFilter,\n                    backgroundBlurLevel,\n                    backgroundImage,\n                });\n                renderer = (0,_stream_io_video_filters_web__WEBPACK_IMPORTED_MODULE_9__.createRenderer)(tfLite, videoEl, canvasEl, {\n                    backgroundFilter,\n                    backgroundBlurLevel,\n                    backgroundImage: bgImageEl ?? undefined,\n                }, onError);\n                outputStream = canvasEl.captureStream();\n                resolve(outputStream);\n            }, () => {\n                reject(new Error('Could not play the source video stream'));\n            });\n        });\n        return {\n            output,\n            stop: () => {\n                call?.tracer.trace('backgroundFilters.disable', null);\n                renderer?.dispose();\n                if (videoRef.current)\n                    videoRef.current.srcObject = null;\n                if (outputStream)\n                    (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.disposeOfMediaStream)(outputStream);\n            },\n        };\n    }, [\n        backgroundBlurLevel,\n        backgroundFilter,\n        backgroundImage,\n        call?.tracer,\n        tfLite,\n    ]);\n    const children = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__background-filters\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"video\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__background-filters__video', videoSize.height > videoSize.width &&\n                    'str-video__background-filters__video--tall'), ref: videoRef, playsInline: true, muted: true, controls: false, ...videoSize }), backgroundImage && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: \"str-video__background-filters__background-image\", alt: \"Background\", ref: bgImageRef, crossOrigin: \"anonymous\", src: backgroundImage, ...videoSize })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"canvas\", { className: \"str-video__background-filters__target-canvas\", ...videoSize, ref: canvasRef })] }));\n    return {\n        start,\n        children,\n    };\n};\n\nconst IconButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function IconButton(props, ref) {\n    const { icon, enabled, variant, onClick, className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-controls__button', className, {\n            [`str-video__call-controls__button--variant-${variant}`]: variant,\n            'str-video__call-controls__button--enabled': enabled,\n        }), onClick: (e) => {\n            e.preventDefault();\n            onClick?.(e);\n        }, ref: ref, ...rest, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: icon }) }));\n});\n\nconst CompositeButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CompositeButton({ disabled, caption, children, className, active, Menu, menuPlacement, menuOffset, title, ToggleMenuButton = DefaultToggleMenuButton, variant, onClick, onMenuToggle, ...restButtonProps }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button', className, {\n            'str-video__composite-button--caption': caption,\n            'str-video__composite-button--menu': Menu,\n        }), title: title, ref: ref, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__composite-button__button-group', {\n                    'str-video__composite-button__button-group--active': active,\n                    'str-video__composite-button__button-group--active-primary': active && variant === 'primary',\n                    'str-video__composite-button__button-group--active-secondary': active && variant === 'secondary',\n                    'str-video__composite-button__button-group--disabled': disabled,\n                }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__composite-button__button\", onClick: (e) => {\n                            e.preventDefault();\n                            onClick?.(e);\n                        }, disabled: disabled, ...restButtonProps, children: children }), Menu && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { offset: menuOffset, placement: menuPlacement, ToggleButton: ToggleMenuButton, onToggle: onMenuToggle, children: isComponentType(Menu) ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) : Menu }))] }), caption && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__composite-button__caption\", children: caption }))] }));\n});\nconst DefaultToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function DefaultToggleMenuButton({ menuShown }, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__menu-toggle-button', {\n            'str-video__menu-toggle-button--active': menuShown,\n        }), icon: menuShown ? 'caret-down' : 'caret-up', ref: ref }));\n});\n\nconst TextButton = ({ children, ...rest }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { ...rest, className: \"str-video__text-button\", children: children }));\n};\n\nconst AcceptCallButton = ({ disabled, onAccept, onClick, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.join();\n            onAccept?.();\n        }\n    }, [onClick, onAccept, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-accept\", variant: \"success\", \"data-testid\": \"accept-call-button\", onClick: handleClick }));\n};\n\nconst Notification = (props) => {\n    const { isVisible, message, children, visibilityTimeout, resetIsVisible, placement = 'top', iconClassName = 'str-video__notification__icon', close, } = props;\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement,\n        strategy: 'absolute',\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isVisible || !visibilityTimeout || !resetIsVisible)\n            return;\n        const timeout = setTimeout(() => {\n            resetIsVisible();\n        }, visibilityTimeout);\n        return () => clearTimeout(timeout);\n    }, [isVisible, resetIsVisible, visibilityTimeout]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: refs.setReference, children: [isVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__notification\", ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, children: [iconClassName && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: iconClassName }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__notification__message\", children: message }), close ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"i\", { className: \"str-video__icon str-video__icon--close str-video__notification__close\", onClick: close })) : null] })), children] }));\n};\n\nconst PermissionNotification = (props) => {\n    const { permission, isAwaitingApproval, messageApproved, messageAwaitingApproval, messageRevoked, visibilityTimeout = 3500, children, } = props;\n    const { useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const hasPermission = useHasPermissions(permission);\n    const prevHasPermission = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(hasPermission);\n    const [showNotification, setShowNotification] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (hasPermission && !prevHasPermission.current) {\n            setShowNotification('granted');\n            prevHasPermission.current = true;\n        }\n        else if (!hasPermission && prevHasPermission.current) {\n            setShowNotification('revoked');\n            prevHasPermission.current = false;\n        }\n    }, [hasPermission]);\n    const resetIsVisible = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setShowNotification(undefined), []);\n    if (isAwaitingApproval) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isAwaitingApproval && !hasPermission, message: messageAwaitingApproval, children: children }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: !!showNotification, visibilityTimeout: visibilityTimeout, resetIsVisible: resetIsVisible, message: showNotification === 'granted' ? messageApproved : messageRevoked, children: children }));\n};\n\nconst SpeakingWhileMutedNotification = ({ children, text, placement, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { isSpeakingWhileMuted } = useMicrophoneState();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const message = text ?? t('You are muted. Unmute to speak.');\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, isVisible: isSpeakingWhileMuted, placement: placement || 'top-start', children: children }));\n};\n\nconst RecordingInProgressNotification = ({ children, text, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { isCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useToggleCallRecording)();\n    const [isVisible, setVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const message = text ?? t('Recording in progress...');\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (isCallRecordingInProgress) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n    }, [isCallRecordingInProgress]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { message: message, iconClassName: \"str-video__icon str-video__icon--recording-on\", isVisible: isVisible, placement: \"top-start\", close: () => setVisible(false), children: children }));\n};\n\nconst LoadingIndicator = ({ className, type = 'spinner', text, tooltip, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator', className), title: tooltip, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__loading-indicator__icon', type) }), text && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__loading-indicator-text\", children: text })] }));\n};\n\nconst Tooltip = ({ children, referenceElement, tooltipClassName, tooltipPlacement = 'top', visible = false, }) => {\n    const arrowRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const { refs, x, y, strategy, context } = useFloatingUIPreset({\n        placement: tooltipPlacement,\n        strategy: 'absolute',\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.arrow)({ element: arrowRef })],\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        refs.setReference(referenceElement);\n    }, [referenceElement, refs]);\n    if (!visible)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__tooltip', tooltipClassName), ref: refs.setFloating, style: {\n            position: strategy,\n            top: y ?? 0,\n            left: x ?? 0,\n        }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.FloatingArrow, { ref: arrowRef, context: context, fill: \"var(--str-video__tooltip--background-color)\" }), children] }));\n};\n\nconst useEnterLeaveHandlers = ({ onMouseEnter, onMouseLeave, } = {}) => {\n    const [tooltipVisible, setTooltipVisible] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(true);\n        onMouseEnter?.(e);\n    }, [onMouseEnter]);\n    const handleMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((e) => {\n        setTooltipVisible(false);\n        onMouseLeave?.(e);\n    }, [onMouseLeave]);\n    return { handleMouseEnter, handleMouseLeave, tooltipVisible };\n};\n\n// todo: duplicate of CallParticipantList.tsx#MediaIndicator - refactor to a single component\nconst WithTooltip = ({ title, tooltipClassName, tooltipPlacement, tooltipDisabled, ...props }) => {\n    const { handleMouseEnter, handleMouseLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const [tooltipAnchor, setTooltipAnchor] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const tooltipActuallyVisible = !tooltipDisabled && Boolean(title) && tooltipVisible;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Tooltip, { referenceElement: tooltipAnchor, visible: tooltipActuallyVisible, tooltipClassName: tooltipClassName, tooltipPlacement: tooltipPlacement, children: title || '' }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: setTooltipAnchor, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, ...props })] }));\n};\n\nconst RecordEndConfirmation = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useToggleCallRecording)();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-on\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"h2\", { className: \"str-video__end-recording__heading\", children: t('End recording') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__end-recording__description\", children: t('Are you sure you want end the recording?') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-recording__actions\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"secondary\", onClick: close, children: t('Cancel') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { variant: \"primary\", onClick: toggleCallRecording, children: isAwaitingResponse ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {}) : t('End recording') })] })] }));\n};\nconst ToggleEndRecordingMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleEndRecordingMenuButton(props, ref) {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: true, variant: \"secondary\", \"data-testid\": \"recording-stop-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" }) }));\n});\nconst RecordCallConfirmationButton = ({ caption, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useToggleCallRecording)();\n    if (isCallRecordingInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n            ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { ToggleButton: ToggleEndRecordingMenuButton, visualType: MenuVisualType.PORTAL, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordEndConfirmation, {}) }) }));\n    }\n    const title = isAwaitingResponse\n        ? t('Waiting for recording to start...')\n        : (caption ?? t('Record call'));\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: title, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": \"recording-start-button\", onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"recording-off\" })) }) }) }));\n};\nconst RecordCallButton = ({ caption }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { toggleCallRecording, isAwaitingResponse, isCallRecordingInProgress } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useToggleCallRecording)();\n    let title = caption ?? t('Record call');\n    if (isAwaitingResponse) {\n        title = isCallRecordingInProgress\n            ? t('Waiting for recording to stop...')\n            : t('Waiting for recording to start...');\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n        ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isCallRecordingInProgress, caption: caption, variant: \"secondary\", \"data-testid\": isCallRecordingInProgress\n                ? 'recording-stop-button'\n                : 'recording-start-button', title: title, onClick: isAwaitingResponse ? undefined : toggleCallRecording, children: isAwaitingResponse ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, {})) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isCallRecordingInProgress ? 'recording-on' : 'recording-off' })) }) }));\n};\n\nconst defaultEmojiReactionMap = {\n    ':like:': '👍',\n    ':raise-hand:': '✋',\n    ':fireworks:': '🎉',\n    ':dislike:': '👎',\n    ':heart:': '❤️',\n    ':smile:': '😀',\n};\nconst Reaction = ({ participant: { reaction, sessionId }, hideAfterTimeoutInMs = 5500, emojiReactionMap = defaultEmojiReactionMap, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !reaction)\n            return;\n        const timeoutId = setTimeout(() => {\n            call.resetReaction(sessionId);\n        }, hideAfterTimeoutInMs);\n        return () => {\n            clearTimeout(timeoutId);\n        };\n    }, [call, hideAfterTimeoutInMs, reaction, sessionId]);\n    if (!reaction)\n        return null;\n    const { emoji_code: emojiCode } = reaction;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__reaction\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__reaction__emoji\", children: emojiCode && emojiReactionMap[emojiCode] }) }));\n};\n\nconst defaultReactions = [\n    {\n        type: 'reaction',\n        emoji_code: ':like:',\n    },\n    {\n        // TODO OL: use `prompt` type?\n        type: 'raised-hand',\n        emoji_code: ':raise-hand:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':fireworks:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':dislike:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':heart:',\n    },\n    {\n        type: 'reaction',\n        emoji_code: ':smile:',\n    },\n];\nconst ReactionsButton = ({ reactions = defaultReactions, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.CREATE_REACTION], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top\", ToggleButton: ToggleReactionsMenuButton, visualType: MenuVisualType.MENU, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultReactionsMenu, { reactions: reactions }) }) }));\n};\nconst ToggleReactionsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleReactionsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: t('Reactions'), tooltipDisabled: menuShown, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, variant: \"primary\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"reactions\" }) }) }));\n});\nconst DefaultReactionsMenu = ({ reactions, layout = 'horizontal', }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { close } = useMenuContext();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__reactions-menu', {\n            'str-video__reactions-menu--horizontal': layout === 'horizontal',\n            'str-video__reactions-menu--vertical': layout === 'vertical',\n        }), children: reactions.map((reaction) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { type: \"button\", className: \"str-video__reactions-menu__button\", onClick: () => {\n                call?.sendReaction(reaction);\n                close?.();\n            }, children: reaction.emoji_code && defaultEmojiReactionMap[reaction.emoji_code] }, reaction.emoji_code))) }));\n};\n\n/**\n * Wraps an event handler, silencing and logging exceptions (excluding the NotAllowedError\n * DOMException, which is a normal situation handled by the SDK)\n *\n * @param props component props, including the onError callback\n * @param handler event handler to wrap\n */\nconst createCallControlHandler = (props, handler) => {\n    const logger = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.getLogger)(['react-sdk']);\n    return async () => {\n        try {\n            await handler();\n        }\n        catch (error) {\n            if (props.onError) {\n                props.onError(error);\n                return;\n            }\n            if (!isNotAllowedError(error)) {\n                logger('error', 'Call control handler failed', error);\n            }\n        }\n    };\n};\nfunction isNotAllowedError(error) {\n    return error instanceof DOMException && error.name === 'NotAllowedError';\n}\n\nconst ScreenShareButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption } = props;\n    const { useHasOngoingScreenShare, useScreenShareState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isSomeoneScreenSharing = useHasOngoingScreenShare();\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE);\n    const callSettings = useCallSettings();\n    const isScreenSharingAllowed = callSettings?.screensharing.enabled;\n    const { screenShare, optimisticIsMute } = useScreenShareState();\n    const amIScreenSharing = !optimisticIsMute;\n    const disableScreenShareButton = !amIScreenSharing &&\n        (isSomeoneScreenSharing || isScreenSharingAllowed === false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await screenShare.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your screen.'), messageAwaitingApproval: t('Awaiting for an approval to share screen.'), messageRevoked: t('You can no longer share your screen.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: caption ?? t('Share screen'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { active: isSomeoneScreenSharing || amIScreenSharing, caption: caption, variant: \"primary\", \"data-testid\": isSomeoneScreenSharing\n                        ? 'screen-share-stop-button'\n                        : 'screen-share-start-button', disabled: disableScreenShareButton, onClick: handleClick, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: isSomeoneScreenSharing ? 'screen-share-on' : 'screen-share-off' }) }) }) }) }));\n};\n\nconst SelectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)({});\nconst Select = (props) => {\n    const { children, icon, defaultSelectedLabel, defaultSelectedIndex, handleSelect: handleSelectProp, } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [activeIndex, setActiveIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [selectedIndex, setSelectedIndex] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedIndex);\n    const [selectedLabel, setSelectedLabel] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(defaultSelectedLabel);\n    const { refs, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useFloating)({\n        placement: 'bottom-start',\n        open: isOpen,\n        onOpenChange: setIsOpen,\n        whileElementsMounted: _floating_ui_react__WEBPACK_IMPORTED_MODULE_8__.autoUpdate,\n        middleware: [(0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_7__.flip)()],\n    });\n    const elementsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const labelsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        setSelectedIndex(index);\n        handleSelectProp(index || 0);\n        setIsOpen(false);\n        if (index !== null) {\n            setSelectedLabel(labelsRef.current[index]);\n        }\n    }, [handleSelectProp]);\n    const handleTypeaheadMatch = (index) => {\n        if (isOpen) {\n            setActiveIndex(index);\n        }\n        else {\n            handleSelect(index);\n        }\n    };\n    const listNav = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useListNavigation)(context, {\n        listRef: elementsRef,\n        activeIndex,\n        selectedIndex,\n        onNavigate: setActiveIndex,\n    });\n    const typeahead = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useTypeahead)(context, {\n        listRef: labelsRef,\n        activeIndex,\n        selectedIndex,\n        onMatch: handleTypeaheadMatch,\n    });\n    const click = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useClick)(context);\n    const dismiss = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useDismiss)(context);\n    const role = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useRole)(context, { role: 'listbox' });\n    const { getReferenceProps, getFloatingProps, getItemProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useInteractions)([listNav, typeahead, click, dismiss, role]);\n    const selectContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        activeIndex,\n        selectedIndex,\n        getItemProps,\n        handleSelect,\n    }), [activeIndex, selectedIndex, getItemProps, handleSelect]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__dropdown-selected\", ref: refs.setReference, tabIndex: 0, ...getReferenceProps(), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: \"str-video__dropdown-selected__label\", children: [icon && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__icon\", icon: icon })), selectedLabel] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-selected__chevron\", icon: isOpen ? 'chevron-up' : 'chevron-down' })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SelectContext.Provider, { value: selectContext, children: isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.FloatingFocusManager, { context: context, modal: false, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__dropdown-list\", ref: refs.setFloating, ...getFloatingProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.FloatingList, { elementsRef: elementsRef, labelsRef: labelsRef, children: children }) }) })) })] }));\n};\nconst DropDownSelectOption = (props) => {\n    const { selected, label, icon } = props;\n    const { getItemProps, handleSelect } = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(SelectContext);\n    const { ref, index } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useListItem)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__dropdown-option', {\n            'str-video__dropdown-option--selected': selected,\n        }), ref: ref, ...getItemProps({\n            onClick: () => handleSelect(index),\n        }), children: [icon && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__dropdown-icon\", icon: icon }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__dropdown-label\", children: label })] }));\n};\nconst DropDownSelect = (props) => {\n    const { children, icon, handleSelect, defaultSelectedLabel, defaultSelectedIndex, } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Select, { icon: icon, handleSelect: handleSelect, defaultSelectedIndex: defaultSelectedIndex, defaultSelectedLabel: defaultSelectedLabel, children: children }));\n};\n\nconst DeviceSelectorOption = ({ disabled, id, label, onChange, name, selected, defaultChecked, value, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"label\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__option', {\n            'str-video__device-settings__option--selected': selected,\n            'str-video__device-settings__option--disabled': disabled,\n        }), htmlFor: id, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { type: \"radio\", name: name, onChange: onChange, value: value, id: id, checked: selected, defaultChecked: defaultChecked, disabled: disabled }), label] }));\n};\nconst DeviceSelectorList = (props) => {\n    const { devices = [], selectedDeviceId, title, type, onChange } = props;\n    const { close } = useMenuContext();\n    const { deviceList } = useDeviceList(devices, selectedDeviceId);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [title && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title })), deviceList.map((device) => {\n                return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorOption, { id: `${type}--${device.deviceId}`, value: device.deviceId, label: device.label, onChange: (e) => {\n                        const deviceId = e.target.value;\n                        if (deviceId !== 'default') {\n                            onChange?.(deviceId);\n                        }\n                        close?.();\n                    }, name: type, selected: device.isSelected }, device.deviceId));\n            })] }));\n};\nconst DeviceSelectorDropdown = (props) => {\n    const { devices = [], selectedDeviceId, title, onChange, icon } = props;\n    const { deviceList, selectedDeviceInfo, selectedIndex } = useDeviceList(devices, selectedDeviceId);\n    const handleSelect = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((index) => {\n        const deviceId = deviceList[index].deviceId;\n        if (deviceId !== 'default') {\n            onChange?.(deviceId);\n        }\n    }, [deviceList, onChange]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings__device-kind\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__device-settings__device-selector-title\", children: title }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelect, { icon: icon, defaultSelectedIndex: selectedIndex, defaultSelectedLabel: selectedDeviceInfo.label, handleSelect: handleSelect, children: deviceList.map((device) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropDownSelectOption, { icon: icon, label: device.label, selected: device.isSelected }, device.deviceId))) })] }));\n};\nconst DeviceSelector = (props) => {\n    const { visualType = 'list', icon, ...rest } = props;\n    if (visualType === 'list') {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorList, { ...rest });\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorDropdown, { ...rest, icon: icon });\n};\n\nconst DeviceSelectorAudioInput = ({ title, visualType, }) => {\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, selectedDevice, devices } = useMicrophoneState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], selectedDeviceId: selectedDevice, type: \"audioinput\", onChange: async (deviceId) => {\n            await microphone.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"mic\" }));\n};\nconst DeviceSelectorAudioOutput = ({ title, visualType, }) => {\n    const { useSpeakerState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { speaker, selectedDevice, devices, isDeviceSelectionSupported } = useSpeakerState();\n    if (!isDeviceSelectionSupported)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices, type: \"audiooutput\", selectedDeviceId: selectedDevice, onChange: (deviceId) => {\n            speaker.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"speaker\" }));\n};\n\nconst DeviceSelectorVideo = ({ title, visualType, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, devices, selectedDevice } = useCameraState();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelector, { devices: devices || [], type: \"videoinput\", selectedDeviceId: selectedDevice, onChange: async (deviceId) => {\n            await camera.select(deviceId);\n        }, title: title, visualType: visualType, icon: \"camera\" }));\n};\n\nconst DeviceSettings = ({ visualType = MenuVisualType.MENU, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleDeviceSettingsMenuButton, visualType: visualType, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Menu, {}) }));\n};\nconst Menu = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__device-settings\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { title: t('Select a Camera') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { title: t('Select a Mic') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioOutput, { title: t('Select Speakers') })] }));\n};\nconst ToggleDeviceSettingsMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleDeviceSettingsMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__device-settings__button', {\n            'str-video__device-settings__button--active': menuShown,\n        }), title: t('Toggle device menu'), icon: \"device-settings\", ref: ref }));\n});\n\nconst ToggleAudioPreviewButton = (props) => {\n    const { caption, Menu = DeviceSelectorAudioInput, menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useMicrophoneState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, () => microphone.toggle());\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasBrowserPermission\n            ? t('Check your browser audio permissions')\n            : (caption ?? t('Mic')), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", disabled: !hasBrowserPermission, \"data-testid\": optimisticIsMute\n                ? 'preview-audio-unmute-button'\n                : 'preview-audio-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !optimisticIsMute ? 'mic' : 'mic-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser audio permissions'), children: \"!\" })), isPromptingPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__pending-permission\", title: t('Waiting for permission'), children: \"?\" }))] }) }));\n};\nconst ToggleAudioPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorAudioInput, { visualType: \"list\" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO);\n    const { useMicrophoneState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { microphone, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useMicrophoneState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await microphone.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now speak.'), messageAwaitingApproval: t('Awaiting for an approval to speak.'), messageRevoked: t('You can no longer speak.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasPermission\n                    ? t('You have no permission to share your audio')\n                    : !hasBrowserPermission\n                        ? t('Check your browser mic permissions')\n                        : (caption ?? t('Mic')), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, variant: \"secondary\", disabled: !hasBrowserPermission || !hasPermission, \"data-testid\": optimisticIsMute ? 'audio-unmute-button' : 'audio-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                        setTooltipDisabled(shown);\n                        onMenuToggle?.(shown);\n                    }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: optimisticIsMute ? 'mic-off' : 'mic' }), (!hasBrowserPermission || !hasPermission) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" })), isPromptingPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__pending-permission\", title: t('Waiting for permission'), children: \"?\" }))] }) }) }) }));\n};\n\nconst ToggleVideoPreviewButton = (props) => {\n    const { caption, Menu = DeviceSelectorVideo, menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useCameraState();\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, () => camera.toggle());\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasBrowserPermission\n            ? t('Check your browser video permissions')\n            : (caption ?? t('Video')), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(!hasBrowserPermission && 'str-video__device-unavailable'), variant: \"secondary\", \"data-testid\": optimisticIsMute\n                ? 'preview-video-unmute-button'\n                : 'preview-video-mute-button', onClick: handleClick, disabled: !hasBrowserPermission, Menu: Menu, menuPlacement: menuPlacement, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: !optimisticIsMute ? 'camera' : 'camera-off' }), !hasBrowserPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", title: t('Check your browser video permissions'), children: \"!\" })), isPromptingPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__pending-permission\", title: t('Waiting for permission'), children: \"?\" }))] }) }));\n};\nconst ToggleVideoPublishingButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DeviceSelectorVideo, { visualType: \"list\" }), menuPlacement = 'top', onMenuToggle, ...restCompositeButtonProps } = props;\n    const { hasPermission, requestPermission, isAwaitingPermission } = useRequestPermission(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO);\n    const { useCameraState, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { camera, optimisticIsMute, hasBrowserPermission, isPromptingPermission, } = useCameraState();\n    const callSettings = useCallSettings();\n    const isPublishingVideoAllowed = callSettings?.video.enabled;\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const handleClick = createCallControlHandler(props, async () => {\n        if (!hasPermission) {\n            await requestPermission();\n        }\n        else {\n            await camera.toggle();\n        }\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionNotification, { permission: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO, isAwaitingApproval: isAwaitingPermission, messageApproved: t('You can now share your video.'), messageAwaitingApproval: t('Awaiting for an approval to share your video.'), messageRevoked: t('You can no longer share your video.'), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: !hasPermission\n                    ? t('You have no permission to share your video')\n                    : !hasBrowserPermission\n                        ? t('Check your browser video permissions')\n                        : !isPublishingVideoAllowed\n                            ? t('Video publishing is disabled by the system')\n                            : caption || t('Video'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(CompositeButton, { active: optimisticIsMute, caption: caption, variant: \"secondary\", disabled: !hasBrowserPermission ||\n                        !hasPermission ||\n                        !isPublishingVideoAllowed, \"data-testid\": optimisticIsMute ? 'video-unmute-button' : 'video-mute-button', onClick: handleClick, Menu: Menu, menuPlacement: menuPlacement, menuOffset: 16, ...restCompositeButtonProps, onMenuToggle: (shown) => {\n                        setTooltipDisabled(shown);\n                        onMenuToggle?.(shown);\n                    }, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: optimisticIsMute ? 'camera-off' : 'camera' }), (!hasBrowserPermission ||\n                            !hasPermission ||\n                            !isPublishingVideoAllowed) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__no-media-permission\", children: \"!\" })), isPromptingPermission && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__pending-permission\", title: t('Waiting for permission'), children: \"?\" }))] }) }) }) }));\n};\n\nconst EndCallMenu = (props) => {\n    const { onLeave, onEnd } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__end-call__confirmation\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__leave\", type: \"button\", \"data-testid\": \"leave-call-button\", onClick: onLeave, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__leave-icon\", icon: \"logout\" }), t('Leave call')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.END_CALL], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { className: \"str-video__button str-video__end-call__end\", type: \"button\", \"data-testid\": \"end-call-for-all-button\", onClick: onEnd, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__button__icon str-video__end-call__end-icon\", icon: \"call-end\" }), t('End call for all')] }) })] }));\n};\nconst CancelCallToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function CancelCallToggleMenuButton({ menuShown }, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: t('Leave call'), tooltipDisabled: menuShown, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: menuShown ? 'close' : 'call-end', variant: menuShown ? 'active' : 'danger', \"data-testid\": \"leave-call-button\", ref: ref }) }));\n});\nconst CancelCallConfirmButton = ({ onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const handleLeave = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    const handleEndCall = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.endCall();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-start\", ToggleButton: CancelCallToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EndCallMenu, { onEnd: handleEndCall, onLeave: handleLeave }) }));\n};\nconst CancelCallButton = ({ disabled, caption, onClick, onLeave, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const handleClick = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (e) => {\n        if (onClick) {\n            onClick(e);\n        }\n        else if (call) {\n            await call.leave();\n            onLeave?.();\n        }\n    }, [onClick, onLeave, call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: disabled, icon: \"call-end\", variant: \"danger\", title: caption ?? t('Leave call'), \"data-testid\": \"cancel-call-button\", onClick: handleClick }));\n};\n\nconst CallControls = ({ onLeave }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-controls\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeakingWhileMutedNotification, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleAudioPublishingButton, {}) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ToggleVideoPublishingButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.CREATE_REACTION], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ReactionsButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ScreenShareButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.START_RECORD_CALL,\n                _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.STOP_RECORD_CALL,\n            ], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RecordCallButton, {}) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onLeave: onLeave })] }));\n\nconst CallStatsLatencyChart = (0,react__WEBPACK_IMPORTED_MODULE_3__.lazy)(() => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@stream-io\"), __webpack_require__.e(\"vendor-chunks/chart.js\"), __webpack_require__.e(\"vendor-chunks/react-chartjs-2\"), __webpack_require__.e(\"vendor-chunks/@kurkle\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./latency-chart-Bj5OSYzg.es.js */ \"(ssr)/./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js\")));\nvar Status;\n(function (Status) {\n    Status[\"GOOD\"] = \"Good\";\n    Status[\"OK\"] = \"Ok\";\n    Status[\"BAD\"] = \"Bad\";\n})(Status || (Status = {}));\nconst CallStats = (props) => {\n    const { latencyLowBound = 75, latencyHighBound = 400, showCodecInfo = false, LatencyChartSuspenseFallback = null, } = props;\n    const [latencyBuffer, setLatencyBuffer] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        const now = Date.now();\n        return Array.from({ length: 20 }, (_, i) => ({ x: now + i, y: 0 }));\n    });\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const [publishBitrate, setPublishBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const [subscribeBitrate, setSubscribeBitrate] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('-');\n    const previousStats = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(undefined);\n    const { useCallStatsReport } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callStatsReport = useCallStatsReport();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!callStatsReport)\n            return;\n        if (!previousStats.current) {\n            previousStats.current = callStatsReport;\n            return;\n        }\n        const previousCallStatsReport = previousStats.current;\n        setPublishBitrate(() => {\n            return calculatePublishBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setSubscribeBitrate(() => {\n            return calculateSubscribeBitrate(previousCallStatsReport, callStatsReport);\n        });\n        setLatencyBuffer((latencyBuf) => {\n            const newLatencyBuffer = latencyBuf.slice(-19);\n            newLatencyBuffer.push({\n                x: callStatsReport.timestamp,\n                y: callStatsReport.publisherStats.averageRoundTripTimeInMs,\n            });\n            return newLatencyBuffer;\n        });\n        previousStats.current = callStatsReport;\n    }, [callStatsReport]);\n    const latencyComparison = {\n        lowBound: latencyLowBound,\n        highBound: latencyHighBound,\n        value: callStatsReport?.publisherStats.averageRoundTripTimeInMs || 0,\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats\", children: callStatsReport && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"call-latency\" }), t('Call Latency')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Very high latency values may reduce call quality, cause lag, and make the call less enjoyable.') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__latencychart\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Suspense, { fallback: LatencyChartSuspenseFallback, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStatsLatencyChart, { values: latencyBuffer }) }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"h3\", { className: \"str-video__call-stats__heading\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-stats__icon\", icon: \"network-quality\" }), t('Call performance')] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-stats__description\", children: t('Review the key data points below to assess call performance') })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-container\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Region'), value: callStatsReport.datacenter }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Latency'), value: `${callStatsReport.publisherStats.averageRoundTripTimeInMs} ms.`, comparison: latencyComparison }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receive jitter'), value: `${callStatsReport.subscriberStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.subscriberStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish jitter'), value: `${callStatsReport.publisherStats.averageJitterInMs} ms.`, comparison: {\n                                ...latencyComparison,\n                                value: callStatsReport.publisherStats.averageJitterInMs,\n                            } }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: `${t('Publish resolution')}${showCodecInfo ? formatCodec(callStatsReport) : ''}`, value: toFrameSize(callStatsReport.publisherStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish quality drop reason'), value: callStatsReport.publisherStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receiving resolution'), value: toFrameSize(callStatsReport.subscriberStats) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receive quality drop reason'), value: callStatsReport.subscriberStats.qualityLimitationReasons }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Publish bitrate'), value: publishBitrate }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCard, { label: t('Receiving bitrate'), value: subscribeBitrate })] })] })) }));\n};\nconst StatCardExplanation = (props) => {\n    const { description } = props;\n    const [isOpen, setIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const { refs, floatingStyles, context } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useFloating)({\n        open: isOpen,\n        onOpenChange: setIsOpen,\n    });\n    const hover = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useHover)(context);\n    const { getReferenceProps, getFloatingProps } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_6__.useInteractions)([hover]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation\", ref: refs.setReference, ...getReferenceProps(), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { className: \"str-video__call-explanation__icon\", icon: \"info\" }) }), isOpen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-explanation__description\", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: description }))] }));\n};\nconst StatsTag = (props) => {\n    const { children, status } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-stats__tag', {\n            'str-video__call-stats__tag--good': status === Status.GOOD,\n            'str-video__call-stats__tag--ok': status === Status.OK,\n            'str-video__call-stats__tag--bad': status === Status.BAD,\n        }), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__tag__text\", children: children }) }));\n};\nconst StatCard = (props) => {\n    const { label, value, description, comparison } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const status = comparison ? toStatus(comparison) : undefined;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-content\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-stats__card-label\", children: [label, description && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatCardExplanation, { description: description })] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-stats__card-value\", children: value })] }), status && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StatsTag, { status: status, children: t(status) })] }));\n};\nconst toStatus = (config) => {\n    const { value, lowBound, highBound } = config;\n    if (value <= lowBound)\n        return Status.GOOD;\n    if (value >= lowBound && value <= highBound)\n        return Status.OK;\n    if (value >= highBound)\n        return Status.BAD;\n    return Status.GOOD;\n};\nconst toFrameSize = (stats) => {\n    const { highestFrameWidth: w, highestFrameHeight: h, highestFramesPerSecond: fps, } = stats;\n    let size = `-`;\n    if (w && h) {\n        size = `${w}x${h}`;\n        if (fps) {\n            size += `@${fps}fps.`;\n        }\n    }\n    return size;\n};\nconst formatCodec = (callStatsReport) => {\n    const { codecPerTrackType } = callStatsReport.publisherStats;\n    if (!codecPerTrackType || !codecPerTrackType[_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO]) {\n        return '';\n    }\n    const [, name] = codecPerTrackType[_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.TrackType.VIDEO].split('/');\n    return name ? ` (${name})` : '';\n};\nconst calculatePublishBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { publisherStats: { totalBytesSent: previousTotalBytesSent, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { publisherStats: { totalBytesSent, timestamp }, } = callStatsReport;\n    const bytesSent = totalBytesSent - previousTotalBytesSent;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesSent * 8) / timeElapsed).toFixed(2)} kbps`;\n};\nconst calculateSubscribeBitrate = (previousCallStatsReport, callStatsReport) => {\n    const { subscriberStats: { totalBytesReceived: previousTotalBytesReceived, timestamp: previousTimestamp, }, } = previousCallStatsReport;\n    const { subscriberStats: { totalBytesReceived, timestamp }, } = callStatsReport;\n    const bytesReceived = totalBytesReceived - previousTotalBytesReceived;\n    const timeElapsed = timestamp - previousTimestamp;\n    return `${((bytesReceived * 8) / timeElapsed).toFixed(2)} kbps`;\n};\n\nconst CallStatsButton = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"top-end\", ToggleButton: ToggleMenuButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallStats, {}) }));\nconst ToggleMenuButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleMenuButton(props, ref) {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, menuShown } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { ref: ref, active: menuShown, caption: caption, title: caption || t('Statistics'), \"data-testid\": \"stats-button\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"stats\" }) }));\n});\n\nconst ToggleAudioOutputButton = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { caption, Menu = DeviceSelectorAudioOutput, menuPlacement = 'top', onMenuToggle, } = props;\n    const [tooltipDisabled, setTooltipDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { title: caption || t('Speakers'), tooltipDisabled: tooltipDisabled, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CompositeButton, { Menu: Menu, menuPlacement: menuPlacement, caption: caption, \"data-testid\": \"audio-output-button\", onMenuToggle: (shown) => {\n                setTooltipDisabled(shown);\n                onMenuToggle?.(shown);\n            }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"speaker\" }) }) }));\n};\n\nconst BlockedUserListing = ({ data }) => {\n    if (!data.length)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((userId) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUserListingItem, { userId: userId }, userId))) }) }));\n};\nconst BlockedUserListingItem = ({ userId }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const unblockUserClickHandler = () => {\n        if (userId)\n            call?.unblockUser(userId);\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing-item__display-name\", children: userId }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.BLOCK_USERS], children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: unblockUserClickHandler, children: \"Unblock\" }) })] }));\n};\n\nconst CallParticipantListHeader = ({ onClose, }) => {\n    const { useParticipants, useAnonymousParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants();\n    const anonymousParticipantCount = useAnonymousParticipantCount();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list-header__title\", children: [t('Participants'), ' ', (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-list-header__title-count\", children: [\"[\", participants.length, \"]\"] }), anonymousParticipantCount > 0 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-list-header__title-anonymous\", children: t('Anonymous', { count: anonymousParticipantCount }) }))] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: onClose, className: \"str-video__participant-list-header__close-button\", icon: \"close\" })] }));\n};\n\nconst CallParticipantListingItem = ({ participant, DisplayName = DefaultDisplayName, }) => {\n    const isAudioOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const isVideoOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const isPinnedOn = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned)(participant);\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: participant.name, imageSrc: participant.image }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisplayName, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-listing-item__media-indicator-group\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isAudioOn ? t('Microphone on') : t('Microphone off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isAudioOn ? 'mic' : 'mic-off'}`) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: isVideoOn ? t('Camera on') : t('Camera off'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', `str-video__participant-listing-item__icon-${isVideoOn ? 'camera' : 'camera-off'}`) }), isPinnedOn && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MediaIndicator, { title: t('Pinned'), className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-listing-item__icon', 'str-video__participant-listing-item__icon-pinned') })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$2, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewContext.Provider, { value: { participant, trackType: 'none' }, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu, {}) }) })] })] }));\n};\nconst MediaIndicator = (props) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { ...props }));\nconst DefaultDisplayName = ({ participant }) => {\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const meFlag = participant.userId === connectedUser?.id ? t('Me') : '';\n    const nameOrId = participant.name || participant.userId || t('Unknown');\n    let displayName;\n    if (!participant.name) {\n        displayName = meFlag || nameOrId || t('Unknown');\n    }\n    else if (meFlag) {\n        displayName = `${nameOrId} (${meFlag})`;\n    }\n    else {\n        displayName = nameOrId;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(WithTooltip, { className: \"str-video__participant-listing-item__display-name\", title: displayName, children: displayName }));\n};\nconst ToggleButton$2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\n\nconst CallParticipantListing = ({ data, }) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-listing\", children: data.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListingItem, { participant: participant }, participant.sessionId))) }));\n\nconst EmptyParticipantSearchList = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list--empty\", children: t('No participants found') }));\n};\n\nconst SearchInput = ({ exitSearch, isActive, ...rest }) => {\n    const [inputElement, setInputElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!inputElement)\n            return;\n        const handleKeyDown = (e) => {\n            if (e.key.toLowerCase() === 'escape')\n                exitSearch();\n        };\n        inputElement.addEventListener('keydown', handleKeyDown);\n        return () => {\n            inputElement.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [exitSearch, inputElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__search-input__container', {\n            'str-video__search-input__container--active': isActive,\n        }), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"input\", { placeholder: \"Search\", ...rest, ref: setInputElement }), isActive ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: \"str-video__search-input__clear-btn\", onClick: exitSearch, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon--active\" }) })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__search-input__icon\" }))] }));\n};\n\nfunction SearchResults({ EmptySearchResultComponent, LoadingIndicator: LoadingIndicator$1 = LoadingIndicator, searchQueryInProgress, searchResults, SearchResultList, }) {\n    if (searchQueryInProgress) {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__search-results--loading\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator$1, {}) }));\n    }\n    if (!searchResults.length) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptySearchResultComponent, {});\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResultList, { data: searchResults });\n}\n\nconst useSearch = ({ debounceInterval = 200, searchFn, searchQuery = '', }) => {\n    const [searchResults, setSearchResults] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const [searchQueryInProgress, setSearchQueryInProgress] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const searchFnRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(searchFn);\n    searchFnRef.current = searchFn;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!searchQuery.length) {\n            setSearchQueryInProgress(false);\n            setSearchResults([]);\n            return;\n        }\n        setSearchQueryInProgress(true);\n        const timeout = setTimeout(async () => {\n            try {\n                const results = await searchFnRef.current(searchQuery);\n                setSearchResults(results);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            finally {\n                setSearchQueryInProgress(false);\n            }\n        }, debounceInterval);\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [debounceInterval, searchQuery]);\n    return {\n        searchQueryInProgress,\n        searchResults,\n    };\n};\n\nconst UserListTypes = {\n    active: 'Active users',\n    blocked: 'Blocked users',\n};\nconst CallParticipantsList = ({ onClose, activeUsersSearchFn, blockedUsersSearchFn, debounceSearchInterval, }) => {\n    const [searchQuery, setSearchQuery] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('');\n    const [userListType, setUserListType] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)('active');\n    const exitSearch = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => setSearchQuery(''), []);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListHeader, { onClose: onClose }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchInput, { value: searchQuery, onChange: ({ currentTarget }) => setSearchQuery(currentTarget.value), exitSearch: exitSearch, isActive: !!searchQuery }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallParticipantListContentHeader, { userListType: userListType, setUserListType: setUserListType }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content\", children: [userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ActiveUsersSearchResults, { searchQuery: searchQuery, activeUsersSearchFn: activeUsersSearchFn, debounceSearchInterval: debounceSearchInterval })), userListType === 'blocked' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BlockedUsersSearchResults, { searchQuery: searchQuery, blockedUsersSearchFn: blockedUsersSearchFn, debounceSearchInterval: debounceSearchInterval }))] })] }));\n};\nconst CallParticipantListContentHeader = ({ userListType, setUserListType, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const muteAll = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        call?.muteAllUsers('audio');\n    }, [call]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__participant-list__content-header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-list__content-header-title\", children: userListType === 'active' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.Restricted, { requiredGrants: [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.MUTE_USERS], hasPermissionsOnly: true, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TextButton, { onClick: muteAll, children: \"Mute all\" }) })) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { placement: \"bottom-end\", ToggleButton: ToggleButton$1, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenu, { children: Object.keys(UserListTypes).map((lt) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GenericMenuButtonItem, { \"aria-selected\": lt === userListType, onClick: () => setUserListType(lt), children: UserListTypes[lt] }, lt))) }) })] }));\n};\nconst ActiveUsersSearchResults = ({ searchQuery, activeUsersSearchFn: activeUsersSearchFnFromProps, debounceSearchInterval, }) => {\n    const { useParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participants = useParticipants({ sortBy: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.name });\n    const activeUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return participants.filter((p) => p.name.match(queryRegExp));\n    }, [participants]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: activeUsersSearchFnFromProps ?? activeUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : participants, SearchResultList: CallParticipantListing }));\n};\nconst BlockedUsersSearchResults = ({ blockedUsersSearchFn: blockedUsersSearchFnFromProps, debounceSearchInterval, searchQuery, }) => {\n    const { useCallBlockedUserIds } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const blockedUsers = useCallBlockedUserIds();\n    const blockedUsersSearchFn = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(async (queryString) => {\n        const queryRegExp = new RegExp(queryString, 'i');\n        return blockedUsers.filter((userId) => userId.match(queryRegExp));\n    }, [blockedUsers]);\n    const { searchQueryInProgress, searchResults } = useSearch({\n        searchFn: blockedUsersSearchFnFromProps ?? blockedUsersSearchFn,\n        debounceInterval: debounceSearchInterval,\n        searchQuery,\n    });\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SearchResults, { EmptySearchResultComponent: EmptyParticipantSearchList, LoadingIndicator: LoadingIndicator, searchQueryInProgress: searchQueryInProgress, searchResults: searchQuery ? searchResults : blockedUsers, SearchResultList: BlockedUserListing }));\n};\nconst ToggleButton$1 = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"filter\", ref: ref });\n});\n\nconst CallPreview = (props) => {\n    const { className, style } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallThumbnail } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const thumbnail = useCallThumbnail();\n    const [imageRef, setImageRef] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!imageRef || !call)\n            return;\n        const cleanup = call.bindCallThumbnailElement(imageRef);\n        return () => cleanup();\n    }, [imageRef, call]);\n    if (!thumbnail)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"img\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-preview', className), style: style, alt: \"Call Preview Thumbnail\", ref: setImageRef }));\n};\n\nconst CallRecordingListHeader = ({ callRecordings, onRefresh, }) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__header\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__title\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { children: t('Call Recordings') }), callRecordings.length ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { children: [\"(\", callRecordings.length, \")\"] }) : null] }), onRefresh && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"refresh\", title: t('Refresh'), onClick: onRefresh }))] }));\n};\n\nconst dateFormat = (date) => {\n    const format = new Date(date);\n    return format.toTimeString().split(' ')[0];\n};\nconst CallRecordingListItem = ({ recording, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__filename\", children: recording.filename }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.start_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__time\", children: dateFormat(recording.end_time) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__table-cell str-video__call-recording-list__download\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"a\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__call-recording-list-item__action-button', 'str-video__call-recording-list-item__action-button--download'), role: \"button\", href: recording.url, download: recording.filename, title: \"Download the recording\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"download\" }) }) })] }));\n};\n\nconst EmptyCallRecordingListing = () => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list__listing str-video__call-recording-list__listing--empty\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing--icon-empty\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"p\", { className: \"str-video__call-recording-list__listing--text-empty\", children: \"No recordings available\" })] }));\n};\n\nconst LoadingCallRecordingListing = ({ callRecordings, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem, { recording: recording }, recording.filename))), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingIndicator, { text: \"Recording getting ready\" })] }));\n};\n\nconst CallRecordingList = ({ callRecordings, CallRecordingListHeader: CallRecordingListHeader$1 = CallRecordingListHeader, CallRecordingListItem: CallRecordingListItem$1 = CallRecordingListItem, EmptyCallRecordingList = EmptyCallRecordingListing, loading, LoadingCallRecordingList = LoadingCallRecordingListing, onRefresh, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-recording-list\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListHeader$1, { callRecordings: callRecordings, onRefresh: onRefresh }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__listing\", children: loading ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LoadingCallRecordingList, { callRecordings: callRecordings })) : callRecordings.length ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"li\", { className: \"str-video__call-recording-list__item\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__filename\", children: \"Name\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"Start time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__time\", children: \"End time\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-recording-list__download\" })] }) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"ul\", { className: \"str-video__call-recording-list__list\", children: callRecordings.map((recording) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CallRecordingListItem$1, { recording: recording }, recording.filename))) })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EmptyCallRecordingList, {})) })] }));\n};\n\nconst NoiseCancellationContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * Exposes the NoiseCancellation API.\n * Throws an error if used outside <NoiseCancellationProvider />.\n */\nconst useNoiseCancellation = () => {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(NoiseCancellationContext);\n    if (!context) {\n        throw new Error('useNoiseCancellation must be used within a NoiseCancellationProvider');\n    }\n    return context;\n};\nconst NoiseCancellationProvider = (props) => {\n    const { children, noiseCancellation } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallSettings, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const settings = useCallSettings();\n    const noiseCancellationAllowed = !!(settings &&\n        settings.audio.noise_cancellation &&\n        settings.audio.noise_cancellation.mode !==\n            _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.NoiseCancellationSettingsModeEnum.DISABLED);\n    const hasCapability = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.ENABLE_NOISE_CANCELLATION);\n    const [isSupportedByBrowser, setIsSupportedByBrowser] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        const result = noiseCancellation.isSupported();\n        if (typeof result === 'boolean') {\n            setIsSupportedByBrowser(result);\n        }\n        else {\n            result\n                .then((s) => setIsSupportedByBrowser(s))\n                .catch((err) => console.error(`Can't determine if noise cancellation is supported`, err));\n        }\n    }, [noiseCancellation]);\n    const isSupported = isSupportedByBrowser && hasCapability && noiseCancellationAllowed;\n    const [isEnabled, setIsEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const deinit = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !isSupported)\n            return;\n        noiseCancellation.isEnabled().then((e) => setIsEnabled(e));\n        const unsubscribe = noiseCancellation.on('change', (v) => setIsEnabled(v));\n        const init = (deinit.current || Promise.resolve())\n            .then(() => noiseCancellation.init({ tracer: call.tracer }))\n            .then(() => call.microphone.enableNoiseCancellation(noiseCancellation))\n            .catch((e) => console.error(`Can't initialize noise cancellation`, e));\n        return () => {\n            deinit.current = init\n                .then(() => call.microphone.disableNoiseCancellation())\n                .then(() => noiseCancellation.dispose())\n                .then(() => unsubscribe());\n        };\n    }, [call, isSupported, noiseCancellation]);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        isSupported,\n        isEnabled,\n        setSuppressionLevel: (level) => {\n            if (!noiseCancellation)\n                return;\n            noiseCancellation.setSuppressionLevel(level);\n        },\n        setEnabled: (enabledOrSetter) => {\n            if (!noiseCancellation)\n                return;\n            const enable = typeof enabledOrSetter === 'function'\n                ? enabledOrSetter(isEnabled)\n                : enabledOrSetter;\n            if (enable) {\n                noiseCancellation.enable();\n            }\n            else {\n                noiseCancellation.disable();\n            }\n        },\n    }), [isEnabled, isSupported, noiseCancellation]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoiseCancellationContext.Provider, { value: contextValue, children: children }));\n};\n\nconst RingingCallControls = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useCallCallingState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callCallingState = useCallCallingState();\n    if (!call)\n        return null;\n    const buttonsDisabled = callCallingState !== _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__pending-call-controls\", children: call.isCreatedByMe ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { disabled: buttonsDisabled })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AcceptCallButton, { disabled: buttonsDisabled }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CancelCallButton, { onClick: () => {\n                        const reason = call.isCreatedByMe ? 'cancel' : 'decline';\n                        call.leave({ reject: true, reason });\n                    }, disabled: buttonsDisabled })] })) }));\n};\n\nconst CALLING_STATE_TO_LABEL = {\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING]: 'Joining',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING]: 'Ringing',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.MIGRATING]: 'Migrating',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING]: 'Re-connecting',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RECONNECTING_FAILED]: 'Failed',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.OFFLINE]: 'No internet connection',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.IDLE]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.UNKNOWN]: '',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINED]: 'Joined',\n    [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.LEFT]: 'Left call',\n};\nconst RingingCall = (props) => {\n    const { includeSelf = false, totalMembersToShow = 3 } = props;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { useCallCallingState, useCallMembers } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const callingState = useCallCallingState();\n    const members = useCallMembers();\n    const connectedUser = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useConnectedUser)();\n    if (!call)\n        return null;\n    // take the first N members to show their avatars\n    const membersToShow = (members || [])\n        .slice(0, totalMembersToShow)\n        .map(({ user }) => user)\n        .filter((user) => user.id !== connectedUser?.id || includeSelf);\n    if (includeSelf &&\n        !membersToShow.find((user) => user.id === connectedUser?.id)) {\n        // if the current user is not in the initial batch of members,\n        // replace the first item in membersToShow array with the current user\n        const self = members.find(({ user }) => user.id === connectedUser?.id);\n        if (self) {\n            membersToShow.splice(0, 1, self.user);\n        }\n    }\n    const callingStateLabel = CALLING_STATE_TO_LABEL[callingState];\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel str-video__call-panel--ringing\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__members-list\", children: membersToShow.map((user) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__call-panel__member-box\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Avatar, { name: user.name, imageSrc: user.image }), user.name && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__member_details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__member_name\", children: user.name }) }))] }, user.id))) }), callingStateLabel && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__call-panel__calling-state-label\", children: t(callingStateLabel) })), [_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.RINGING, _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.JOINING].includes(callingState) && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RingingCallControls, {}))] }));\n};\n\nconst byNameOrId = (a, b) => {\n    if (a.name && b.name && a.name < b.name)\n        return -1;\n    if (a.name && b.name && a.name > b.name)\n        return 1;\n    if (a.id < b.id)\n        return -1;\n    if (a.id > b.id)\n        return 1;\n    return 0;\n};\nconst PermissionRequests = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useLocalParticipant, useHasPermissions } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const localParticipant = useLocalParticipant();\n    const [expanded, setExpanded] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [permissionRequests, setPermissionRequests] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)([]);\n    const canUpdateCallPermissions = useHasPermissions(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.UPDATE_CALL_PERMISSIONS);\n    const localUserId = localParticipant?.userId;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call || !canUpdateCallPermissions)\n            return;\n        return call.on('call.permission_request', (event) => {\n            if (event.user.id !== localUserId) {\n                setPermissionRequests((requests) => [...requests, event].sort((a, b) => byNameOrId(a.user, b.user)));\n            }\n        });\n    }, [call, canUpdateCallPermissions, localUserId]);\n    const handleUpdatePermission = (request, type) => {\n        return async () => {\n            const { user, permissions } = request;\n            switch (type) {\n                case 'grant':\n                    await call?.grantPermissions(user.id, permissions);\n                    break;\n                case 'revoke':\n                    await call?.revokePermissions(user.id, permissions);\n                    break;\n            }\n            setPermissionRequests((requests) => requests.filter((r) => r !== request));\n        };\n    };\n    const { refs, x, y, strategy } = useFloatingUIPreset({\n        placement: 'bottom',\n        strategy: 'absolute',\n    });\n    // don't render anything if there are no permission requests\n    if (permissionRequests.length === 0)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests\", ref: refs.setReference, children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-requests__notification\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__permission-requests__notification__message\", children: [permissionRequests.length, \" pending permission requests\"] }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { type: \"button\", onClick: () => {\n                            setExpanded((e) => !e);\n                        }, children: expanded ? 'Hide requests' : 'Show requests' })] }), expanded && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PermissionRequestList, { ref: refs.setFloating, style: {\n                    position: strategy,\n                    top: y ?? 0,\n                    left: x ?? 0,\n                    overflowY: 'auto',\n                }, permissionRequests: permissionRequests, handleUpdatePermission: handleUpdatePermission }))] }));\n};\nconst PermissionRequestList = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function PermissionRequestList(props, ref) {\n    const { permissionRequests, handleUpdatePermission, ...rest } = props;\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-requests-list\", ref: ref, ...rest, children: permissionRequests.map((request, reqIndex) => {\n            const { user, permissions } = request;\n            return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: permissions.map((permission) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__permission-request\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__permission-request__message\", children: messageForPermission(user.name || user.id, permission, t) }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--allow\", type: \"button\", onClick: handleUpdatePermission(request, 'grant'), children: t('Allow') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'revoke'), children: t('Revoke') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Button, { className: \"str-video__permission-request__button--reject\", type: \"button\", onClick: handleUpdatePermission(request, 'dismiss'), children: t('Dismiss') })] }, permission))) }, `${user.id}/${reqIndex}`));\n        }) }));\n});\nconst Button = (props) => {\n    const { className, ...rest } = props;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"button\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__permission-request__button', className), ...rest }));\n};\nconst messageForPermission = (userName, permission, t) => {\n    switch (permission) {\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_AUDIO:\n            return t('{{ userName }} is requesting to speak', { userName });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SEND_VIDEO:\n            return t('{{ userName }} is requesting to share their camera', {\n                userName,\n            });\n        case _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.OwnCapability.SCREENSHARE:\n            return t('{{ userName }} is requesting to present their screen', {\n                userName,\n            });\n        default:\n            return t('{{ userName }} is requesting permission: {{ permission }}', {\n                userName,\n                permission,\n            });\n    }\n};\n\nconst StreamTheme = ({ as: Component = 'div', className, children, ...props }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Component, { ...props, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video', className), children: children }));\n};\n\nconst DefaultDisabledVideoPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__disabled-video-preview\", children: t('Video is disabled') }));\n};\nconst DefaultNoCameraPreview = () => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str_video__video-preview__no-camera-preview\", children: t('No camera found') }));\n};\nconst VideoPreview = ({ className, mirror = true, DisabledVideoPreview = DefaultDisabledVideoPreview, NoCameraPreview = DefaultNoCameraPreview, StartingCameraPreview = LoadingIndicator, }) => {\n    const { useCameraState } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { devices, status, isMute, mediaStream } = useCameraState();\n    let contents;\n    if (isMute && devices?.length === 0) {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(NoCameraPreview, {});\n    }\n    else if (status === 'enabled') {\n        const loading = !mediaStream;\n        contents = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [mediaStream && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseVideo, { stream: mediaStream, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview', {\n                        'str-video__video-preview--mirror': mirror,\n                        'str-video__video-preview--loading': loading,\n                    }) })), loading && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StartingCameraPreview, {})] }));\n    }\n    else {\n        contents = (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DisabledVideoPreview, {});\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__video-preview-container', className), children: contents }));\n};\n\nconst ToggleButton = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ToggleButton(props, ref) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { enabled: props.menuShown, icon: \"ellipsis\", ref: ref });\n});\nconst DefaultScreenShareOverlay = () => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const stopScreenShare = () => {\n        call?.screenShare.disable().catch((err) => {\n            console.error('Failed to stop screen sharing:', err);\n        });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__screen-share-overlay\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__screen-share-overlay__title\", children: t('You are presenting your screen') }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"button\", { onClick: stopScreenShare, type: \"button\", className: \"str-video__screen-share-overlay__button\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"close\" }), \" \", t('Stop Screen Sharing')] })] }));\n};\nconst DefaultParticipantViewUI = ({ indicatorsVisible = true, menuPlacement = 'bottom-start', showMenuButton = true, ParticipantActionsContextMenu: ParticipantActionsContextMenu$1 = ParticipantActionsContextMenu, }) => {\n    const { participant, trackType } = useParticipantViewContext();\n    const isScreenSharing = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participant);\n    if (participant.isLocalParticipant &&\n        isScreenSharing &&\n        trackType === 'screenShareTrack') {\n        return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultScreenShareOverlay, {}), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [showMenuButton && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(MenuToggle, { strategy: \"fixed\", placement: menuPlacement, ToggleButton: ToggleButton, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantActionsContextMenu$1, {}) })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Reaction, { participant: participant }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantDetails, { indicatorsVisible: indicatorsVisible })] }));\n};\nconst ParticipantDetails = ({ indicatorsVisible = true, }) => {\n    const { participant, trackType } = useParticipantViewContext();\n    const { isLocalParticipant, connectionQuality, pin, sessionId, name, userId, } = participant;\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const connectionQualityAsString = !!connectionQuality &&\n        _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality[connectionQuality].toLowerCase();\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const canUnpin = !!pin && pin.isLocalPin;\n    const isTrackPaused = trackType !== 'none' ? (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasPausedTrack)(participant, trackType) : false;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__participant-details\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: \"str-video__participant-details__name\", children: [name || userId, indicatorsVisible && !hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--audio-muted\" })), indicatorsVisible && !hasVideoTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__participant-details__name--video-muted\" })), indicatorsVisible && isTrackPaused && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { title: t('Video paused due to insufficient bandwidth'), className: \"str-video__participant-details__name--track-paused\" })), indicatorsVisible && canUnpin && (\n                        // TODO: remove this monstrosity once we have a proper design\n                        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { title: t('Unpin'), onClick: () => call?.unpin(sessionId), className: \"str-video__participant-details__name--pinned\" })), indicatorsVisible && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SpeechIndicator, {})] }) }), indicatorsVisible && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Notification, { isVisible: isLocalParticipant &&\n                    connectionQuality === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.ConnectionQuality.POOR, message: t('Poor connection quality'), children: connectionQualityAsString && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-details__connection-quality', `str-video__participant-details__connection-quality--${connectionQualityAsString}`), title: connectionQualityAsString })) }))] }));\n};\nconst SpeechIndicator = () => {\n    const { participant } = useParticipantViewContext();\n    const { isSpeaking, isDominantSpeaker } = participant;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speech-indicator', isSpeaking && 'str-video__speech-indicator--speaking', isDominantSpeaker && 'str-video__speech-indicator--dominant'), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__speech-indicator__bar\" })] }));\n};\n\nconst ParticipantView = (0,react__WEBPACK_IMPORTED_MODULE_3__.forwardRef)(function ParticipantView({ participant, trackType = 'videoTrack', mirror, muteAudio, refs: { setVideoElement, setVideoPlaceholderElement } = {}, className, VideoPlaceholder, PictureInPicturePlaceholder, ParticipantViewUI = DefaultParticipantViewUI, }, ref) {\n    const { isLocalParticipant, isSpeaking, isDominantSpeaker, sessionId } = participant;\n    const hasAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant);\n    const hasVideoTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant);\n    const hasScreenShareAudioTrack = (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShareAudio)(participant);\n    const [trackedElement, setTrackedElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoElement, setContextVideoElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [contextVideoPlaceholderElement, setContextVideoPlaceholderElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    // TODO: allow to pass custom ViewportTracker instance from props\n    useTrackElementVisibility({\n        sessionId,\n        trackedElement,\n        trackType,\n    });\n    const { useIncomingVideoSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const { isParticipantVideoEnabled } = useIncomingVideoSettings();\n    const participantViewContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        participant,\n        participantViewElement: trackedElement,\n        videoElement: contextVideoElement,\n        videoPlaceholderElement: contextVideoPlaceholderElement,\n        trackType,\n    }), [\n        contextVideoElement,\n        contextVideoPlaceholderElement,\n        participant,\n        trackedElement,\n        trackType,\n    ]);\n    const videoRefs = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => ({\n        setVideoElement: (element) => {\n            setVideoElement?.(element);\n            setContextVideoElement(element);\n        },\n        setVideoPlaceholderElement: (element) => {\n            setVideoPlaceholderElement?.(element);\n            setContextVideoPlaceholderElement(element);\n        },\n    }), [setVideoElement, setVideoPlaceholderElement]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { \"data-testid\": \"participant-view\", ref: (element) => {\n            applyElementToRef(ref, element);\n            setTrackedElement(element);\n        }, className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__participant-view', isDominantSpeaker && 'str-video__participant-view--dominant-speaker', isSpeaking && 'str-video__participant-view--speaking', !hasVideoTrack && 'str-video__participant-view--no-video', !hasAudioTrack && 'str-video__participant-view--no-audio', className), children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(ParticipantViewContext.Provider, { value: participantViewContextValue, children: [!isLocalParticipant && !muteAudio && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [hasAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"audioTrack\" })), hasScreenShareAudioTrack && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Audio, { participant: participant, trackType: \"screenShareAudioTrack\" }))] })), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Video$1, { VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, participant: participant, trackType: trackType, refs: videoRefs, enabled: isLocalParticipant ||\n                        trackType !== 'videoTrack' ||\n                        isParticipantVideoEnabled(participant.sessionId), mirror: mirror, autoPlay: true }), isComponentType(ParticipantViewUI) ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantViewUI, {})) : (ParticipantViewUI)] }) }));\n});\nParticipantView.displayName = 'ParticipantView';\n\n// re-exporting the StreamCallProvider as StreamCall\nconst StreamCall = _stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamCallProvider;\nStreamCall.displayName = 'StreamCall';\n\nvar Joining = \"Joining\";\nvar Mic = \"Mic\";\nvar Ringing = \"Ringing\";\nvar Speakers = \"Speakers\";\nvar Video = \"Video\";\nvar Live = \"Live\";\nvar Reactions = \"Reactions\";\nvar Statistics = \"Statistics\";\nvar Invite = \"Invite\";\nvar Join = \"Join\";\nvar You = \"You\";\nvar Me = \"Me\";\nvar Unknown = \"Unknown\";\nvar Default = \"Default\";\nvar Refresh = \"Refresh\";\nvar Allow = \"Allow\";\nvar Revoke = \"Revoke\";\nvar Dismiss = \"Dismiss\";\nvar Pinned = \"Pinned\";\nvar Unpin = \"Unpin\";\nvar Pin = \"Pin\";\nvar Block = \"Block\";\nvar Kick = \"Kick\";\nvar Enter = \"Enter\";\nvar Leave = \"Leave\";\nvar Participants = \"Participants\";\nvar Anonymous = \", and ({{ count }}) anonymous\";\nvar en = {\n\tJoining: Joining,\n\tMic: Mic,\n\t\"No internet connection\": \"No internet connection\",\n\t\"Re-connecting\": \"Re-connecting\",\n\tRinging: Ringing,\n\t\"Screen Share\": \"Screen Share\",\n\t\"Select a Camera\": \"Select a Camera\",\n\t\"Select a Mic\": \"Select a Mic\",\n\t\"Select Speakers\": \"Select Speakers\",\n\tSpeakers: Speakers,\n\tVideo: Video,\n\t\"You are muted. Unmute to speak.\": \"You are muted. Unmute to speak.\",\n\tLive: Live,\n\t\"Livestream starts soon\": \"Livestream starts soon\",\n\t\"Livestream starts at {{ startsAt }}\": \"Livestream starts at {{ startsAt, datetime }}\",\n\t\"{{ count }} participants joined early_one\": \"{{ count }} participant joined early\",\n\t\"{{ count }} participants joined early_other\": \"{{ count }} participants joined early\",\n\t\"You can now speak.\": \"You can now speak.\",\n\t\"Awaiting for an approval to speak.\": \"Awaiting for an approval to speak.\",\n\t\"You can no longer speak.\": \"You can no longer speak.\",\n\t\"You can now share your video.\": \"You can now share your video.\",\n\t\"Awaiting for an approval to share your video.\": \"Awaiting for an approval to share your video.\",\n\t\"You can no longer share your video.\": \"You can no longer share your video.\",\n\t\"Waiting for recording to stop...\": \"Waiting for recording to stop...\",\n\t\"Waiting for recording to start...\": \"Waiting for recording to start...\",\n\t\"Record call\": \"Record call\",\n\tReactions: Reactions,\n\tStatistics: Statistics,\n\t\"You can now share your screen.\": \"You can now share your screen.\",\n\t\"Awaiting for an approval to share screen.\": \"Awaiting for an approval to share screen.\",\n\t\"You can no longer share your screen.\": \"You can no longer share your screen.\",\n\t\"Share screen\": \"Share screen\",\n\t\"Incoming Call...\": \"Incoming Call...\",\n\t\"Calling...\": \"Calling...\",\n\t\"Mute All\": \"Mute All\",\n\tInvite: Invite,\n\tJoin: Join,\n\tYou: You,\n\tMe: Me,\n\tUnknown: Unknown,\n\t\"Toggle device menu\": \"Toggle device menu\",\n\tDefault: Default,\n\t\"Call Recordings\": \"Call Recordings\",\n\tRefresh: Refresh,\n\t\"Check your browser video permissions\": \"Check your browser video permissions\",\n\t\"Video publishing is disabled by the system\": \"Video publishing is disabled by the system\",\n\t\"You have no permission to share your video\": \"You have no permission to share your video\",\n\t\"You have no permission to share your audio\": \"You have no permission to share your audio\",\n\t\"You are presenting your screen\": \"You are presenting your screen\",\n\t\"Stop Screen Sharing\": \"Stop Screen Sharing\",\n\tAllow: Allow,\n\tRevoke: Revoke,\n\tDismiss: Dismiss,\n\t\"Microphone on\": \"Microphone on\",\n\t\"Microphone off\": \"Microphone off\",\n\t\"Camera on\": \"Camera on\",\n\t\"Camera off\": \"Camera off\",\n\t\"No camera found\": \"No camera found\",\n\t\"Video is disabled\": \"Video is disabled\",\n\tPinned: Pinned,\n\tUnpin: Unpin,\n\tPin: Pin,\n\t\"Pin for everyone\": \"Pin for everyone\",\n\t\"Unpin for everyone\": \"Unpin for everyone\",\n\tBlock: Block,\n\tKick: Kick,\n\t\"Turn off video\": \"Turn off video\",\n\t\"Turn off screen share\": \"Turn off screen share\",\n\t\"Mute audio\": \"Mute audio\",\n\t\"Mute screen share audio\": \"Mute screen share audio\",\n\t\"Allow audio\": \"Allow audio\",\n\t\"Allow video\": \"Allow video\",\n\t\"Allow screen sharing\": \"Allow screen sharing\",\n\t\"Disable audio\": \"Disable audio\",\n\t\"Disable video\": \"Disable video\",\n\t\"Disable screen sharing\": \"Disable screen sharing\",\n\tEnter: Enter,\n\tLeave: Leave,\n\t\"Leave call\": \"Leave call\",\n\t\"End call for all\": \"End call for all\",\n\t\"{{ direction }} fullscreen\": \"{{ direction }} fullscreen\",\n\t\"{{ direction }} picture-in-picture\": \"{{ direction }} picture-in-picture\",\n\t\"Dominant Speaker\": \"Dominant Speaker\",\n\t\"Poor connection quality\": \"Poor connection quality. Please check your internet connection.\",\n\t\"Video paused due to insufficient bandwidth\": \"Video paused due to insufficient bandwidth\",\n\tParticipants: Participants,\n\tAnonymous: Anonymous,\n\t\"No participants found\": \"No participants found\",\n\t\"Participants ({{ numberOfParticipants }})\": \"Participants ({{ numberOfParticipants }})\",\n\t\"{{ userName }} is sharing their screen\": \"{{ userName }} is sharing their screen\",\n\t\"{{ userName }} is requesting to speak\": \"{{ userName }} is requesting to speak\",\n\t\"{{ userName }} is requesting to share their camera\": \"{{ userName }} is requesting to share their camera\",\n\t\"{{ userName }} is requesting to present their screen\": \"{{ userName }} is requesting to present their screen\",\n\t\"{{ userName }} is requesting permission: {{ permission }}\": \"{{ userName }} is requesting permission: {{ permission }}\"\n};\n\nconst translations = { en };\n\nconst StreamVideo = (props) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.StreamVideoProvider, { translationsOverrides: translations, ...props }));\n};\nStreamVideo.displayName = 'StreamVideo';\n\nfunction applyFilter(obj, filter) {\n    if ('$and' in filter) {\n        return filter.$and.every((f) => applyFilter(obj, f));\n    }\n    if ('$or' in filter) {\n        return filter.$or.some((f) => applyFilter(obj, f));\n    }\n    if ('$not' in filter) {\n        return !applyFilter(obj, filter.$not);\n    }\n    return checkConditions(obj, filter);\n}\nfunction checkConditions(obj, conditions) {\n    let match = true;\n    for (const key of Object.keys(conditions)) {\n        const operator = conditions[key];\n        const maybeOperator = operator && typeof operator === 'object';\n        const value = obj[key];\n        if (maybeOperator && '$eq' in operator) {\n            const eqOperator = operator;\n            match && (match = eqOperator.$eq === value);\n        }\n        else if (maybeOperator && '$neq' in operator) {\n            const neqOperator = operator;\n            match && (match = neqOperator.$neq !== value);\n        }\n        else if (maybeOperator && '$in' in operator) {\n            const inOperator = operator;\n            match && (match = inOperator.$in.includes(value));\n        }\n        else if (maybeOperator && '$contains' in operator) {\n            if (Array.isArray(value)) {\n                const containsOperator = operator;\n                match && (match = value.includes(containsOperator.$contains));\n            }\n            else {\n                match = false;\n            }\n        }\n        else {\n            const eqValue = operator;\n            match && (match = eqValue === value);\n        }\n        if (!match) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst useFilteredParticipants = ({ excludeLocalParticipant = false, filterParticipants, }) => {\n    const { useParticipants, useRemoteParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const allParticipants = useParticipants();\n    const remoteParticipants = useRemoteParticipants();\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => {\n        const unfilteredParticipants = excludeLocalParticipant\n            ? remoteParticipants\n            : allParticipants;\n        return filterParticipants\n            ? applyParticipantsFilter(unfilteredParticipants, filterParticipants)\n            : unfilteredParticipants;\n    }, [\n        allParticipants,\n        remoteParticipants,\n        excludeLocalParticipant,\n        filterParticipants,\n    ]);\n};\nconst applyParticipantsFilter = (participants, filter) => {\n    const filterCallback = typeof filter === 'function'\n        ? filter\n        : (participant) => applyFilter({\n            userId: participant.userId,\n            isSpeaking: participant.isSpeaking,\n            isDominantSpeaker: participant.isDominantSpeaker,\n            name: participant.name,\n            roles: participant.roles,\n            isPinned: (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.isPinned)(participant),\n            hasVideo: (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasVideo)(participant),\n            hasAudio: (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasAudio)(participant),\n        }, filter);\n    return participants.filter(filterCallback);\n};\nconst usePaginatedLayoutSortPreset = (call) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.paginatedLayoutSortPreset);\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call]);\n};\nconst useSpeakerLayoutSortPreset = (call, isOneOnOneCall) => {\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!call)\n            return;\n        // always show the remote participant in the spotlight\n        if (isOneOnOneCall) {\n            call.setSortParticipantsBy((0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.combineComparators)(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.screenSharing, loggedIn));\n        }\n        else {\n            call.setSortParticipantsBy(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.speakerLayoutSortPreset);\n        }\n        return () => {\n            resetSortPreset(call);\n        };\n    }, [call, isOneOnOneCall]);\n};\nconst useRawRemoteParticipants = () => {\n    const { useRawParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const rawParicipants = useRawParticipants();\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => rawParicipants.filter((p) => !p.isLocalParticipant), [rawParicipants]);\n};\nconst resetSortPreset = (call) => {\n    // reset the sorting to the default for the call type\n    const callConfig = _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallTypes.get(call.type);\n    call.setSortParticipantsBy(callConfig.options.sortParticipantsBy || _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.defaultSortPreset);\n};\nconst loggedIn = (a, b) => {\n    if (a.isLocalParticipant)\n        return 1;\n    if (b.isLocalParticipant)\n        return -1;\n    return 0;\n};\n\nconst LivestreamLayout = (props) => {\n    const { useParticipants, useHasOngoingScreenShare } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const participants = useParticipants();\n    const [currentSpeaker] = participants;\n    const remoteParticipants = useRawRemoteParticipants();\n    const hasOngoingScreenShare = useHasOngoingScreenShare();\n    const presenter = hasOngoingScreenShare\n        ? participants.find(_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)\n        : undefined;\n    usePaginatedLayoutSortPreset(call);\n    const overlay = ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay, { showParticipantCount: props.showParticipantCount, showDuration: props.showDuration, showLiveBadge: props.showLiveBadge, showSpeakerName: props.showSpeakerName }));\n    const { floatingParticipantProps, muted } = props;\n    const floatingParticipantOverlay = hasOngoingScreenShare && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantOverlay\n    // these elements aren't needed for the video feed\n    , { \n        // these elements aren't needed for the video feed\n        showParticipantCount: floatingParticipantProps?.showParticipantCount ?? false, showDuration: floatingParticipantProps?.showDuration ?? false, showLiveBadge: floatingParticipantProps?.showLiveBadge ?? false, showSpeakerName: floatingParticipantProps?.showSpeakerName ?? true }));\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__wrapper\", children: [!muted && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), hasOngoingScreenShare && presenter && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: \"str-video__livestream-layout__screen-share\", participant: presenter, ParticipantViewUI: overlay, trackType: \"screenShareTrack\", muteAudio // audio is rendered by ParticipantsAudio\n                : true })), currentSpeaker && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(hasOngoingScreenShare &&\n                    (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__livestream-layout__floating-participant', `str-video__livestream-layout__floating-participant--${floatingParticipantProps?.position ?? 'top-right'}`)), participant: currentSpeaker, ParticipantViewUI: floatingParticipantOverlay || overlay, mirror: props.mirrorLocalParticipantVideo !== false ? undefined : false, muteAudio // audio is rendered by ParticipantsAudio\n                : true }))] }));\n};\nLivestreamLayout.displayName = 'LivestreamLayout';\nconst BackstageLayout = (props) => {\n    const { showEarlyParticipantCount = true } = props;\n    const { useParticipantCount, useCallStartsAt } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participantCount = useParticipantCount();\n    const startsAt = useCallStartsAt();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__livestream-layout__wrapper\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__backstage\", children: [startsAt && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__starts-at\", children: startsAt.getTime() < Date.now()\n                        ? t('Livestream starts soon')\n                        : t('Livestream starts at {{ startsAt }}', { startsAt }) })), showEarlyParticipantCount && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__early-viewers-count\", children: t('{{ count }} participants joined early', {\n                        count: participantCount,\n                    }) }))] }) }));\n};\nBackstageLayout.displayName = 'BackstageLayout';\nconst ParticipantOverlay = (props) => {\n    const { enableFullScreen = true, showParticipantCount = true, showDuration = true, showLiveBadge = true, showSpeakerName = false, } = props;\n    const { participant } = useParticipantViewContext();\n    const { useParticipantCount } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const participantCount = useParticipantCount();\n    const duration = useUpdateCallDuration();\n    const toggleFullScreen = useToggleFullScreen();\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__livestream-layout__overlay\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__livestream-layout__overlay__bar\", children: [showLiveBadge && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__live-badge\", children: t('Live') })), showParticipantCount && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__viewers-count\", children: participantCount })), showSpeakerName && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__speaker-name\", title: participant.name || participant.userId || '', children: participant.name || participant.userId || '' })), showDuration && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__duration\", children: formatDuration(duration) })), enableFullScreen && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__livestream-layout__go-fullscreen\", onClick: toggleFullScreen }))] }) }));\n};\nconst useUpdateCallDuration = () => {\n    const { useIsCallLive, useCallSession } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isCallLive = useIsCallLive();\n    const session = useCallSession();\n    const [duration, setDuration] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => {\n        if (!session || !session.live_started_at)\n            return 0;\n        const liveStartTime = new Date(session.live_started_at);\n        const now = new Date();\n        return Math.floor((now.getTime() - liveStartTime.getTime()) / 1000);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!isCallLive)\n            return;\n        const interval = setInterval(() => {\n            setDuration((d) => d + 1);\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isCallLive]);\n    return duration;\n};\nconst useToggleFullScreen = () => {\n    const { participantViewElement } = useParticipantViewContext();\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(() => {\n        if (isFullscreen) {\n            document.exitFullscreen().then(() => {\n                setIsFullscreen(false);\n            });\n        }\n        else {\n            participantViewElement?.requestFullscreen().then(() => {\n                setIsFullscreen(true);\n            });\n        }\n    }, [isFullscreen, participantViewElement]);\n};\nconst formatDuration = (durationInMs) => {\n    const days = Math.floor(durationInMs / 86400);\n    const hours = Math.floor(durationInMs / 3600);\n    const minutes = Math.floor((durationInMs % 3600) / 60);\n    const seconds = durationInMs % 60;\n    return `${days ? days + ' ' : ''}${hours ? hours + ':' : ''}${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n};\n\nconst GROUP_SIZE = 16;\nconst PaginatedGridLayoutGroup = ({ group, mirror, VideoPlaceholder, PictureInPicturePlaceholder, ParticipantViewUI, }) => {\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__paginated-grid-layout__group', {\n            'str-video__paginated-grid-layout--one': group.length === 1,\n            'str-video__paginated-grid-layout--two-four': group.length >= 2 && group.length <= 4,\n            'str-video__paginated-grid-layout--five-nine': group.length >= 5 && group.length <= 9,\n        }), children: group.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, muteAudio: true, mirror: mirror, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId))) }));\n};\nconst PaginatedGridLayout = (props) => {\n    const { groupSize = (props.groupSize || 0) > 0\n        ? props.groupSize || GROUP_SIZE\n        : GROUP_SIZE, excludeLocalParticipant = false, filterParticipants, mirrorLocalParticipantVideo = true, pageArrowsVisible = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, PictureInPicturePlaceholder, muted, } = props;\n    const [page, setPage] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(0);\n    const [paginatedGridLayoutWrapperElement, setPaginatedGridLayoutWrapperElement,] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const remoteParticipants = useRawRemoteParticipants();\n    const participants = useFilteredParticipants({\n        excludeLocalParticipant,\n        filterParticipants,\n    });\n    usePaginatedLayoutSortPreset(call);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!paginatedGridLayoutWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(paginatedGridLayoutWrapperElement);\n        return () => cleanup();\n    }, [paginatedGridLayoutWrapperElement, call]);\n    // only used to render video elements\n    const participantGroups = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => chunk(participants, groupSize), [participants, groupSize]);\n    const pageCount = participantGroups.length;\n    // update page when page count is reduced and selected page no longer exists\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (page > pageCount - 1) {\n            setPage(Math.max(0, pageCount - 1));\n        }\n    }, [page, pageCount]);\n    const selectedGroup = participantGroups[page];\n    const mirror = mirrorLocalParticipantVideo ? undefined : false;\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout__wrapper\", ref: setPaginatedGridLayoutWrapperElement, children: [!muted && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__paginated-grid-layout\", children: [pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { icon: \"caret-left\", disabled: page === 0, onClick: () => setPage((currentPage) => Math.max(0, currentPage - 1)) })), selectedGroup && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PaginatedGridLayoutGroup, { group: selectedGroup, mirror: mirror, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI, PictureInPicturePlaceholder: PictureInPicturePlaceholder })), pageArrowsVisible && pageCount > 1 && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { disabled: page === pageCount - 1, icon: \"caret-right\", onClick: () => setPage((currentPage) => Math.min(pageCount - 1, currentPage + 1)) }))] })] }));\n};\nPaginatedGridLayout.displayName = 'PaginatedGridLayout';\n\nconst useCalculateHardLimit = (\n/**\n * Element that stretches to 100% of the whole layout component\n */\nwrapperElement, \n/**\n * Element that directly hosts individual `ParticipantView` (or wrapper) elements\n */\nhostElement, limit) => {\n    const [calculatedLimit, setCalculatedLimit] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)({\n        vertical: typeof limit === 'number' ? limit : null,\n        horizontal: typeof limit === 'number' ? limit : null,\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!hostElement ||\n            !wrapperElement ||\n            typeof limit === 'number' ||\n            typeof limit === 'undefined')\n            return;\n        let childWidth = null;\n        let childHeight = null;\n        const resizeObserver = new ResizeObserver((entries, observer) => {\n            // this part should ideally run as little times as possible\n            // get child measurements and disconnect\n            // does not consider dynamically sized children\n            // this hook is for SpeakerLayout use only, where children in the bar are fixed size\n            if (entries.length > 1) {\n                const child = hostElement.firstChild;\n                if (child) {\n                    childHeight = child.clientHeight;\n                    childWidth = child.clientWidth;\n                    observer.unobserve(hostElement);\n                }\n            }\n            // keep the state at { vertical: 1, horizontal: 1 }\n            // until we get the proper child measurements\n            if (childHeight === null || childWidth === null)\n                return;\n            const vertical = Math.floor(wrapperElement.clientHeight / childHeight);\n            const horizontal = Math.floor(wrapperElement.clientWidth / childWidth);\n            setCalculatedLimit((pv) => {\n                if (pv.vertical !== vertical || pv.horizontal !== horizontal)\n                    return { vertical, horizontal };\n                return pv;\n            });\n        });\n        resizeObserver.observe(wrapperElement);\n        resizeObserver.observe(hostElement);\n        return () => {\n            resizeObserver.disconnect();\n        };\n    }, [hostElement, limit, wrapperElement]);\n    return calculatedLimit;\n};\n\nconst DefaultParticipantViewUIBar = () => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DefaultParticipantViewUI, { menuPlacement: \"top-end\" }));\nconst SpeakerLayout = ({ ParticipantViewUIBar = DefaultParticipantViewUIBar, ParticipantViewUISpotlight = DefaultParticipantViewUI, VideoPlaceholder, PictureInPicturePlaceholder, participantsBarPosition = 'bottom', participantsBarLimit, mirrorLocalParticipantVideo = true, excludeLocalParticipant = false, filterParticipants, pageArrowsVisible = true, muted, }) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useParticipants } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const allParticipants = useParticipants();\n    const remoteParticipants = useRawRemoteParticipants();\n    const [participantInSpotlight, ...otherParticipants] = useFilteredParticipants({ excludeLocalParticipant, filterParticipants });\n    const [participantsBarWrapperElement, setParticipantsBarWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [participantsBarElement, setParticipantsBarElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const [buttonsWrapperElement, setButtonsWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const isSpeakerScreenSharing = participantInSpotlight && (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(participantInSpotlight);\n    const hardLimit = useCalculateHardLimit(buttonsWrapperElement, participantsBarElement, participantsBarLimit);\n    const isVertical = participantsBarPosition === 'left' || participantsBarPosition === 'right';\n    const isHorizontal = participantsBarPosition === 'top' || participantsBarPosition === 'bottom';\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!participantsBarWrapperElement || !call)\n            return;\n        const cleanup = call.setViewport(participantsBarWrapperElement);\n        return () => cleanup();\n    }, [participantsBarWrapperElement, call]);\n    const isOneOnOneCall = allParticipants.length === 2;\n    useSpeakerLayoutSortPreset(call, isOneOnOneCall);\n    let participantsWithAppliedLimit = otherParticipants;\n    const hardLimitToApply = isVertical\n        ? hardLimit.vertical\n        : hardLimit.horizontal;\n    if (typeof participantsBarLimit !== 'undefined' &&\n        hardLimitToApply !== null) {\n        participantsWithAppliedLimit = otherParticipants.slice(0, \n        // subtract 1 if speaker is sharing screen as\n        // that one is rendered independently from otherParticipants array\n        hardLimitToApply - (isSpeakerScreenSharing ? 1 : 0));\n    }\n    const mirror = mirrorLocalParticipantVideo ? undefined : false;\n    if (!call)\n        return null;\n    const renderParticipantsBar = participantsBarPosition &&\n        (participantsWithAppliedLimit.length > 0 || isSpeakerScreenSharing);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__speaker-layout__wrapper\", children: [!muted && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: (0,clsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"])('str-video__speaker-layout', participantsBarPosition &&\n                    `str-video__speaker-layout--variant-${participantsBarPosition}`), children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__spotlight\", children: participantInSpotlight && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, muteAudio: true, mirror: mirror, trackType: isSpeakerScreenSharing ? 'screenShareTrack' : 'videoTrack', ParticipantViewUI: ParticipantViewUISpotlight, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder })) }), renderParticipantsBar && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setButtonsWrapperElement, className: \"str-video__speaker-layout__participants-bar-buttons-wrapper\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participants-bar-wrapper\", ref: setParticipantsBarWrapperElement, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ref: setParticipantsBarElement, className: \"str-video__speaker-layout__participants-bar\", children: [isSpeakerScreenSharing && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participantInSpotlight, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, mirror: mirror, muteAudio: true }) }, participantInSpotlight.sessionId)), participantsWithAppliedLimit.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { className: \"str-video__speaker-layout__participant-tile\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, ParticipantViewUI: ParticipantViewUIBar, VideoPlaceholder: VideoPlaceholder, PictureInPicturePlaceholder: PictureInPicturePlaceholder, mirror: mirror, muteAudio: true }) }, participant.sessionId)))] }) }), pageArrowsVisible && isVertical && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(VerticalScrollButtons, { scrollWrapper: participantsBarWrapperElement })), pageArrowsVisible && isHorizontal && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(HorizontalScrollButtons, { scrollWrapper: participantsBarWrapperElement }))] }))] })] }));\n};\nSpeakerLayout.displayName = 'SpeakerLayout';\nconst HorizontalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useHorizontalScrollPosition(scrollWrapper);\n    const scrollStartClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: -150, behavior: 'smooth' });\n    };\n    const scrollEndClickHandler = () => {\n        scrollWrapper?.scrollBy({ left: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'start' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollStartClickHandler, icon: \"caret-left\", className: \"str-video__speaker-layout__participants-bar--button-left\" })), scrollPosition && scrollPosition !== 'end' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollEndClickHandler, icon: \"caret-right\", className: \"str-video__speaker-layout__participants-bar--button-right\" }))] }));\n};\nconst VerticalScrollButtons = ({ scrollWrapper, }) => {\n    const scrollPosition = useVerticalScrollPosition(scrollWrapper);\n    const scrollTopClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: -150, behavior: 'smooth' });\n    };\n    const scrollBottomClickHandler = () => {\n        scrollWrapper?.scrollBy({ top: 150, behavior: 'smooth' });\n    };\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [scrollPosition && scrollPosition !== 'top' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollTopClickHandler, icon: \"caret-up\", className: \"str-video__speaker-layout__participants-bar--button-top\" })), scrollPosition && scrollPosition !== 'bottom' && ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(IconButton, { onClick: scrollBottomClickHandler, icon: \"caret-down\", className: \"str-video__speaker-layout__participants-bar--button-bottom\" }))] }));\n};\n\nconst Pip = (props) => {\n    const { t } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useI18n)();\n    const { excludeLocalParticipant = false, filterParticipants, mirrorLocalParticipantVideo = true, VideoPlaceholder, ParticipantViewUI = DefaultParticipantViewUI, } = props;\n    const [layoutWrapperElement, setLayoutWrapperElement] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const participants = useFilteredParticipants({\n        excludeLocalParticipant,\n        filterParticipants,\n    });\n    const screenSharingParticipant = participants.find((p) => (0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.hasScreenShare)(p));\n    usePaginatedLayoutSortPreset(call);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!layoutWrapperElement || !call)\n            return;\n        return call.setViewport(layoutWrapperElement);\n    }, [layoutWrapperElement, call]);\n    const mirror = mirrorLocalParticipantVideo ? undefined : false;\n    if (!call)\n        return null;\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__pip-layout\", ref: setLayoutWrapperElement, children: [screenSharingParticipant &&\n                (screenSharingParticipant.isLocalParticipant ? ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { className: \"str-video__pip-screen-share-local\", children: [(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Icon, { icon: \"screen-share-off\" }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { className: \"str-video__pip-screen-share-local__title\", children: t('You are presenting your screen') })] })) : ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: screenSharingParticipant, trackType: \"screenShareTrack\", muteAudio: true, mirror: false, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }))), participants.map((participant) => ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantView, { participant: participant, muteAudio: true, mirror: mirror, VideoPlaceholder: VideoPlaceholder, ParticipantViewUI: ParticipantViewUI }, participant.sessionId)))] }));\n};\nPip.displayName = 'PipLayout.Pip';\nconst Host = () => {\n    const remoteParticipants = useRawRemoteParticipants();\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ParticipantsAudio, { participants: remoteParticipants });\n};\nHost.displayName = 'PipLayout.Host';\nconst PipLayout = { Pip, Host };\n\nfunction useEffectEvent(cb) {\n    const cbRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useLayoutEffect)(() => {\n        cbRef.current = cb;\n    }, [cb]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)((...args) => {\n        const callback = cbRef.current;\n        callback?.(...args);\n    }, []);\n}\n\nconst LivestreamPlayer = (props) => {\n    const { callType, callId, ...restProps } = props;\n    const client = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useStreamVideoClient)();\n    const [call, setCall] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    const onError = useEffectEvent(props.onError);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!client)\n            return;\n        const myCall = client.call(callType, callId);\n        setCall(myCall);\n        myCall.get().catch((e) => {\n            console.error('Failed to fetch call', e);\n            onError(e);\n        });\n        return () => {\n            myCall.leave().catch((e) => {\n                console.error('Failed to leave call', e);\n            });\n            setCall(undefined);\n        };\n    }, [callId, callType, client, onError]);\n    if (!call) {\n        return null;\n    }\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(StreamCall, { call: call, children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LivestreamCall, { ...restProps }) }));\n};\nconst LivestreamCall = (props) => {\n    const call = useLivestreamCall(props);\n    const { useIsCallLive } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const isLive = useIsCallLive();\n    if (!call)\n        return null;\n    if (isLive) {\n        return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(LivestreamLayout, { ...props.layoutProps });\n    }\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BackstageLayout, { ...props.backstageProps });\n};\nconst useLivestreamCall = (props) => {\n    const call = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCall)();\n    const { useIsCallLive, useOwnCapabilities } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const canJoinLive = useIsCallLive();\n    const canJoinEarly = useCanJoinEarly();\n    const canJoinBackstage = useOwnCapabilities()?.includes('join-backstage') ?? false;\n    const canJoinAsap = canJoinLive || canJoinEarly || canJoinBackstage;\n    const joinBehavior = props.joinBehavior ?? 'asap';\n    const canJoin = (joinBehavior === 'asap' && canJoinAsap) ||\n        (joinBehavior === 'live' && canJoinLive);\n    const onError = useEffectEvent(props.onError);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (call && call.state.callingState === _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.CallingState.IDLE && canJoin) {\n            call.join().catch((e) => {\n                console.error('Failed to join call', e);\n                onError(e);\n            });\n        }\n    }, [call, canJoin, onError]);\n    return call;\n};\nconst useCanJoinEarly = () => {\n    const { useCallStartsAt, useCallSettings } = (0,_stream_io_video_react_bindings__WEBPACK_IMPORTED_MODULE_1__.useCallStateHooks)();\n    const startsAt = useCallStartsAt();\n    const settings = useCallSettings();\n    const joinAheadTimeSeconds = settings?.backstage.join_ahead_time_seconds;\n    const [canJoinEarly, setCanJoinEarly] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(() => checkCanJoinEarly(startsAt, joinAheadTimeSeconds));\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(() => {\n        if (!canJoinEarly) {\n            const handle = setInterval(() => {\n                setCanJoinEarly(checkCanJoinEarly(startsAt, joinAheadTimeSeconds));\n            }, 1000);\n            return () => clearInterval(handle);\n        }\n    }, [canJoinEarly, startsAt, joinAheadTimeSeconds]);\n    return canJoinEarly;\n};\nconst checkCanJoinEarly = (startsAt, joinAheadTimeSeconds) => {\n    if (!startsAt) {\n        return false;\n    }\n    return Date.now() >= +startsAt - (joinAheadTimeSeconds ?? 0) * 1000;\n};\n\nconst [major, minor, patch] = (\"1.20.1\").split('.');\n(0,_stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.setSdkInfo)({\n    type: _stream_io_video_client__WEBPACK_IMPORTED_MODULE_0__.SfuModels.SdkType.REACT,\n    major,\n    minor,\n    patch,\n});\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CallStatsLatencyChart)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ \"(ssr)/./node_modules/chart.js/dist/chart.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-chartjs-2 */ \"(ssr)/./node_modules/react-chartjs-2/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\n// NOTE: this is a side effect by definition, but this component is\n// isolated in a separate chunk, and it won't affect the rest of the app.\n// See CallStats.tsx for more details.\nchart_js__WEBPACK_IMPORTED_MODULE_2__.Chart.register(chart_js__WEBPACK_IMPORTED_MODULE_2__.CategoryScale, chart_js__WEBPACK_IMPORTED_MODULE_2__.LinearScale, chart_js__WEBPACK_IMPORTED_MODULE_2__.LineElement, chart_js__WEBPACK_IMPORTED_MODULE_2__.PointElement);\nconst CallStatsLatencyChart = (props) => {\n    const { values } = props;\n    let max = 0;\n    const data = {\n        labels: values.map((point) => {\n            const date = new Date(point.x * 1000);\n            return `${date.getHours()}:${date.getMinutes()}`;\n        }),\n        datasets: [\n            {\n                data: values.map((point) => {\n                    const { y } = point;\n                    max = Math.max(max, y);\n                    return point;\n                }),\n                borderColor: '#00e2a1',\n                backgroundColor: '#00e2a1',\n            },\n        ],\n    };\n    const options = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getLineOptions(max), [max]);\n    return ((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(\"div\", { className: \"str-video__call-stats-line-chart-container\", children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__.Line, { options: options, data: data, className: \"str-video__call-stats__latencychart\" }) }));\n};\nconst getLineOptions = (max) => ({\n    maintainAspectRatio: false,\n    animation: { duration: 0 },\n    elements: {\n        line: { borderWidth: 1 },\n        point: { radius: 2 },\n    },\n    scales: {\n        y: {\n            position: 'right',\n            stacked: true,\n            min: 0,\n            max: Math.max(180, Math.ceil((max + 10) / 10) * 10),\n            grid: { display: true, color: '#979ca0' },\n            ticks: { stepSize: 30 },\n        },\n        x: {\n            grid: { display: false },\n            ticks: { display: false },\n        },\n    },\n});\n\n\n//# sourceMappingURL=latency-chart-Bj5OSYzg.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby92aWRlby1yZWFjdC1zZGsvZGlzdC9sYXRlbmN5LWNoYXJ0LUJqNU9TWXpnLmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBd0M7QUFDZ0Q7QUFDakQ7QUFDUDs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsMkNBQUssVUFBVSxtREFBYSxFQUFFLGlEQUFXLEVBQUUsaURBQVcsRUFBRSxrREFBWTtBQUNwRTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixnQkFBZ0IsR0FBRyxrQkFBa0I7QUFDM0QsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esb0JBQW9CLDhDQUFPO0FBQzNCLFlBQVksc0RBQUcsVUFBVSxtRUFBbUUsc0RBQUcsQ0FBQyxpREFBSSxJQUFJLGdGQUFnRixHQUFHO0FBQzNMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQyxpQkFBaUIsV0FBVztBQUM1QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGlDQUFpQztBQUNyRCxxQkFBcUIsY0FBYztBQUNuQyxTQUFTO0FBQ1Q7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDLHFCQUFxQixnQkFBZ0I7QUFDckMsU0FBUztBQUNULEtBQUs7QUFDTCxDQUFDOztBQUUyQztBQUM1QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxocFxcRG93bmxvYWRzXFxyZW1vdGUtaW50ZXJ2aWV3LXBsYXRmb3JtXFxub2RlX21vZHVsZXNcXEBzdHJlYW0taW9cXHZpZGVvLXJlYWN0LXNka1xcZGlzdFxcbGF0ZW5jeS1jaGFydC1CajVPU1l6Zy5lcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc3ggfSBmcm9tICdyZWFjdC9qc3gtcnVudGltZSc7XG5pbXBvcnQgeyBDaGFydCwgQ2F0ZWdvcnlTY2FsZSwgTGluZWFyU2NhbGUsIExpbmVFbGVtZW50LCBQb2ludEVsZW1lbnQgfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbi8vIE5PVEU6IHRoaXMgaXMgYSBzaWRlIGVmZmVjdCBieSBkZWZpbml0aW9uLCBidXQgdGhpcyBjb21wb25lbnQgaXNcbi8vIGlzb2xhdGVkIGluIGEgc2VwYXJhdGUgY2h1bmssIGFuZCBpdCB3b24ndCBhZmZlY3QgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbi8vIFNlZSBDYWxsU3RhdHMudHN4IGZvciBtb3JlIGRldGFpbHMuXG5DaGFydC5yZWdpc3RlcihDYXRlZ29yeVNjYWxlLCBMaW5lYXJTY2FsZSwgTGluZUVsZW1lbnQsIFBvaW50RWxlbWVudCk7XG5jb25zdCBDYWxsU3RhdHNMYXRlbmN5Q2hhcnQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7IHZhbHVlcyB9ID0gcHJvcHM7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgbGFiZWxzOiB2YWx1ZXMubWFwKChwb2ludCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHBvaW50LnggKiAxMDAwKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtkYXRlLmdldEhvdXJzKCl9OiR7ZGF0ZS5nZXRNaW51dGVzKCl9YDtcbiAgICAgICAgfSksXG4gICAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YTogdmFsdWVzLm1hcCgocG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB5IH0gPSBwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAwZTJhMScsXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzAwZTJhMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZU1lbW8oKCkgPT4gZ2V0TGluZU9wdGlvbnMobWF4KSwgW21heF0pO1xuICAgIHJldHVybiAoanN4KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0cy1saW5lLWNoYXJ0LWNvbnRhaW5lclwiLCBjaGlsZHJlbjoganN4KExpbmUsIHsgb3B0aW9uczogb3B0aW9ucywgZGF0YTogZGF0YSwgY2xhc3NOYW1lOiBcInN0ci12aWRlb19fY2FsbC1zdGF0c19fbGF0ZW5jeWNoYXJ0XCIgfSkgfSkpO1xufTtcbmNvbnN0IGdldExpbmVPcHRpb25zID0gKG1heCkgPT4gKHtcbiAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcbiAgICBhbmltYXRpb246IHsgZHVyYXRpb246IDAgfSxcbiAgICBlbGVtZW50czoge1xuICAgICAgICBsaW5lOiB7IGJvcmRlcldpZHRoOiAxIH0sXG4gICAgICAgIHBvaW50OiB7IHJhZGl1czogMiB9LFxuICAgIH0sXG4gICAgc2NhbGVzOiB7XG4gICAgICAgIHk6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxuICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogTWF0aC5tYXgoMTgwLCBNYXRoLmNlaWwoKG1heCArIDEwKSAvIDEwKSAqIDEwKSxcbiAgICAgICAgICAgIGdyaWQ6IHsgZGlzcGxheTogdHJ1ZSwgY29sb3I6ICcjOTc5Y2EwJyB9LFxuICAgICAgICAgICAgdGlja3M6IHsgc3RlcFNpemU6IDMwIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHg6IHtcbiAgICAgICAgICAgIGdyaWQ6IHsgZGlzcGxheTogZmFsc2UgfSxcbiAgICAgICAgICAgIHRpY2tzOiB7IGRpc3BsYXk6IGZhbHNlIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgeyBDYWxsU3RhdHNMYXRlbmN5Q2hhcnQgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGF0ZW5jeS1jaGFydC1CajVPU1l6Zy5lcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-react-sdk/dist/latency-chart-Bj5OSYzg.es.js\n");

/***/ })

};
;